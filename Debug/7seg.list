
7seg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026d8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08002790  08002790  00012790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027f8  080027f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080027f8  080027f8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027f8  080027f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027f8  080027f8  000127f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027fc  080027fc  000127fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002800  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  0800280c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  0800280c  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000afda  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a58  00000000  00000000  0002b00e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  0002ca68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000998  00000000  00000000  0002d4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014f0f  00000000  00000000  0002de60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b622  00000000  00000000  00042d6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086d68  00000000  00000000  0004e391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d50f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002584  00000000  00000000  000d514c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002778 	.word	0x08002778

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08002778 	.word	0x08002778

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <_LEDmuliplexing>:
uint8_t DOTbuffer[FIELDS];

//switching fields


void _LEDmuliplexing(void) {
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	actualField++;
 800021c:	4b18      	ldr	r3, [pc, #96]	; (8000280 <_LEDmuliplexing+0x68>)
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	b2db      	uxtb	r3, r3
 8000222:	3301      	adds	r3, #1
 8000224:	b2da      	uxtb	r2, r3
 8000226:	4b16      	ldr	r3, [pc, #88]	; (8000280 <_LEDmuliplexing+0x68>)
 8000228:	701a      	strb	r2, [r3, #0]
	if (actualField >= FIELDS)
 800022a:	4b15      	ldr	r3, [pc, #84]	; (8000280 <_LEDmuliplexing+0x68>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	b2db      	uxtb	r3, r3
 8000230:	2b03      	cmp	r3, #3
 8000232:	d902      	bls.n	800023a <_LEDmuliplexing+0x22>
		actualField = 0;
 8000234:	4b12      	ldr	r3, [pc, #72]	; (8000280 <_LEDmuliplexing+0x68>)
 8000236:	2200      	movs	r2, #0
 8000238:	701a      	strb	r2, [r3, #0]

	_LEDallOff();
 800023a:	f000 f8d3 	bl	80003e4 <_LEDallOff>
	_LEDfieldOn(actualField);
 800023e:	4b10      	ldr	r3, [pc, #64]	; (8000280 <_LEDmuliplexing+0x68>)
 8000240:	781b      	ldrb	r3, [r3, #0]
 8000242:	b2db      	uxtb	r3, r3
 8000244:	0018      	movs	r0, r3
 8000246:	f000 f893 	bl	8000370 <_LEDfieldOn>
	_LEDwriteCharacter(LEDbuffer[actualField]);
 800024a:	4b0d      	ldr	r3, [pc, #52]	; (8000280 <_LEDmuliplexing+0x68>)
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	b2db      	uxtb	r3, r3
 8000250:	001a      	movs	r2, r3
 8000252:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <_LEDmuliplexing+0x6c>)
 8000254:	5c9b      	ldrb	r3, [r3, r2]
 8000256:	0018      	movs	r0, r3
 8000258:	f000 f922 	bl	80004a0 <_LEDwriteCharacter>

	if (DOTbuffer[actualField] == 1) {
 800025c:	4b08      	ldr	r3, [pc, #32]	; (8000280 <_LEDmuliplexing+0x68>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	b2db      	uxtb	r3, r3
 8000262:	001a      	movs	r2, r3
 8000264:	4b08      	ldr	r3, [pc, #32]	; (8000288 <_LEDmuliplexing+0x70>)
 8000266:	5c9b      	ldrb	r3, [r3, r2]
 8000268:	2b01      	cmp	r3, #1
 800026a:	d105      	bne.n	8000278 <_LEDmuliplexing+0x60>
		HAL_GPIO_WritePin(DISP_SEG_DOT_GPIO_Port, DISP_SEG_DOT_Pin, SEGMENT_ON);
 800026c:	4b07      	ldr	r3, [pc, #28]	; (800028c <_LEDmuliplexing+0x74>)
 800026e:	2200      	movs	r2, #0
 8000270:	2140      	movs	r1, #64	; 0x40
 8000272:	0018      	movs	r0, r3
 8000274:	f001 f8f2 	bl	800145c <HAL_GPIO_WritePin>
	}
}
 8000278:	46c0      	nop			; (mov r8, r8)
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	20000028 	.word	0x20000028
 8000284:	2000002c 	.word	0x2000002c
 8000288:	20000030 	.word	0x20000030
 800028c:	50000400 	.word	0x50000400

08000290 <_LEDsegmentOn>:

void _LEDsegmentOn(uint8_t segment) {
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	0002      	movs	r2, r0
 8000298:	1dfb      	adds	r3, r7, #7
 800029a:	701a      	strb	r2, [r3, #0]
	if (segment == DISP_SEG_A)
 800029c:	1dfb      	adds	r3, r7, #7
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	2b01      	cmp	r3, #1
 80002a2:	d106      	bne.n	80002b2 <_LEDsegmentOn+0x22>
		HAL_GPIO_WritePin(DISP_SEG_A_GPIO_Port, DISP_SEG_A_Pin, SEGMENT_ON);
 80002a4:	4b30      	ldr	r3, [pc, #192]	; (8000368 <_LEDsegmentOn+0xd8>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	2104      	movs	r1, #4
 80002aa:	0018      	movs	r0, r3
 80002ac:	f001 f8d6 	bl	800145c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISP_SEG_F_GPIO_Port, DISP_SEG_F_Pin, SEGMENT_ON);
	else if (segment == DISP_SEG_G)
		HAL_GPIO_WritePin(DISP_SEG_G_GPIO_Port, DISP_SEG_G_Pin, SEGMENT_ON);
	else if (segment == DISP_SEG_DOT)
		HAL_GPIO_WritePin(DISP_SEG_DOT_GPIO_Port, DISP_SEG_DOT_Pin, SEGMENT_ON);
}
 80002b0:	e055      	b.n	800035e <_LEDsegmentOn+0xce>
	else if (segment == DISP_SEG_B)
 80002b2:	1dfb      	adds	r3, r7, #7
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	2b02      	cmp	r3, #2
 80002b8:	d108      	bne.n	80002cc <_LEDsegmentOn+0x3c>
		HAL_GPIO_WritePin(DISP_SEG_B_GPIO_Port, DISP_SEG_B_Pin, SEGMENT_ON);
 80002ba:	2380      	movs	r3, #128	; 0x80
 80002bc:	0059      	lsls	r1, r3, #1
 80002be:	23a0      	movs	r3, #160	; 0xa0
 80002c0:	05db      	lsls	r3, r3, #23
 80002c2:	2200      	movs	r2, #0
 80002c4:	0018      	movs	r0, r3
 80002c6:	f001 f8c9 	bl	800145c <HAL_GPIO_WritePin>
}
 80002ca:	e048      	b.n	800035e <_LEDsegmentOn+0xce>
	else if (segment == DISP_SEG_C)
 80002cc:	1dfb      	adds	r3, r7, #7
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	2b03      	cmp	r3, #3
 80002d2:	d108      	bne.n	80002e6 <_LEDsegmentOn+0x56>
		HAL_GPIO_WritePin(DISP_SEG_C_GPIO_Port, DISP_SEG_C_Pin, SEGMENT_ON);
 80002d4:	2380      	movs	r3, #128	; 0x80
 80002d6:	0099      	lsls	r1, r3, #2
 80002d8:	23a0      	movs	r3, #160	; 0xa0
 80002da:	05db      	lsls	r3, r3, #23
 80002dc:	2200      	movs	r2, #0
 80002de:	0018      	movs	r0, r3
 80002e0:	f001 f8bc 	bl	800145c <HAL_GPIO_WritePin>
}
 80002e4:	e03b      	b.n	800035e <_LEDsegmentOn+0xce>
	else if (segment == DISP_SEG_D)
 80002e6:	1dfb      	adds	r3, r7, #7
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	2b04      	cmp	r3, #4
 80002ec:	d106      	bne.n	80002fc <_LEDsegmentOn+0x6c>
		HAL_GPIO_WritePin(DISP_SEG_D_GPIO_Port, DISP_SEG_D_Pin, SEGMENT_ON);
 80002ee:	4b1f      	ldr	r3, [pc, #124]	; (800036c <_LEDsegmentOn+0xdc>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	2140      	movs	r1, #64	; 0x40
 80002f4:	0018      	movs	r0, r3
 80002f6:	f001 f8b1 	bl	800145c <HAL_GPIO_WritePin>
}
 80002fa:	e030      	b.n	800035e <_LEDsegmentOn+0xce>
	else if (segment == DISP_SEG_E)
 80002fc:	1dfb      	adds	r3, r7, #7
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b05      	cmp	r3, #5
 8000302:	d108      	bne.n	8000316 <_LEDsegmentOn+0x86>
		HAL_GPIO_WritePin(DISP_SEG_E_GPIO_Port, DISP_SEG_E_Pin, SEGMENT_ON);
 8000304:	2380      	movs	r3, #128	; 0x80
 8000306:	00d9      	lsls	r1, r3, #3
 8000308:	23a0      	movs	r3, #160	; 0xa0
 800030a:	05db      	lsls	r3, r3, #23
 800030c:	2200      	movs	r2, #0
 800030e:	0018      	movs	r0, r3
 8000310:	f001 f8a4 	bl	800145c <HAL_GPIO_WritePin>
}
 8000314:	e023      	b.n	800035e <_LEDsegmentOn+0xce>
	else if (segment == DISP_SEG_F)
 8000316:	1dfb      	adds	r3, r7, #7
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	2b06      	cmp	r3, #6
 800031c:	d108      	bne.n	8000330 <_LEDsegmentOn+0xa0>
		HAL_GPIO_WritePin(DISP_SEG_F_GPIO_Port, DISP_SEG_F_Pin, SEGMENT_ON);
 800031e:	2380      	movs	r3, #128	; 0x80
 8000320:	0119      	lsls	r1, r3, #4
 8000322:	23a0      	movs	r3, #160	; 0xa0
 8000324:	05db      	lsls	r3, r3, #23
 8000326:	2200      	movs	r2, #0
 8000328:	0018      	movs	r0, r3
 800032a:	f001 f897 	bl	800145c <HAL_GPIO_WritePin>
}
 800032e:	e016      	b.n	800035e <_LEDsegmentOn+0xce>
	else if (segment == DISP_SEG_G)
 8000330:	1dfb      	adds	r3, r7, #7
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	2b07      	cmp	r3, #7
 8000336:	d108      	bne.n	800034a <_LEDsegmentOn+0xba>
		HAL_GPIO_WritePin(DISP_SEG_G_GPIO_Port, DISP_SEG_G_Pin, SEGMENT_ON);
 8000338:	2380      	movs	r3, #128	; 0x80
 800033a:	0159      	lsls	r1, r3, #5
 800033c:	23a0      	movs	r3, #160	; 0xa0
 800033e:	05db      	lsls	r3, r3, #23
 8000340:	2200      	movs	r2, #0
 8000342:	0018      	movs	r0, r3
 8000344:	f001 f88a 	bl	800145c <HAL_GPIO_WritePin>
}
 8000348:	e009      	b.n	800035e <_LEDsegmentOn+0xce>
	else if (segment == DISP_SEG_DOT)
 800034a:	1dfb      	adds	r3, r7, #7
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	2b08      	cmp	r3, #8
 8000350:	d105      	bne.n	800035e <_LEDsegmentOn+0xce>
		HAL_GPIO_WritePin(DISP_SEG_DOT_GPIO_Port, DISP_SEG_DOT_Pin, SEGMENT_ON);
 8000352:	4b05      	ldr	r3, [pc, #20]	; (8000368 <_LEDsegmentOn+0xd8>)
 8000354:	2200      	movs	r2, #0
 8000356:	2140      	movs	r1, #64	; 0x40
 8000358:	0018      	movs	r0, r3
 800035a:	f001 f87f 	bl	800145c <HAL_GPIO_WritePin>
}
 800035e:	46c0      	nop			; (mov r8, r8)
 8000360:	46bd      	mov	sp, r7
 8000362:	b002      	add	sp, #8
 8000364:	bd80      	pop	{r7, pc}
 8000366:	46c0      	nop			; (mov r8, r8)
 8000368:	50000400 	.word	0x50000400
 800036c:	50000800 	.word	0x50000800

08000370 <_LEDfieldOn>:

void _LEDfieldOn(uint8_t field) {
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	0002      	movs	r2, r0
 8000378:	1dfb      	adds	r3, r7, #7
 800037a:	701a      	strb	r2, [r3, #0]

#if FIELDS >=1
	if (field == FIELD_0)
 800037c:	1dfb      	adds	r3, r7, #7
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d106      	bne.n	8000392 <_LEDfieldOn+0x22>
		HAL_GPIO_WritePin(DISP_FIELD_0_GPIO_Port, DISP_FIELD_0_Pin, FIELD_ON);
 8000384:	4b16      	ldr	r3, [pc, #88]	; (80003e0 <_LEDfieldOn+0x70>)
 8000386:	2201      	movs	r2, #1
 8000388:	2180      	movs	r1, #128	; 0x80
 800038a:	0018      	movs	r0, r3
 800038c:	f001 f866 	bl	800145c <HAL_GPIO_WritePin>

#if FIELDS >=4
	else if (field == FIELD_3)
		HAL_GPIO_WritePin(DISP_FIELD_3_GPIO_Port, DISP_FIELD_3_Pin, FIELD_ON);
#endif
}
 8000390:	e021      	b.n	80003d6 <_LEDfieldOn+0x66>
	else if (field == FIELD_1)
 8000392:	1dfb      	adds	r3, r7, #7
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	2b01      	cmp	r3, #1
 8000398:	d108      	bne.n	80003ac <_LEDfieldOn+0x3c>
		HAL_GPIO_WritePin(DISP_FIELD_1_GPIO_Port, DISP_FIELD_1_Pin, FIELD_ON);
 800039a:	2380      	movs	r3, #128	; 0x80
 800039c:	0219      	lsls	r1, r3, #8
 800039e:	23a0      	movs	r3, #160	; 0xa0
 80003a0:	05db      	lsls	r3, r3, #23
 80003a2:	2201      	movs	r2, #1
 80003a4:	0018      	movs	r0, r3
 80003a6:	f001 f859 	bl	800145c <HAL_GPIO_WritePin>
}
 80003aa:	e014      	b.n	80003d6 <_LEDfieldOn+0x66>
	else if (field == FIELD_2)
 80003ac:	1dfb      	adds	r3, r7, #7
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	2b02      	cmp	r3, #2
 80003b2:	d106      	bne.n	80003c2 <_LEDfieldOn+0x52>
		HAL_GPIO_WritePin(DISP_FIELD_2_GPIO_Port, DISP_FIELD_2_Pin, FIELD_ON);
 80003b4:	4b0a      	ldr	r3, [pc, #40]	; (80003e0 <_LEDfieldOn+0x70>)
 80003b6:	2201      	movs	r2, #1
 80003b8:	2108      	movs	r1, #8
 80003ba:	0018      	movs	r0, r3
 80003bc:	f001 f84e 	bl	800145c <HAL_GPIO_WritePin>
}
 80003c0:	e009      	b.n	80003d6 <_LEDfieldOn+0x66>
	else if (field == FIELD_3)
 80003c2:	1dfb      	adds	r3, r7, #7
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	2b03      	cmp	r3, #3
 80003c8:	d105      	bne.n	80003d6 <_LEDfieldOn+0x66>
		HAL_GPIO_WritePin(DISP_FIELD_3_GPIO_Port, DISP_FIELD_3_Pin, FIELD_ON);
 80003ca:	4b05      	ldr	r3, [pc, #20]	; (80003e0 <_LEDfieldOn+0x70>)
 80003cc:	2201      	movs	r2, #1
 80003ce:	2110      	movs	r1, #16
 80003d0:	0018      	movs	r0, r3
 80003d2:	f001 f843 	bl	800145c <HAL_GPIO_WritePin>
}
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	46bd      	mov	sp, r7
 80003da:	b002      	add	sp, #8
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	50000400 	.word	0x50000400

080003e4 <_LEDallOff>:

void _LEDallOff(void) {
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0

#if FIELDS >=1
	HAL_GPIO_WritePin(DISP_FIELD_0_GPIO_Port, DISP_FIELD_0_Pin, FIELD_OFF);
 80003e8:	4b2b      	ldr	r3, [pc, #172]	; (8000498 <_LEDallOff+0xb4>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	2180      	movs	r1, #128	; 0x80
 80003ee:	0018      	movs	r0, r3
 80003f0:	f001 f834 	bl	800145c <HAL_GPIO_WritePin>
#endif
#if FIELDS >=2
	HAL_GPIO_WritePin(DISP_FIELD_1_GPIO_Port, DISP_FIELD_1_Pin, FIELD_OFF);
 80003f4:	2380      	movs	r3, #128	; 0x80
 80003f6:	0219      	lsls	r1, r3, #8
 80003f8:	23a0      	movs	r3, #160	; 0xa0
 80003fa:	05db      	lsls	r3, r3, #23
 80003fc:	2200      	movs	r2, #0
 80003fe:	0018      	movs	r0, r3
 8000400:	f001 f82c 	bl	800145c <HAL_GPIO_WritePin>
#endif
#if FIELDS >=3
	HAL_GPIO_WritePin(DISP_FIELD_2_GPIO_Port, DISP_FIELD_2_Pin, FIELD_OFF);
 8000404:	4b24      	ldr	r3, [pc, #144]	; (8000498 <_LEDallOff+0xb4>)
 8000406:	2200      	movs	r2, #0
 8000408:	2108      	movs	r1, #8
 800040a:	0018      	movs	r0, r3
 800040c:	f001 f826 	bl	800145c <HAL_GPIO_WritePin>
#endif
#if FIELDS >=4
	HAL_GPIO_WritePin(DISP_FIELD_3_GPIO_Port, DISP_FIELD_3_Pin, FIELD_OFF);
 8000410:	4b21      	ldr	r3, [pc, #132]	; (8000498 <_LEDallOff+0xb4>)
 8000412:	2200      	movs	r2, #0
 8000414:	2110      	movs	r1, #16
 8000416:	0018      	movs	r0, r3
 8000418:	f001 f820 	bl	800145c <HAL_GPIO_WritePin>
#endif

	HAL_GPIO_WritePin(DISP_SEG_A_GPIO_Port, DISP_SEG_A_Pin, SEGMENT_OFF);
 800041c:	4b1e      	ldr	r3, [pc, #120]	; (8000498 <_LEDallOff+0xb4>)
 800041e:	2201      	movs	r2, #1
 8000420:	2104      	movs	r1, #4
 8000422:	0018      	movs	r0, r3
 8000424:	f001 f81a 	bl	800145c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_SEG_B_GPIO_Port, DISP_SEG_B_Pin, SEGMENT_OFF);
 8000428:	2380      	movs	r3, #128	; 0x80
 800042a:	0059      	lsls	r1, r3, #1
 800042c:	23a0      	movs	r3, #160	; 0xa0
 800042e:	05db      	lsls	r3, r3, #23
 8000430:	2201      	movs	r2, #1
 8000432:	0018      	movs	r0, r3
 8000434:	f001 f812 	bl	800145c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_SEG_C_GPIO_Port, DISP_SEG_C_Pin, SEGMENT_OFF);
 8000438:	2380      	movs	r3, #128	; 0x80
 800043a:	0099      	lsls	r1, r3, #2
 800043c:	23a0      	movs	r3, #160	; 0xa0
 800043e:	05db      	lsls	r3, r3, #23
 8000440:	2201      	movs	r2, #1
 8000442:	0018      	movs	r0, r3
 8000444:	f001 f80a 	bl	800145c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_SEG_D_GPIO_Port, DISP_SEG_D_Pin, SEGMENT_OFF);
 8000448:	4b14      	ldr	r3, [pc, #80]	; (800049c <_LEDallOff+0xb8>)
 800044a:	2201      	movs	r2, #1
 800044c:	2140      	movs	r1, #64	; 0x40
 800044e:	0018      	movs	r0, r3
 8000450:	f001 f804 	bl	800145c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_SEG_E_GPIO_Port, DISP_SEG_E_Pin, SEGMENT_OFF);
 8000454:	2380      	movs	r3, #128	; 0x80
 8000456:	00d9      	lsls	r1, r3, #3
 8000458:	23a0      	movs	r3, #160	; 0xa0
 800045a:	05db      	lsls	r3, r3, #23
 800045c:	2201      	movs	r2, #1
 800045e:	0018      	movs	r0, r3
 8000460:	f000 fffc 	bl	800145c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_SEG_F_GPIO_Port, DISP_SEG_F_Pin, SEGMENT_OFF);
 8000464:	2380      	movs	r3, #128	; 0x80
 8000466:	0119      	lsls	r1, r3, #4
 8000468:	23a0      	movs	r3, #160	; 0xa0
 800046a:	05db      	lsls	r3, r3, #23
 800046c:	2201      	movs	r2, #1
 800046e:	0018      	movs	r0, r3
 8000470:	f000 fff4 	bl	800145c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_SEG_G_GPIO_Port, DISP_SEG_G_Pin, SEGMENT_OFF);
 8000474:	2380      	movs	r3, #128	; 0x80
 8000476:	0159      	lsls	r1, r3, #5
 8000478:	23a0      	movs	r3, #160	; 0xa0
 800047a:	05db      	lsls	r3, r3, #23
 800047c:	2201      	movs	r2, #1
 800047e:	0018      	movs	r0, r3
 8000480:	f000 ffec 	bl	800145c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_SEG_DOT_GPIO_Port, DISP_SEG_DOT_Pin, SEGMENT_OFF);
 8000484:	4b04      	ldr	r3, [pc, #16]	; (8000498 <_LEDallOff+0xb4>)
 8000486:	2201      	movs	r2, #1
 8000488:	2140      	movs	r1, #64	; 0x40
 800048a:	0018      	movs	r0, r3
 800048c:	f000 ffe6 	bl	800145c <HAL_GPIO_WritePin>

}
 8000490:	46c0      	nop			; (mov r8, r8)
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	50000400 	.word	0x50000400
 800049c:	50000800 	.word	0x50000800

080004a0 <_LEDwriteCharacter>:

void _LEDwriteCharacter(uint8_t character) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	0002      	movs	r2, r0
 80004a8:	1dfb      	adds	r3, r7, #7
 80004aa:	701a      	strb	r2, [r3, #0]

	if (character == 1 || character == '1') {
 80004ac:	1dfb      	adds	r3, r7, #7
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	d003      	beq.n	80004bc <_LEDwriteCharacter+0x1c>
 80004b4:	1dfb      	adds	r3, r7, #7
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	2b31      	cmp	r3, #49	; 0x31
 80004ba:	d106      	bne.n	80004ca <_LEDwriteCharacter+0x2a>
		_LEDsegmentOn(DISP_SEG_B);
 80004bc:	2002      	movs	r0, #2
 80004be:	f7ff fee7 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_C);
 80004c2:	2003      	movs	r0, #3
 80004c4:	f7ff fee4 	bl	8000290 <_LEDsegmentOn>
 80004c8:	e18a      	b.n	80007e0 <_LEDwriteCharacter+0x340>
	} else if (character == 2 || character == '2') {
 80004ca:	1dfb      	adds	r3, r7, #7
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	2b02      	cmp	r3, #2
 80004d0:	d003      	beq.n	80004da <_LEDwriteCharacter+0x3a>
 80004d2:	1dfb      	adds	r3, r7, #7
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	2b32      	cmp	r3, #50	; 0x32
 80004d8:	d10f      	bne.n	80004fa <_LEDwriteCharacter+0x5a>
		_LEDsegmentOn(DISP_SEG_A);
 80004da:	2001      	movs	r0, #1
 80004dc:	f7ff fed8 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_B);
 80004e0:	2002      	movs	r0, #2
 80004e2:	f7ff fed5 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_G);
 80004e6:	2007      	movs	r0, #7
 80004e8:	f7ff fed2 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_E);
 80004ec:	2005      	movs	r0, #5
 80004ee:	f7ff fecf 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_D);
 80004f2:	2004      	movs	r0, #4
 80004f4:	f7ff fecc 	bl	8000290 <_LEDsegmentOn>
 80004f8:	e172      	b.n	80007e0 <_LEDwriteCharacter+0x340>
	} else if (character == 3 || character == '3') {
 80004fa:	1dfb      	adds	r3, r7, #7
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	2b03      	cmp	r3, #3
 8000500:	d003      	beq.n	800050a <_LEDwriteCharacter+0x6a>
 8000502:	1dfb      	adds	r3, r7, #7
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2b33      	cmp	r3, #51	; 0x33
 8000508:	d10f      	bne.n	800052a <_LEDwriteCharacter+0x8a>
		_LEDsegmentOn(DISP_SEG_A);
 800050a:	2001      	movs	r0, #1
 800050c:	f7ff fec0 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_B);
 8000510:	2002      	movs	r0, #2
 8000512:	f7ff febd 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_G);
 8000516:	2007      	movs	r0, #7
 8000518:	f7ff feba 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_C);
 800051c:	2003      	movs	r0, #3
 800051e:	f7ff feb7 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_D);
 8000522:	2004      	movs	r0, #4
 8000524:	f7ff feb4 	bl	8000290 <_LEDsegmentOn>
 8000528:	e15a      	b.n	80007e0 <_LEDwriteCharacter+0x340>
	} else if (character == 4 || character == '4') {
 800052a:	1dfb      	adds	r3, r7, #7
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b04      	cmp	r3, #4
 8000530:	d003      	beq.n	800053a <_LEDwriteCharacter+0x9a>
 8000532:	1dfb      	adds	r3, r7, #7
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b34      	cmp	r3, #52	; 0x34
 8000538:	d10c      	bne.n	8000554 <_LEDwriteCharacter+0xb4>
		_LEDsegmentOn(DISP_SEG_F);
 800053a:	2006      	movs	r0, #6
 800053c:	f7ff fea8 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_G);
 8000540:	2007      	movs	r0, #7
 8000542:	f7ff fea5 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_B);
 8000546:	2002      	movs	r0, #2
 8000548:	f7ff fea2 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_C);
 800054c:	2003      	movs	r0, #3
 800054e:	f7ff fe9f 	bl	8000290 <_LEDsegmentOn>
 8000552:	e145      	b.n	80007e0 <_LEDwriteCharacter+0x340>
	} else if (character == 5 || character == '5') {
 8000554:	1dfb      	adds	r3, r7, #7
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b05      	cmp	r3, #5
 800055a:	d003      	beq.n	8000564 <_LEDwriteCharacter+0xc4>
 800055c:	1dfb      	adds	r3, r7, #7
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b35      	cmp	r3, #53	; 0x35
 8000562:	d10f      	bne.n	8000584 <_LEDwriteCharacter+0xe4>
		_LEDsegmentOn(DISP_SEG_A);
 8000564:	2001      	movs	r0, #1
 8000566:	f7ff fe93 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_F);
 800056a:	2006      	movs	r0, #6
 800056c:	f7ff fe90 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_G);
 8000570:	2007      	movs	r0, #7
 8000572:	f7ff fe8d 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_C);
 8000576:	2003      	movs	r0, #3
 8000578:	f7ff fe8a 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_D);
 800057c:	2004      	movs	r0, #4
 800057e:	f7ff fe87 	bl	8000290 <_LEDsegmentOn>
 8000582:	e12d      	b.n	80007e0 <_LEDwriteCharacter+0x340>
	} else if (character == 6 || character == '6') {
 8000584:	1dfb      	adds	r3, r7, #7
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b06      	cmp	r3, #6
 800058a:	d003      	beq.n	8000594 <_LEDwriteCharacter+0xf4>
 800058c:	1dfb      	adds	r3, r7, #7
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b36      	cmp	r3, #54	; 0x36
 8000592:	d112      	bne.n	80005ba <_LEDwriteCharacter+0x11a>
		_LEDsegmentOn(DISP_SEG_A);
 8000594:	2001      	movs	r0, #1
 8000596:	f7ff fe7b 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_C);
 800059a:	2003      	movs	r0, #3
 800059c:	f7ff fe78 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_D);
 80005a0:	2004      	movs	r0, #4
 80005a2:	f7ff fe75 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_E);
 80005a6:	2005      	movs	r0, #5
 80005a8:	f7ff fe72 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_F);
 80005ac:	2006      	movs	r0, #6
 80005ae:	f7ff fe6f 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_G);
 80005b2:	2007      	movs	r0, #7
 80005b4:	f7ff fe6c 	bl	8000290 <_LEDsegmentOn>
 80005b8:	e112      	b.n	80007e0 <_LEDwriteCharacter+0x340>
	} else if (character == 7 || character == '7') {
 80005ba:	1dfb      	adds	r3, r7, #7
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b07      	cmp	r3, #7
 80005c0:	d003      	beq.n	80005ca <_LEDwriteCharacter+0x12a>
 80005c2:	1dfb      	adds	r3, r7, #7
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b37      	cmp	r3, #55	; 0x37
 80005c8:	d109      	bne.n	80005de <_LEDwriteCharacter+0x13e>
		_LEDsegmentOn(DISP_SEG_A);
 80005ca:	2001      	movs	r0, #1
 80005cc:	f7ff fe60 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_B);
 80005d0:	2002      	movs	r0, #2
 80005d2:	f7ff fe5d 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_C);
 80005d6:	2003      	movs	r0, #3
 80005d8:	f7ff fe5a 	bl	8000290 <_LEDsegmentOn>
 80005dc:	e100      	b.n	80007e0 <_LEDwriteCharacter+0x340>
	} else if (character == 8 || character == '8') {
 80005de:	1dfb      	adds	r3, r7, #7
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b08      	cmp	r3, #8
 80005e4:	d003      	beq.n	80005ee <_LEDwriteCharacter+0x14e>
 80005e6:	1dfb      	adds	r3, r7, #7
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b38      	cmp	r3, #56	; 0x38
 80005ec:	d115      	bne.n	800061a <_LEDwriteCharacter+0x17a>
		_LEDsegmentOn(DISP_SEG_A);
 80005ee:	2001      	movs	r0, #1
 80005f0:	f7ff fe4e 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_B);
 80005f4:	2002      	movs	r0, #2
 80005f6:	f7ff fe4b 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_C);
 80005fa:	2003      	movs	r0, #3
 80005fc:	f7ff fe48 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_D);
 8000600:	2004      	movs	r0, #4
 8000602:	f7ff fe45 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_E);
 8000606:	2005      	movs	r0, #5
 8000608:	f7ff fe42 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_F);
 800060c:	2006      	movs	r0, #6
 800060e:	f7ff fe3f 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_G);
 8000612:	2007      	movs	r0, #7
 8000614:	f7ff fe3c 	bl	8000290 <_LEDsegmentOn>
 8000618:	e0e2      	b.n	80007e0 <_LEDwriteCharacter+0x340>
	} else if (character == 9 || character == '9') {
 800061a:	1dfb      	adds	r3, r7, #7
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b09      	cmp	r3, #9
 8000620:	d003      	beq.n	800062a <_LEDwriteCharacter+0x18a>
 8000622:	1dfb      	adds	r3, r7, #7
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b39      	cmp	r3, #57	; 0x39
 8000628:	d112      	bne.n	8000650 <_LEDwriteCharacter+0x1b0>
		_LEDsegmentOn(DISP_SEG_A);
 800062a:	2001      	movs	r0, #1
 800062c:	f7ff fe30 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_B);
 8000630:	2002      	movs	r0, #2
 8000632:	f7ff fe2d 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_C);
 8000636:	2003      	movs	r0, #3
 8000638:	f7ff fe2a 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_D);
 800063c:	2004      	movs	r0, #4
 800063e:	f7ff fe27 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_F);
 8000642:	2006      	movs	r0, #6
 8000644:	f7ff fe24 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_G);
 8000648:	2007      	movs	r0, #7
 800064a:	f7ff fe21 	bl	8000290 <_LEDsegmentOn>
 800064e:	e0c7      	b.n	80007e0 <_LEDwriteCharacter+0x340>
	} else if (character == 0 || character == '0') {
 8000650:	1dfb      	adds	r3, r7, #7
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d003      	beq.n	8000660 <_LEDwriteCharacter+0x1c0>
 8000658:	1dfb      	adds	r3, r7, #7
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b30      	cmp	r3, #48	; 0x30
 800065e:	d112      	bne.n	8000686 <_LEDwriteCharacter+0x1e6>
		_LEDsegmentOn(DISP_SEG_A);
 8000660:	2001      	movs	r0, #1
 8000662:	f7ff fe15 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_B);
 8000666:	2002      	movs	r0, #2
 8000668:	f7ff fe12 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_C);
 800066c:	2003      	movs	r0, #3
 800066e:	f7ff fe0f 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_D);
 8000672:	2004      	movs	r0, #4
 8000674:	f7ff fe0c 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_E);
 8000678:	2005      	movs	r0, #5
 800067a:	f7ff fe09 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_F);
 800067e:	2006      	movs	r0, #6
 8000680:	f7ff fe06 	bl	8000290 <_LEDsegmentOn>
 8000684:	e0ac      	b.n	80007e0 <_LEDwriteCharacter+0x340>
	} else if (character == 'A') {
 8000686:	1dfb      	adds	r3, r7, #7
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b41      	cmp	r3, #65	; 0x41
 800068c:	d112      	bne.n	80006b4 <_LEDwriteCharacter+0x214>
		_LEDsegmentOn(DISP_SEG_A);
 800068e:	2001      	movs	r0, #1
 8000690:	f7ff fdfe 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_B);
 8000694:	2002      	movs	r0, #2
 8000696:	f7ff fdfb 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_C);
 800069a:	2003      	movs	r0, #3
 800069c:	f7ff fdf8 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_E);
 80006a0:	2005      	movs	r0, #5
 80006a2:	f7ff fdf5 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_F);
 80006a6:	2006      	movs	r0, #6
 80006a8:	f7ff fdf2 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_G);
 80006ac:	2007      	movs	r0, #7
 80006ae:	f7ff fdef 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_E);
		_LEDsegmentOn(DISP_SEG_F);
	} else if (character == '-') {
		_LEDsegmentOn(DISP_SEG_G);
	}
}
 80006b2:	e095      	b.n	80007e0 <_LEDwriteCharacter+0x340>
	} else if (character == 'C') {
 80006b4:	1dfb      	adds	r3, r7, #7
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b43      	cmp	r3, #67	; 0x43
 80006ba:	d10c      	bne.n	80006d6 <_LEDwriteCharacter+0x236>
		_LEDsegmentOn(DISP_SEG_A);
 80006bc:	2001      	movs	r0, #1
 80006be:	f7ff fde7 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_D);
 80006c2:	2004      	movs	r0, #4
 80006c4:	f7ff fde4 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_E);
 80006c8:	2005      	movs	r0, #5
 80006ca:	f7ff fde1 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_F);
 80006ce:	2006      	movs	r0, #6
 80006d0:	f7ff fdde 	bl	8000290 <_LEDsegmentOn>
}
 80006d4:	e084      	b.n	80007e0 <_LEDwriteCharacter+0x340>
	} else if (character == 'E') {
 80006d6:	1dfb      	adds	r3, r7, #7
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b45      	cmp	r3, #69	; 0x45
 80006dc:	d10f      	bne.n	80006fe <_LEDwriteCharacter+0x25e>
		_LEDsegmentOn(DISP_SEG_A);
 80006de:	2001      	movs	r0, #1
 80006e0:	f7ff fdd6 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_D);
 80006e4:	2004      	movs	r0, #4
 80006e6:	f7ff fdd3 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_E);
 80006ea:	2005      	movs	r0, #5
 80006ec:	f7ff fdd0 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_F);
 80006f0:	2006      	movs	r0, #6
 80006f2:	f7ff fdcd 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_G);
 80006f6:	2007      	movs	r0, #7
 80006f8:	f7ff fdca 	bl	8000290 <_LEDsegmentOn>
}
 80006fc:	e070      	b.n	80007e0 <_LEDwriteCharacter+0x340>
	} else if (character == 'F') {
 80006fe:	1dfb      	adds	r3, r7, #7
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b46      	cmp	r3, #70	; 0x46
 8000704:	d10c      	bne.n	8000720 <_LEDwriteCharacter+0x280>
		_LEDsegmentOn(DISP_SEG_A);
 8000706:	2001      	movs	r0, #1
 8000708:	f7ff fdc2 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_E);
 800070c:	2005      	movs	r0, #5
 800070e:	f7ff fdbf 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_F);
 8000712:	2006      	movs	r0, #6
 8000714:	f7ff fdbc 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_G);
 8000718:	2007      	movs	r0, #7
 800071a:	f7ff fdb9 	bl	8000290 <_LEDsegmentOn>
}
 800071e:	e05f      	b.n	80007e0 <_LEDwriteCharacter+0x340>
	} else if (character == 'H') {
 8000720:	1dfb      	adds	r3, r7, #7
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b48      	cmp	r3, #72	; 0x48
 8000726:	d10f      	bne.n	8000748 <_LEDwriteCharacter+0x2a8>
		_LEDsegmentOn(DISP_SEG_B);
 8000728:	2002      	movs	r0, #2
 800072a:	f7ff fdb1 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_C);
 800072e:	2003      	movs	r0, #3
 8000730:	f7ff fdae 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_E);
 8000734:	2005      	movs	r0, #5
 8000736:	f7ff fdab 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_F);
 800073a:	2006      	movs	r0, #6
 800073c:	f7ff fda8 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_G);
 8000740:	2007      	movs	r0, #7
 8000742:	f7ff fda5 	bl	8000290 <_LEDsegmentOn>
}
 8000746:	e04b      	b.n	80007e0 <_LEDwriteCharacter+0x340>
	} else if (character == 'J') {
 8000748:	1dfb      	adds	r3, r7, #7
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b4a      	cmp	r3, #74	; 0x4a
 800074e:	d109      	bne.n	8000764 <_LEDwriteCharacter+0x2c4>
		_LEDsegmentOn(DISP_SEG_B);
 8000750:	2002      	movs	r0, #2
 8000752:	f7ff fd9d 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_C);
 8000756:	2003      	movs	r0, #3
 8000758:	f7ff fd9a 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_D);
 800075c:	2004      	movs	r0, #4
 800075e:	f7ff fd97 	bl	8000290 <_LEDsegmentOn>
}
 8000762:	e03d      	b.n	80007e0 <_LEDwriteCharacter+0x340>
	} else if (character == 'L') {
 8000764:	1dfb      	adds	r3, r7, #7
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b4c      	cmp	r3, #76	; 0x4c
 800076a:	d109      	bne.n	8000780 <_LEDwriteCharacter+0x2e0>
		_LEDsegmentOn(DISP_SEG_D);
 800076c:	2004      	movs	r0, #4
 800076e:	f7ff fd8f 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_E);
 8000772:	2005      	movs	r0, #5
 8000774:	f7ff fd8c 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_F);
 8000778:	2006      	movs	r0, #6
 800077a:	f7ff fd89 	bl	8000290 <_LEDsegmentOn>
}
 800077e:	e02f      	b.n	80007e0 <_LEDwriteCharacter+0x340>
	} else if (character == 'P') {
 8000780:	1dfb      	adds	r3, r7, #7
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b50      	cmp	r3, #80	; 0x50
 8000786:	d10f      	bne.n	80007a8 <_LEDwriteCharacter+0x308>
		_LEDsegmentOn(DISP_SEG_A);
 8000788:	2001      	movs	r0, #1
 800078a:	f7ff fd81 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_B);
 800078e:	2002      	movs	r0, #2
 8000790:	f7ff fd7e 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_E);
 8000794:	2005      	movs	r0, #5
 8000796:	f7ff fd7b 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_F);
 800079a:	2006      	movs	r0, #6
 800079c:	f7ff fd78 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_G);
 80007a0:	2007      	movs	r0, #7
 80007a2:	f7ff fd75 	bl	8000290 <_LEDsegmentOn>
}
 80007a6:	e01b      	b.n	80007e0 <_LEDwriteCharacter+0x340>
	} else if (character == 'U') {
 80007a8:	1dfb      	adds	r3, r7, #7
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b55      	cmp	r3, #85	; 0x55
 80007ae:	d10f      	bne.n	80007d0 <_LEDwriteCharacter+0x330>
		_LEDsegmentOn(DISP_SEG_B);
 80007b0:	2002      	movs	r0, #2
 80007b2:	f7ff fd6d 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_C);
 80007b6:	2003      	movs	r0, #3
 80007b8:	f7ff fd6a 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_D);
 80007bc:	2004      	movs	r0, #4
 80007be:	f7ff fd67 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_E);
 80007c2:	2005      	movs	r0, #5
 80007c4:	f7ff fd64 	bl	8000290 <_LEDsegmentOn>
		_LEDsegmentOn(DISP_SEG_F);
 80007c8:	2006      	movs	r0, #6
 80007ca:	f7ff fd61 	bl	8000290 <_LEDsegmentOn>
}
 80007ce:	e007      	b.n	80007e0 <_LEDwriteCharacter+0x340>
	} else if (character == '-') {
 80007d0:	1dfb      	adds	r3, r7, #7
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b2d      	cmp	r3, #45	; 0x2d
 80007d6:	d103      	bne.n	80007e0 <_LEDwriteCharacter+0x340>
		_LEDsegmentOn(DISP_SEG_G);
 80007d8:	2007      	movs	r0, #7
 80007da:	f7ff fd59 	bl	8000290 <_LEDsegmentOn>
}
 80007de:	e7ff      	b.n	80007e0 <_LEDwriteCharacter+0x340>
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	b002      	add	sp, #8
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <LEDinit>:
 *
 * @param  None
 *
 * @retval None
 */
void LEDinit(void) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	LEDclear();
 80007ec:	f000 f86a 	bl	80008c4 <LEDclear>
}
 80007f0:	46c0      	nop			; (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <LEDchar>:
 *
 * @param character to display
 *
 * @retval None
 */
void LEDchar(uint8_t offset, uint8_t character) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	0002      	movs	r2, r0
 8000800:	1dfb      	adds	r3, r7, #7
 8000802:	701a      	strb	r2, [r3, #0]
 8000804:	1dbb      	adds	r3, r7, #6
 8000806:	1c0a      	adds	r2, r1, #0
 8000808:	701a      	strb	r2, [r3, #0]
	LEDbuffer[offset] = character;
 800080a:	1dfb      	adds	r3, r7, #7
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	4a04      	ldr	r2, [pc, #16]	; (8000820 <LEDchar+0x28>)
 8000810:	1db9      	adds	r1, r7, #6
 8000812:	7809      	ldrb	r1, [r1, #0]
 8000814:	54d1      	strb	r1, [r2, r3]
}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	b002      	add	sp, #8
 800081c:	bd80      	pop	{r7, pc}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	2000002c 	.word	0x2000002c

08000824 <LEDint>:
 *
 * @param  number for display
 *
 * @retval None
 */
void LEDint(uint8_t offset, uint16_t number) {
 8000824:	b590      	push	{r4, r7, lr}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	0002      	movs	r2, r0
 800082c:	1dfb      	adds	r3, r7, #7
 800082e:	701a      	strb	r2, [r3, #0]
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	1c0a      	adds	r2, r1, #0
 8000834:	801a      	strh	r2, [r3, #0]

	if (number > MAX_NUMBER)
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	881b      	ldrh	r3, [r3, #0]
 800083a:	4a20      	ldr	r2, [pc, #128]	; (80008bc <LEDint+0x98>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d902      	bls.n	8000846 <LEDint+0x22>
		number = MAX_NUMBER;
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	4a1e      	ldr	r2, [pc, #120]	; (80008bc <LEDint+0x98>)
 8000844:	801a      	strh	r2, [r3, #0]

	//determine size of destination place
	uint8_t size;
	if (number < 10)
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	881b      	ldrh	r3, [r3, #0]
 800084a:	2b09      	cmp	r3, #9
 800084c:	d804      	bhi.n	8000858 <LEDint+0x34>
		size = 1;
 800084e:	230f      	movs	r3, #15
 8000850:	18fb      	adds	r3, r7, r3
 8000852:	2201      	movs	r2, #1
 8000854:	701a      	strb	r2, [r3, #0]
 8000856:	e01c      	b.n	8000892 <LEDint+0x6e>
	else if (number < 100)
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	881b      	ldrh	r3, [r3, #0]
 800085c:	2b63      	cmp	r3, #99	; 0x63
 800085e:	d804      	bhi.n	800086a <LEDint+0x46>
		size = 2;
 8000860:	230f      	movs	r3, #15
 8000862:	18fb      	adds	r3, r7, r3
 8000864:	2202      	movs	r2, #2
 8000866:	701a      	strb	r2, [r3, #0]
 8000868:	e013      	b.n	8000892 <LEDint+0x6e>
	else if (number < 1000)
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	881a      	ldrh	r2, [r3, #0]
 800086e:	23fa      	movs	r3, #250	; 0xfa
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	429a      	cmp	r2, r3
 8000874:	d204      	bcs.n	8000880 <LEDint+0x5c>
		size = 3;
 8000876:	230f      	movs	r3, #15
 8000878:	18fb      	adds	r3, r7, r3
 800087a:	2203      	movs	r2, #3
 800087c:	701a      	strb	r2, [r3, #0]
 800087e:	e008      	b.n	8000892 <LEDint+0x6e>
	else if (number < 10000)
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	881b      	ldrh	r3, [r3, #0]
 8000884:	4a0d      	ldr	r2, [pc, #52]	; (80008bc <LEDint+0x98>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d803      	bhi.n	8000892 <LEDint+0x6e>
		size = 4;
 800088a:	230f      	movs	r3, #15
 800088c:	18fb      	adds	r3, r7, r3
 800088e:	2204      	movs	r2, #4
 8000890:	701a      	strb	r2, [r3, #0]

	char buffer[5];

	itoa(number, buffer, 10);
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	881b      	ldrh	r3, [r3, #0]
 8000896:	2408      	movs	r4, #8
 8000898:	1939      	adds	r1, r7, r4
 800089a:	220a      	movs	r2, #10
 800089c:	0018      	movs	r0, r3
 800089e:	f001 ff1f 	bl	80026e0 <itoa>
	memcpy(LEDbuffer, buffer, size);
 80008a2:	230f      	movs	r3, #15
 80008a4:	18fb      	adds	r3, r7, r3
 80008a6:	781a      	ldrb	r2, [r3, #0]
 80008a8:	1939      	adds	r1, r7, r4
 80008aa:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <LEDint+0x9c>)
 80008ac:	0018      	movs	r0, r3
 80008ae:	f001 ff1b 	bl	80026e8 <memcpy>

}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	46bd      	mov	sp, r7
 80008b6:	b005      	add	sp, #20
 80008b8:	bd90      	pop	{r4, r7, pc}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	0000270f 	.word	0x0000270f
 80008c0:	2000002c 	.word	0x2000002c

080008c4 <LEDclear>:
 *
 * @param  None
 *
 * @retval None
 */
void LEDclear(void) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	memset(LEDbuffer, ' ', FIELDS);
 80008c8:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <LEDclear+0x24>)
 80008ca:	2204      	movs	r2, #4
 80008cc:	2120      	movs	r1, #32
 80008ce:	0018      	movs	r0, r3
 80008d0:	f001 ff13 	bl	80026fa <memset>
	memset(DOTbuffer, 0, FIELDS);
 80008d4:	4b05      	ldr	r3, [pc, #20]	; (80008ec <LEDclear+0x28>)
 80008d6:	2204      	movs	r2, #4
 80008d8:	2100      	movs	r1, #0
 80008da:	0018      	movs	r0, r3
 80008dc:	f001 ff0d 	bl	80026fa <memset>
}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	2000002c 	.word	0x2000002c
 80008ec:	20000030 	.word	0x20000030

080008f0 <LEDdot>:
 *
 * @param  DOT_ACTIVE or DOT_INACTIVE
 *
 * @retval None
 */
void LEDdot(uint8_t dotNum, uint8_t active) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	0002      	movs	r2, r0
 80008f8:	1dfb      	adds	r3, r7, #7
 80008fa:	701a      	strb	r2, [r3, #0]
 80008fc:	1dbb      	adds	r3, r7, #6
 80008fe:	1c0a      	adds	r2, r1, #0
 8000900:	701a      	strb	r2, [r3, #0]
	if (active == DOT_ACTIVE)
 8000902:	1dbb      	adds	r3, r7, #6
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d105      	bne.n	8000916 <LEDdot+0x26>
		DOTbuffer[dotNum] = 1;
 800090a:	1dfb      	adds	r3, r7, #7
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	4a08      	ldr	r2, [pc, #32]	; (8000930 <LEDdot+0x40>)
 8000910:	2101      	movs	r1, #1
 8000912:	54d1      	strb	r1, [r2, r3]
	else if (active == DOT_INACTIVE)
		DOTbuffer[dotNum] = 0;
}
 8000914:	e008      	b.n	8000928 <LEDdot+0x38>
	else if (active == DOT_INACTIVE)
 8000916:	1dbb      	adds	r3, r7, #6
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d104      	bne.n	8000928 <LEDdot+0x38>
		DOTbuffer[dotNum] = 0;
 800091e:	1dfb      	adds	r3, r7, #7
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	4a03      	ldr	r2, [pc, #12]	; (8000930 <LEDdot+0x40>)
 8000924:	2100      	movs	r1, #0
 8000926:	54d1      	strb	r1, [r2, r3]
}
 8000928:	46c0      	nop			; (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	b002      	add	sp, #8
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000030 	.word	0x20000030

08000934 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800093a:	f000 fa8d 	bl	8000e58 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800093e:	f000 f87d 	bl	8000a3c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000942:	f000 f91f 	bl	8000b84 <MX_GPIO_Init>
	MX_TIM1_Init();
 8000946:	f000 f8c1 	bl	8000acc <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	LEDinit();
 800094a:	f7ff ff4d 	bl	80007e8 <LEDinit>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		LEDchar(0, '-');
 800094e:	212d      	movs	r1, #45	; 0x2d
 8000950:	2000      	movs	r0, #0
 8000952:	f7ff ff51 	bl	80007f8 <LEDchar>
		LEDchar(1, '-');
 8000956:	212d      	movs	r1, #45	; 0x2d
 8000958:	2001      	movs	r0, #1
 800095a:	f7ff ff4d 	bl	80007f8 <LEDchar>
		LEDchar(2, '-');
 800095e:	212d      	movs	r1, #45	; 0x2d
 8000960:	2002      	movs	r0, #2
 8000962:	f7ff ff49 	bl	80007f8 <LEDchar>
		LEDchar(3, '-');
 8000966:	212d      	movs	r1, #45	; 0x2d
 8000968:	2003      	movs	r0, #3
 800096a:	f7ff ff45 	bl	80007f8 <LEDchar>

		HAL_Delay(500);
 800096e:	23fa      	movs	r3, #250	; 0xfa
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	0018      	movs	r0, r3
 8000974:	f000 faf6 	bl	8000f64 <HAL_Delay>
		LEDclear();
 8000978:	f7ff ffa4 	bl	80008c4 <LEDclear>

		LEDchar(0, 'H');
 800097c:	2148      	movs	r1, #72	; 0x48
 800097e:	2000      	movs	r0, #0
 8000980:	f7ff ff3a 	bl	80007f8 <LEDchar>
		LEDchar(1, 'A');
 8000984:	2141      	movs	r1, #65	; 0x41
 8000986:	2001      	movs	r0, #1
 8000988:	f7ff ff36 	bl	80007f8 <LEDchar>
		LEDchar(2, 'L');
 800098c:	214c      	movs	r1, #76	; 0x4c
 800098e:	2002      	movs	r0, #2
 8000990:	f7ff ff32 	bl	80007f8 <LEDchar>

		HAL_Delay(500);
 8000994:	23fa      	movs	r3, #250	; 0xfa
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	0018      	movs	r0, r3
 800099a:	f000 fae3 	bl	8000f64 <HAL_Delay>
		LEDclear();
 800099e:	f7ff ff91 	bl	80008c4 <LEDclear>

		HAL_Delay(500);
 80009a2:	23fa      	movs	r3, #250	; 0xfa
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	0018      	movs	r0, r3
 80009a8:	f000 fadc 	bl	8000f64 <HAL_Delay>
		LEDdot(0, DOT_ACTIVE);
 80009ac:	2101      	movs	r1, #1
 80009ae:	2000      	movs	r0, #0
 80009b0:	f7ff ff9e 	bl	80008f0 <LEDdot>
		HAL_Delay(500);
 80009b4:	23fa      	movs	r3, #250	; 0xfa
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	0018      	movs	r0, r3
 80009ba:	f000 fad3 	bl	8000f64 <HAL_Delay>
		LEDdot(1, DOT_ACTIVE);
 80009be:	2101      	movs	r1, #1
 80009c0:	2001      	movs	r0, #1
 80009c2:	f7ff ff95 	bl	80008f0 <LEDdot>
		HAL_Delay(500);
 80009c6:	23fa      	movs	r3, #250	; 0xfa
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	0018      	movs	r0, r3
 80009cc:	f000 faca 	bl	8000f64 <HAL_Delay>
		LEDdot(2, DOT_ACTIVE);
 80009d0:	2101      	movs	r1, #1
 80009d2:	2002      	movs	r0, #2
 80009d4:	f7ff ff8c 	bl	80008f0 <LEDdot>
		HAL_Delay(500);
 80009d8:	23fa      	movs	r3, #250	; 0xfa
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	0018      	movs	r0, r3
 80009de:	f000 fac1 	bl	8000f64 <HAL_Delay>
		LEDdot(3, DOT_ACTIVE);
 80009e2:	2101      	movs	r1, #1
 80009e4:	2003      	movs	r0, #3
 80009e6:	f7ff ff83 	bl	80008f0 <LEDdot>
		HAL_Delay(500);
 80009ea:	23fa      	movs	r3, #250	; 0xfa
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	0018      	movs	r0, r3
 80009f0:	f000 fab8 	bl	8000f64 <HAL_Delay>

		LEDclear();
 80009f4:	f7ff ff66 	bl	80008c4 <LEDclear>
		HAL_Delay(500);
 80009f8:	23fa      	movs	r3, #250	; 0xfa
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	0018      	movs	r0, r3
 80009fe:	f000 fab1 	bl	8000f64 <HAL_Delay>

		for (uint16_t i = 0; i < 10000; i++) {
 8000a02:	1dbb      	adds	r3, r7, #6
 8000a04:	2200      	movs	r2, #0
 8000a06:	801a      	strh	r2, [r3, #0]
 8000a08:	e00f      	b.n	8000a2a <main+0xf6>
			LEDclear();
 8000a0a:	f7ff ff5b 	bl	80008c4 <LEDclear>
			LEDint(0, i);
 8000a0e:	1dbb      	adds	r3, r7, #6
 8000a10:	881b      	ldrh	r3, [r3, #0]
 8000a12:	0019      	movs	r1, r3
 8000a14:	2000      	movs	r0, #0
 8000a16:	f7ff ff05 	bl	8000824 <LEDint>
			HAL_Delay(20);
 8000a1a:	2014      	movs	r0, #20
 8000a1c:	f000 faa2 	bl	8000f64 <HAL_Delay>
		for (uint16_t i = 0; i < 10000; i++) {
 8000a20:	1dbb      	adds	r3, r7, #6
 8000a22:	881a      	ldrh	r2, [r3, #0]
 8000a24:	1dbb      	adds	r3, r7, #6
 8000a26:	3201      	adds	r2, #1
 8000a28:	801a      	strh	r2, [r3, #0]
 8000a2a:	1dbb      	adds	r3, r7, #6
 8000a2c:	881b      	ldrh	r3, [r3, #0]
 8000a2e:	4a02      	ldr	r2, [pc, #8]	; (8000a38 <main+0x104>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d9ea      	bls.n	8000a0a <main+0xd6>
		LEDchar(0, '-');
 8000a34:	e78b      	b.n	800094e <main+0x1a>
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	0000270f 	.word	0x0000270f

08000a3c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000a3c:	b590      	push	{r4, r7, lr}
 8000a3e:	b093      	sub	sp, #76	; 0x4c
 8000a40:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000a42:	2414      	movs	r4, #20
 8000a44:	193b      	adds	r3, r7, r4
 8000a46:	0018      	movs	r0, r3
 8000a48:	2334      	movs	r3, #52	; 0x34
 8000a4a:	001a      	movs	r2, r3
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	f001 fe54 	bl	80026fa <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	0018      	movs	r0, r3
 8000a56:	2310      	movs	r3, #16
 8000a58:	001a      	movs	r2, r3
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	f001 fe4d 	bl	80026fa <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a60:	2380      	movs	r3, #128	; 0x80
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	0018      	movs	r0, r3
 8000a66:	f000 fd17 	bl	8001498 <HAL_PWREx_ControlVoltageScaling>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a6a:	193b      	adds	r3, r7, r4
 8000a6c:	2202      	movs	r2, #2
 8000a6e:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a70:	193b      	adds	r3, r7, r4
 8000a72:	2280      	movs	r2, #128	; 0x80
 8000a74:	0052      	lsls	r2, r2, #1
 8000a76:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000a78:	193b      	adds	r3, r7, r4
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a7e:	193b      	adds	r3, r7, r4
 8000a80:	2240      	movs	r2, #64	; 0x40
 8000a82:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a84:	193b      	adds	r3, r7, r4
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a8a:	193b      	adds	r3, r7, r4
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f000 fd43 	bl	8001518 <HAL_RCC_OscConfig>
 8000a92:	1e03      	subs	r3, r0, #0
 8000a94:	d001      	beq.n	8000a9a <SystemClock_Config+0x5e>
		Error_Handler();
 8000a96:	f000 f921 	bl	8000cdc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	2207      	movs	r2, #7
 8000a9e:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f001 f844 	bl	8001b44 <HAL_RCC_ClockConfig>
 8000abc:	1e03      	subs	r3, r0, #0
 8000abe:	d001      	beq.n	8000ac4 <SystemClock_Config+0x88>
		Error_Handler();
 8000ac0:	f000 f90c 	bl	8000cdc <Error_Handler>
	}
}
 8000ac4:	46c0      	nop			; (mov r8, r8)
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	b013      	add	sp, #76	; 0x4c
 8000aca:	bd90      	pop	{r4, r7, pc}

08000acc <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b088      	sub	sp, #32
 8000ad0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000ad2:	2310      	movs	r3, #16
 8000ad4:	18fb      	adds	r3, r7, r3
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	2310      	movs	r3, #16
 8000ada:	001a      	movs	r2, r3
 8000adc:	2100      	movs	r1, #0
 8000ade:	f001 fe0c 	bl	80026fa <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	230c      	movs	r3, #12
 8000ae8:	001a      	movs	r2, r3
 8000aea:	2100      	movs	r1, #0
 8000aec:	f001 fe05 	bl	80026fa <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <MX_TIM1_Init+0xac>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <MX_TIM1_Init+0xb0>)
 8000af4:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 40;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <MX_TIM1_Init+0xac>)
 8000af8:	2228      	movs	r2, #40	; 0x28
 8000afa:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <MX_TIM1_Init+0xac>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1999;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <MX_TIM1_Init+0xac>)
 8000b04:	4a1e      	ldr	r2, [pc, #120]	; (8000b80 <MX_TIM1_Init+0xb4>)
 8000b06:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <MX_TIM1_Init+0xac>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <MX_TIM1_Init+0xac>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b14:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <MX_TIM1_Init+0xac>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000b1a:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <MX_TIM1_Init+0xac>)
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f001 f99b 	bl	8001e58 <HAL_TIM_Base_Init>
 8000b22:	1e03      	subs	r3, r0, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM1_Init+0x5e>
		Error_Handler();
 8000b26:	f000 f8d9 	bl	8000cdc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b2a:	2110      	movs	r1, #16
 8000b2c:	187b      	adds	r3, r7, r1
 8000b2e:	2280      	movs	r2, #128	; 0x80
 8000b30:	0152      	lsls	r2, r2, #5
 8000b32:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000b34:	187a      	adds	r2, r7, r1
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <MX_TIM1_Init+0xac>)
 8000b38:	0011      	movs	r1, r2
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f001 fb16 	bl	800216c <HAL_TIM_ConfigClockSource>
 8000b40:	1e03      	subs	r3, r0, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM1_Init+0x7c>
		Error_Handler();
 8000b44:	f000 f8ca 	bl	8000cdc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	2200      	movs	r2, #0
 8000b52:	605a      	str	r2, [r3, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000b5a:	1d3a      	adds	r2, r7, #4
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MX_TIM1_Init+0xac>)
 8000b5e:	0011      	movs	r1, r2
 8000b60:	0018      	movs	r0, r3
 8000b62:	f001 fd01 	bl	8002568 <HAL_TIMEx_MasterConfigSynchronization>
 8000b66:	1e03      	subs	r3, r0, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM1_Init+0xa2>
			!= HAL_OK) {
		Error_Handler();
 8000b6a:	f000 f8b7 	bl	8000cdc <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	46bd      	mov	sp, r7
 8000b72:	b008      	add	sp, #32
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	20000034 	.word	0x20000034
 8000b7c:	40012c00 	.word	0x40012c00
 8000b80:	000007cf 	.word	0x000007cf

08000b84 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b84:	b590      	push	{r4, r7, lr}
 8000b86:	b089      	sub	sp, #36	; 0x24
 8000b88:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b8a:	240c      	movs	r4, #12
 8000b8c:	193b      	adds	r3, r7, r4
 8000b8e:	0018      	movs	r0, r3
 8000b90:	2314      	movs	r3, #20
 8000b92:	001a      	movs	r2, r3
 8000b94:	2100      	movs	r1, #0
 8000b96:	f001 fdb0 	bl	80026fa <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	4b44      	ldr	r3, [pc, #272]	; (8000cac <MX_GPIO_Init+0x128>)
 8000b9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b9e:	4b43      	ldr	r3, [pc, #268]	; (8000cac <MX_GPIO_Init+0x128>)
 8000ba0:	2102      	movs	r1, #2
 8000ba2:	430a      	orrs	r2, r1
 8000ba4:	635a      	str	r2, [r3, #52]	; 0x34
 8000ba6:	4b41      	ldr	r3, [pc, #260]	; (8000cac <MX_GPIO_Init+0x128>)
 8000ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000baa:	2202      	movs	r2, #2
 8000bac:	4013      	ands	r3, r2
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	4b3e      	ldr	r3, [pc, #248]	; (8000cac <MX_GPIO_Init+0x128>)
 8000bb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bb6:	4b3d      	ldr	r3, [pc, #244]	; (8000cac <MX_GPIO_Init+0x128>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	635a      	str	r2, [r3, #52]	; 0x34
 8000bbe:	4b3b      	ldr	r3, [pc, #236]	; (8000cac <MX_GPIO_Init+0x128>)
 8000bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000bca:	4b38      	ldr	r3, [pc, #224]	; (8000cac <MX_GPIO_Init+0x128>)
 8000bcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bce:	4b37      	ldr	r3, [pc, #220]	; (8000cac <MX_GPIO_Init+0x128>)
 8000bd0:	2104      	movs	r1, #4
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	635a      	str	r2, [r3, #52]	; 0x34
 8000bd6:	4b35      	ldr	r3, [pc, #212]	; (8000cac <MX_GPIO_Init+0x128>)
 8000bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bda:	2204      	movs	r2, #4
 8000bdc:	4013      	ands	r3, r2
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8000be2:	23b7      	movs	r3, #183	; 0xb7
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	4832      	ldr	r0, [pc, #200]	; (8000cb0 <MX_GPIO_Init+0x12c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	0019      	movs	r1, r3
 8000bec:	f000 fc36 	bl	800145c <HAL_GPIO_WritePin>
			LED_GREEN_Pin | DISP_SEG_A_Pin | DISP_FIELD_2_Pin | DISP_FIELD_3_Pin
					| DISP_SEG_DOT_Pin | DISP_FIELD_0_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8000bf0:	239f      	movs	r3, #159	; 0x9f
 8000bf2:	0219      	lsls	r1, r3, #8
 8000bf4:	23a0      	movs	r3, #160	; 0xa0
 8000bf6:	05db      	lsls	r3, r3, #23
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f000 fc2e 	bl	800145c <HAL_GPIO_WritePin>
			DISP_SEG_B_Pin | DISP_SEG_C_Pin | DISP_SEG_E_Pin | DISP_SEG_F_Pin
					| DISP_SEG_G_Pin | DISP_FIELD_1_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DISP_SEG_D_GPIO_Port, DISP_SEG_D_Pin, GPIO_PIN_RESET);
 8000c00:	4b2c      	ldr	r3, [pc, #176]	; (8000cb4 <MX_GPIO_Init+0x130>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	2140      	movs	r1, #64	; 0x40
 8000c06:	0018      	movs	r0, r3
 8000c08:	f000 fc28 	bl	800145c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LED_GREEN_Pin DISP_SEG_A_Pin DISP_FIELD_2_Pin DISP_FIELD_3_Pin
	 DISP_SEG_DOT_Pin DISP_FIELD_0_Pin */
	GPIO_InitStruct.Pin = LED_GREEN_Pin | DISP_SEG_A_Pin | DISP_FIELD_2_Pin
 8000c0c:	193b      	adds	r3, r7, r4
 8000c0e:	22b7      	movs	r2, #183	; 0xb7
 8000c10:	0092      	lsls	r2, r2, #2
 8000c12:	601a      	str	r2, [r3, #0]
			| DISP_FIELD_3_Pin | DISP_SEG_DOT_Pin | DISP_FIELD_0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c14:	193b      	adds	r3, r7, r4
 8000c16:	2201      	movs	r2, #1
 8000c18:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	193b      	adds	r3, r7, r4
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	193b      	adds	r3, r7, r4
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c26:	193b      	adds	r3, r7, r4
 8000c28:	4a21      	ldr	r2, [pc, #132]	; (8000cb0 <MX_GPIO_Init+0x12c>)
 8000c2a:	0019      	movs	r1, r3
 8000c2c:	0010      	movs	r0, r2
 8000c2e:	f000 fab1 	bl	8001194 <HAL_GPIO_Init>

	/*Configure GPIO pin : BUTTON_Pin */
	GPIO_InitStruct.Pin = BUTTON_Pin;
 8000c32:	193b      	adds	r3, r7, r4
 8000c34:	2210      	movs	r2, #16
 8000c36:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c38:	193b      	adds	r3, r7, r4
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c3e:	193b      	adds	r3, r7, r4
 8000c40:	2201      	movs	r2, #1
 8000c42:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000c44:	193a      	adds	r2, r7, r4
 8000c46:	23a0      	movs	r3, #160	; 0xa0
 8000c48:	05db      	lsls	r3, r3, #23
 8000c4a:	0011      	movs	r1, r2
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f000 faa1 	bl	8001194 <HAL_GPIO_Init>

	/*Configure GPIO pins : DISP_SEG_B_Pin DISP_SEG_C_Pin DISP_SEG_E_Pin DISP_SEG_F_Pin
	 DISP_SEG_G_Pin DISP_FIELD_1_Pin */
	GPIO_InitStruct.Pin = DISP_SEG_B_Pin | DISP_SEG_C_Pin | DISP_SEG_E_Pin
 8000c52:	0021      	movs	r1, r4
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	229f      	movs	r2, #159	; 0x9f
 8000c58:	0212      	lsls	r2, r2, #8
 8000c5a:	601a      	str	r2, [r3, #0]
			| DISP_SEG_F_Pin | DISP_SEG_G_Pin | DISP_FIELD_1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5c:	000c      	movs	r4, r1
 8000c5e:	193b      	adds	r3, r7, r4
 8000c60:	2201      	movs	r2, #1
 8000c62:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	193b      	adds	r3, r7, r4
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	193b      	adds	r3, r7, r4
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c70:	193a      	adds	r2, r7, r4
 8000c72:	23a0      	movs	r3, #160	; 0xa0
 8000c74:	05db      	lsls	r3, r3, #23
 8000c76:	0011      	movs	r1, r2
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f000 fa8b 	bl	8001194 <HAL_GPIO_Init>

	/*Configure GPIO pin : DISP_SEG_D_Pin */
	GPIO_InitStruct.Pin = DISP_SEG_D_Pin;
 8000c7e:	0021      	movs	r1, r4
 8000c80:	187b      	adds	r3, r7, r1
 8000c82:	2240      	movs	r2, #64	; 0x40
 8000c84:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	187b      	adds	r3, r7, r1
 8000c88:	2201      	movs	r2, #1
 8000c8a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	187b      	adds	r3, r7, r1
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	187b      	adds	r3, r7, r1
 8000c94:	2200      	movs	r2, #0
 8000c96:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(DISP_SEG_D_GPIO_Port, &GPIO_InitStruct);
 8000c98:	187b      	adds	r3, r7, r1
 8000c9a:	4a06      	ldr	r2, [pc, #24]	; (8000cb4 <MX_GPIO_Init+0x130>)
 8000c9c:	0019      	movs	r1, r3
 8000c9e:	0010      	movs	r0, r2
 8000ca0:	f000 fa78 	bl	8001194 <HAL_GPIO_Init>

}
 8000ca4:	46c0      	nop			; (mov r8, r8)
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	b009      	add	sp, #36	; 0x24
 8000caa:	bd90      	pop	{r4, r7, pc}
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	50000400 	.word	0x50000400
 8000cb4:	50000800 	.word	0x50000800

08000cb8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM1) {
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d101      	bne.n	8000cce <HAL_TIM_PeriodElapsedCallback+0x16>
		_LEDmuliplexing();
 8000cca:	f7ff faa5 	bl	8000218 <_LEDmuliplexing>
	}

}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	b002      	add	sp, #8
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	40012c00 	.word	0x40012c00

08000cdc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce0:	b672      	cpsid	i
}
 8000ce2:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ce4:	e7fe      	b.n	8000ce4 <Error_Handler+0x8>
	...

08000ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cee:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <HAL_MspInit+0x4c>)
 8000cf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cf2:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <HAL_MspInit+0x4c>)
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	641a      	str	r2, [r3, #64]	; 0x40
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <HAL_MspInit+0x4c>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4013      	ands	r3, r2
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d06:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <HAL_MspInit+0x4c>)
 8000d08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <HAL_MspInit+0x4c>)
 8000d0c:	2180      	movs	r1, #128	; 0x80
 8000d0e:	0549      	lsls	r1, r1, #21
 8000d10:	430a      	orrs	r2, r1
 8000d12:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d14:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <HAL_MspInit+0x4c>)
 8000d16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d18:	2380      	movs	r3, #128	; 0x80
 8000d1a:	055b      	lsls	r3, r3, #21
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	603b      	str	r3, [r7, #0]
 8000d20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000d22:	23c0      	movs	r3, #192	; 0xc0
 8000d24:	00db      	lsls	r3, r3, #3
 8000d26:	0018      	movs	r0, r3
 8000d28:	f000 f940 	bl	8000fac <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2c:	46c0      	nop			; (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b002      	add	sp, #8
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40021000 	.word	0x40021000

08000d38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a12      	ldr	r2, [pc, #72]	; (8000d90 <HAL_TIM_Base_MspInit+0x58>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d11d      	bne.n	8000d86 <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d4a:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <HAL_TIM_Base_MspInit+0x5c>)
 8000d4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d4e:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <HAL_TIM_Base_MspInit+0x5c>)
 8000d50:	2180      	movs	r1, #128	; 0x80
 8000d52:	0109      	lsls	r1, r1, #4
 8000d54:	430a      	orrs	r2, r1
 8000d56:	641a      	str	r2, [r3, #64]	; 0x40
 8000d58:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <HAL_TIM_Base_MspInit+0x5c>)
 8000d5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d5c:	2380      	movs	r3, #128	; 0x80
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	4013      	ands	r3, r2
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2100      	movs	r1, #0
 8000d6a:	200d      	movs	r0, #13
 8000d6c:	f000 f9e0 	bl	8001130 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000d70:	200d      	movs	r0, #13
 8000d72:	f000 f9f2 	bl	800115a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2100      	movs	r1, #0
 8000d7a:	200e      	movs	r0, #14
 8000d7c:	f000 f9d8 	bl	8001130 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000d80:	200e      	movs	r0, #14
 8000d82:	f000 f9ea 	bl	800115a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	b004      	add	sp, #16
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	40012c00 	.word	0x40012c00
 8000d94:	40021000 	.word	0x40021000

08000d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <NMI_Handler+0x4>

08000d9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <HardFault_Handler+0x4>

08000da4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000da8:	46c0      	nop			; (mov r8, r8)
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dbc:	f000 f8b6 	bl	8000f2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc0:	46c0      	nop			; (mov r8, r8)
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000dcc:	4b03      	ldr	r3, [pc, #12]	; (8000ddc <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f001 f89a 	bl	8001f08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000dd4:	46c0      	nop			; (mov r8, r8)
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	20000034 	.word	0x20000034

08000de0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <TIM1_CC_IRQHandler+0x14>)
 8000de6:	0018      	movs	r0, r3
 8000de8:	f001 f88e 	bl	8001f08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000dec:	46c0      	nop			; (mov r8, r8)
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	20000034 	.word	0x20000034

08000df8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dfc:	46c0      	nop			; (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e04:	480d      	ldr	r0, [pc, #52]	; (8000e3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e06:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e08:	f7ff fff6 	bl	8000df8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e0c:	480c      	ldr	r0, [pc, #48]	; (8000e40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e0e:	490d      	ldr	r1, [pc, #52]	; (8000e44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e10:	4a0d      	ldr	r2, [pc, #52]	; (8000e48 <LoopForever+0xe>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e14:	e002      	b.n	8000e1c <LoopCopyDataInit>

08000e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1a:	3304      	adds	r3, #4

08000e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e20:	d3f9      	bcc.n	8000e16 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e22:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e24:	4c0a      	ldr	r4, [pc, #40]	; (8000e50 <LoopForever+0x16>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e28:	e001      	b.n	8000e2e <LoopFillZerobss>

08000e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e2c:	3204      	adds	r2, #4

08000e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e30:	d3fb      	bcc.n	8000e2a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e32:	f001 fc19 	bl	8002668 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e36:	f7ff fd7d 	bl	8000934 <main>

08000e3a <LoopForever>:

LoopForever:
  b LoopForever
 8000e3a:	e7fe      	b.n	8000e3a <LoopForever>
  ldr   r0, =_estack
 8000e3c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e44:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e48:	08002800 	.word	0x08002800
  ldr r2, =_sbss
 8000e4c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e50:	20000084 	.word	0x20000084

08000e54 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e54:	e7fe      	b.n	8000e54 <ADC1_IRQHandler>
	...

08000e58 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e5e:	1dfb      	adds	r3, r7, #7
 8000e60:	2200      	movs	r2, #0
 8000e62:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e64:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <HAL_Init+0x3c>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <HAL_Init+0x3c>)
 8000e6a:	2180      	movs	r1, #128	; 0x80
 8000e6c:	0049      	lsls	r1, r1, #1
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e72:	2003      	movs	r0, #3
 8000e74:	f000 f810 	bl	8000e98 <HAL_InitTick>
 8000e78:	1e03      	subs	r3, r0, #0
 8000e7a:	d003      	beq.n	8000e84 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000e7c:	1dfb      	adds	r3, r7, #7
 8000e7e:	2201      	movs	r2, #1
 8000e80:	701a      	strb	r2, [r3, #0]
 8000e82:	e001      	b.n	8000e88 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000e84:	f7ff ff30 	bl	8000ce8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e88:	1dfb      	adds	r3, r7, #7
 8000e8a:	781b      	ldrb	r3, [r3, #0]
}
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	b002      	add	sp, #8
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40022000 	.word	0x40022000

08000e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e98:	b590      	push	{r4, r7, lr}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ea0:	230f      	movs	r3, #15
 8000ea2:	18fb      	adds	r3, r7, r3
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <HAL_InitTick+0x88>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d02b      	beq.n	8000f08 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000eb0:	4b1c      	ldr	r3, [pc, #112]	; (8000f24 <HAL_InitTick+0x8c>)
 8000eb2:	681c      	ldr	r4, [r3, #0]
 8000eb4:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <HAL_InitTick+0x88>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	0019      	movs	r1, r3
 8000eba:	23fa      	movs	r3, #250	; 0xfa
 8000ebc:	0098      	lsls	r0, r3, #2
 8000ebe:	f7ff f91f 	bl	8000100 <__udivsi3>
 8000ec2:	0003      	movs	r3, r0
 8000ec4:	0019      	movs	r1, r3
 8000ec6:	0020      	movs	r0, r4
 8000ec8:	f7ff f91a 	bl	8000100 <__udivsi3>
 8000ecc:	0003      	movs	r3, r0
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f000 f953 	bl	800117a <HAL_SYSTICK_Config>
 8000ed4:	1e03      	subs	r3, r0, #0
 8000ed6:	d112      	bne.n	8000efe <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b03      	cmp	r3, #3
 8000edc:	d80a      	bhi.n	8000ef4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	425b      	negs	r3, r3
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f000 f922 	bl	8001130 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eec:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <HAL_InitTick+0x90>)
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	e00d      	b.n	8000f10 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ef4:	230f      	movs	r3, #15
 8000ef6:	18fb      	adds	r3, r7, r3
 8000ef8:	2201      	movs	r2, #1
 8000efa:	701a      	strb	r2, [r3, #0]
 8000efc:	e008      	b.n	8000f10 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000efe:	230f      	movs	r3, #15
 8000f00:	18fb      	adds	r3, r7, r3
 8000f02:	2201      	movs	r2, #1
 8000f04:	701a      	strb	r2, [r3, #0]
 8000f06:	e003      	b.n	8000f10 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f08:	230f      	movs	r3, #15
 8000f0a:	18fb      	adds	r3, r7, r3
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f10:	230f      	movs	r3, #15
 8000f12:	18fb      	adds	r3, r7, r3
 8000f14:	781b      	ldrb	r3, [r3, #0]
}
 8000f16:	0018      	movs	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b005      	add	sp, #20
 8000f1c:	bd90      	pop	{r4, r7, pc}
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	20000008 	.word	0x20000008
 8000f24:	20000000 	.word	0x20000000
 8000f28:	20000004 	.word	0x20000004

08000f2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <HAL_IncTick+0x1c>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	001a      	movs	r2, r3
 8000f36:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <HAL_IncTick+0x20>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	18d2      	adds	r2, r2, r3
 8000f3c:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <HAL_IncTick+0x20>)
 8000f3e:	601a      	str	r2, [r3, #0]
}
 8000f40:	46c0      	nop			; (mov r8, r8)
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	20000080 	.word	0x20000080

08000f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  return uwTick;
 8000f54:	4b02      	ldr	r3, [pc, #8]	; (8000f60 <HAL_GetTick+0x10>)
 8000f56:	681b      	ldr	r3, [r3, #0]
}
 8000f58:	0018      	movs	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	20000080 	.word	0x20000080

08000f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f6c:	f7ff fff0 	bl	8000f50 <HAL_GetTick>
 8000f70:	0003      	movs	r3, r0
 8000f72:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	d005      	beq.n	8000f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <HAL_Delay+0x44>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	001a      	movs	r2, r3
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	189b      	adds	r3, r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	f7ff ffe0 	bl	8000f50 <HAL_GetTick>
 8000f90:	0002      	movs	r2, r0
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d8f7      	bhi.n	8000f8c <HAL_Delay+0x28>
  {
  }
}
 8000f9c:	46c0      	nop			; (mov r8, r8)
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	b004      	add	sp, #16
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	20000008 	.word	0x20000008

08000fac <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a06      	ldr	r2, [pc, #24]	; (8000fd4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000fba:	4013      	ands	r3, r2
 8000fbc:	0019      	movs	r1, r3
 8000fbe:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	601a      	str	r2, [r3, #0]
}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	b002      	add	sp, #8
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	40010000 	.word	0x40010000
 8000fd4:	fffff9ff 	.word	0xfffff9ff

08000fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	0002      	movs	r2, r0
 8000fe0:	1dfb      	adds	r3, r7, #7
 8000fe2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fe4:	1dfb      	adds	r3, r7, #7
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b7f      	cmp	r3, #127	; 0x7f
 8000fea:	d809      	bhi.n	8001000 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fec:	1dfb      	adds	r3, r7, #7
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	001a      	movs	r2, r3
 8000ff2:	231f      	movs	r3, #31
 8000ff4:	401a      	ands	r2, r3
 8000ff6:	4b04      	ldr	r3, [pc, #16]	; (8001008 <__NVIC_EnableIRQ+0x30>)
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	4091      	lsls	r1, r2
 8000ffc:	000a      	movs	r2, r1
 8000ffe:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001000:	46c0      	nop			; (mov r8, r8)
 8001002:	46bd      	mov	sp, r7
 8001004:	b002      	add	sp, #8
 8001006:	bd80      	pop	{r7, pc}
 8001008:	e000e100 	.word	0xe000e100

0800100c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	0002      	movs	r2, r0
 8001014:	6039      	str	r1, [r7, #0]
 8001016:	1dfb      	adds	r3, r7, #7
 8001018:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800101a:	1dfb      	adds	r3, r7, #7
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b7f      	cmp	r3, #127	; 0x7f
 8001020:	d828      	bhi.n	8001074 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001022:	4a2f      	ldr	r2, [pc, #188]	; (80010e0 <__NVIC_SetPriority+0xd4>)
 8001024:	1dfb      	adds	r3, r7, #7
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	b25b      	sxtb	r3, r3
 800102a:	089b      	lsrs	r3, r3, #2
 800102c:	33c0      	adds	r3, #192	; 0xc0
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	589b      	ldr	r3, [r3, r2]
 8001032:	1dfa      	adds	r2, r7, #7
 8001034:	7812      	ldrb	r2, [r2, #0]
 8001036:	0011      	movs	r1, r2
 8001038:	2203      	movs	r2, #3
 800103a:	400a      	ands	r2, r1
 800103c:	00d2      	lsls	r2, r2, #3
 800103e:	21ff      	movs	r1, #255	; 0xff
 8001040:	4091      	lsls	r1, r2
 8001042:	000a      	movs	r2, r1
 8001044:	43d2      	mvns	r2, r2
 8001046:	401a      	ands	r2, r3
 8001048:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	019b      	lsls	r3, r3, #6
 800104e:	22ff      	movs	r2, #255	; 0xff
 8001050:	401a      	ands	r2, r3
 8001052:	1dfb      	adds	r3, r7, #7
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	0018      	movs	r0, r3
 8001058:	2303      	movs	r3, #3
 800105a:	4003      	ands	r3, r0
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001060:	481f      	ldr	r0, [pc, #124]	; (80010e0 <__NVIC_SetPriority+0xd4>)
 8001062:	1dfb      	adds	r3, r7, #7
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	b25b      	sxtb	r3, r3
 8001068:	089b      	lsrs	r3, r3, #2
 800106a:	430a      	orrs	r2, r1
 800106c:	33c0      	adds	r3, #192	; 0xc0
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001072:	e031      	b.n	80010d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001074:	4a1b      	ldr	r2, [pc, #108]	; (80010e4 <__NVIC_SetPriority+0xd8>)
 8001076:	1dfb      	adds	r3, r7, #7
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	0019      	movs	r1, r3
 800107c:	230f      	movs	r3, #15
 800107e:	400b      	ands	r3, r1
 8001080:	3b08      	subs	r3, #8
 8001082:	089b      	lsrs	r3, r3, #2
 8001084:	3306      	adds	r3, #6
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	18d3      	adds	r3, r2, r3
 800108a:	3304      	adds	r3, #4
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	1dfa      	adds	r2, r7, #7
 8001090:	7812      	ldrb	r2, [r2, #0]
 8001092:	0011      	movs	r1, r2
 8001094:	2203      	movs	r2, #3
 8001096:	400a      	ands	r2, r1
 8001098:	00d2      	lsls	r2, r2, #3
 800109a:	21ff      	movs	r1, #255	; 0xff
 800109c:	4091      	lsls	r1, r2
 800109e:	000a      	movs	r2, r1
 80010a0:	43d2      	mvns	r2, r2
 80010a2:	401a      	ands	r2, r3
 80010a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	019b      	lsls	r3, r3, #6
 80010aa:	22ff      	movs	r2, #255	; 0xff
 80010ac:	401a      	ands	r2, r3
 80010ae:	1dfb      	adds	r3, r7, #7
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	0018      	movs	r0, r3
 80010b4:	2303      	movs	r3, #3
 80010b6:	4003      	ands	r3, r0
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010bc:	4809      	ldr	r0, [pc, #36]	; (80010e4 <__NVIC_SetPriority+0xd8>)
 80010be:	1dfb      	adds	r3, r7, #7
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	001c      	movs	r4, r3
 80010c4:	230f      	movs	r3, #15
 80010c6:	4023      	ands	r3, r4
 80010c8:	3b08      	subs	r3, #8
 80010ca:	089b      	lsrs	r3, r3, #2
 80010cc:	430a      	orrs	r2, r1
 80010ce:	3306      	adds	r3, #6
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	18c3      	adds	r3, r0, r3
 80010d4:	3304      	adds	r3, #4
 80010d6:	601a      	str	r2, [r3, #0]
}
 80010d8:	46c0      	nop			; (mov r8, r8)
 80010da:	46bd      	mov	sp, r7
 80010dc:	b003      	add	sp, #12
 80010de:	bd90      	pop	{r4, r7, pc}
 80010e0:	e000e100 	.word	0xe000e100
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	1e5a      	subs	r2, r3, #1
 80010f4:	2380      	movs	r3, #128	; 0x80
 80010f6:	045b      	lsls	r3, r3, #17
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d301      	bcc.n	8001100 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010fc:	2301      	movs	r3, #1
 80010fe:	e010      	b.n	8001122 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001100:	4b0a      	ldr	r3, [pc, #40]	; (800112c <SysTick_Config+0x44>)
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	3a01      	subs	r2, #1
 8001106:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001108:	2301      	movs	r3, #1
 800110a:	425b      	negs	r3, r3
 800110c:	2103      	movs	r1, #3
 800110e:	0018      	movs	r0, r3
 8001110:	f7ff ff7c 	bl	800100c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <SysTick_Config+0x44>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800111a:	4b04      	ldr	r3, [pc, #16]	; (800112c <SysTick_Config+0x44>)
 800111c:	2207      	movs	r2, #7
 800111e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001120:	2300      	movs	r3, #0
}
 8001122:	0018      	movs	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	b002      	add	sp, #8
 8001128:	bd80      	pop	{r7, pc}
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	e000e010 	.word	0xe000e010

08001130 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	60b9      	str	r1, [r7, #8]
 8001138:	607a      	str	r2, [r7, #4]
 800113a:	210f      	movs	r1, #15
 800113c:	187b      	adds	r3, r7, r1
 800113e:	1c02      	adds	r2, r0, #0
 8001140:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	187b      	adds	r3, r7, r1
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	b25b      	sxtb	r3, r3
 800114a:	0011      	movs	r1, r2
 800114c:	0018      	movs	r0, r3
 800114e:	f7ff ff5d 	bl	800100c <__NVIC_SetPriority>
}
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	46bd      	mov	sp, r7
 8001156:	b004      	add	sp, #16
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	0002      	movs	r2, r0
 8001162:	1dfb      	adds	r3, r7, #7
 8001164:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001166:	1dfb      	adds	r3, r7, #7
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	b25b      	sxtb	r3, r3
 800116c:	0018      	movs	r0, r3
 800116e:	f7ff ff33 	bl	8000fd8 <__NVIC_EnableIRQ>
}
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	46bd      	mov	sp, r7
 8001176:	b002      	add	sp, #8
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	0018      	movs	r0, r3
 8001186:	f7ff ffaf 	bl	80010e8 <SysTick_Config>
 800118a:	0003      	movs	r3, r0
}
 800118c:	0018      	movs	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	b002      	add	sp, #8
 8001192:	bd80      	pop	{r7, pc}

08001194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011a2:	e147      	b.n	8001434 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2101      	movs	r1, #1
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	4091      	lsls	r1, r2
 80011ae:	000a      	movs	r2, r1
 80011b0:	4013      	ands	r3, r2
 80011b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d100      	bne.n	80011bc <HAL_GPIO_Init+0x28>
 80011ba:	e138      	b.n	800142e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2203      	movs	r2, #3
 80011c2:	4013      	ands	r3, r2
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d005      	beq.n	80011d4 <HAL_GPIO_Init+0x40>
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	2203      	movs	r2, #3
 80011ce:	4013      	ands	r3, r2
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d130      	bne.n	8001236 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	2203      	movs	r2, #3
 80011e0:	409a      	lsls	r2, r3
 80011e2:	0013      	movs	r3, r2
 80011e4:	43da      	mvns	r2, r3
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	68da      	ldr	r2, [r3, #12]
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	409a      	lsls	r2, r3
 80011f6:	0013      	movs	r3, r2
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800120a:	2201      	movs	r2, #1
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	409a      	lsls	r2, r3
 8001210:	0013      	movs	r3, r2
 8001212:	43da      	mvns	r2, r3
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4013      	ands	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	091b      	lsrs	r3, r3, #4
 8001220:	2201      	movs	r2, #1
 8001222:	401a      	ands	r2, r3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	409a      	lsls	r2, r3
 8001228:	0013      	movs	r3, r2
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2203      	movs	r2, #3
 800123c:	4013      	ands	r3, r2
 800123e:	2b03      	cmp	r3, #3
 8001240:	d017      	beq.n	8001272 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	2203      	movs	r2, #3
 800124e:	409a      	lsls	r2, r3
 8001250:	0013      	movs	r3, r2
 8001252:	43da      	mvns	r2, r3
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	4013      	ands	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	689a      	ldr	r2, [r3, #8]
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	409a      	lsls	r2, r3
 8001264:	0013      	movs	r3, r2
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2203      	movs	r2, #3
 8001278:	4013      	ands	r3, r2
 800127a:	2b02      	cmp	r3, #2
 800127c:	d123      	bne.n	80012c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	08da      	lsrs	r2, r3, #3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3208      	adds	r2, #8
 8001286:	0092      	lsls	r2, r2, #2
 8001288:	58d3      	ldr	r3, [r2, r3]
 800128a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	2207      	movs	r2, #7
 8001290:	4013      	ands	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	220f      	movs	r2, #15
 8001296:	409a      	lsls	r2, r3
 8001298:	0013      	movs	r3, r2
 800129a:	43da      	mvns	r2, r3
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	4013      	ands	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	691a      	ldr	r2, [r3, #16]
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	2107      	movs	r1, #7
 80012aa:	400b      	ands	r3, r1
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	409a      	lsls	r2, r3
 80012b0:	0013      	movs	r3, r2
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	08da      	lsrs	r2, r3, #3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3208      	adds	r2, #8
 80012c0:	0092      	lsls	r2, r2, #2
 80012c2:	6939      	ldr	r1, [r7, #16]
 80012c4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	2203      	movs	r2, #3
 80012d2:	409a      	lsls	r2, r3
 80012d4:	0013      	movs	r3, r2
 80012d6:	43da      	mvns	r2, r3
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2203      	movs	r2, #3
 80012e4:	401a      	ands	r2, r3
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	409a      	lsls	r2, r3
 80012ec:	0013      	movs	r3, r2
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	23c0      	movs	r3, #192	; 0xc0
 8001300:	029b      	lsls	r3, r3, #10
 8001302:	4013      	ands	r3, r2
 8001304:	d100      	bne.n	8001308 <HAL_GPIO_Init+0x174>
 8001306:	e092      	b.n	800142e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001308:	4a50      	ldr	r2, [pc, #320]	; (800144c <HAL_GPIO_Init+0x2b8>)
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	089b      	lsrs	r3, r3, #2
 800130e:	3318      	adds	r3, #24
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	589b      	ldr	r3, [r3, r2]
 8001314:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	2203      	movs	r2, #3
 800131a:	4013      	ands	r3, r2
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	220f      	movs	r2, #15
 8001320:	409a      	lsls	r2, r3
 8001322:	0013      	movs	r3, r2
 8001324:	43da      	mvns	r2, r3
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	4013      	ands	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	23a0      	movs	r3, #160	; 0xa0
 8001330:	05db      	lsls	r3, r3, #23
 8001332:	429a      	cmp	r2, r3
 8001334:	d013      	beq.n	800135e <HAL_GPIO_Init+0x1ca>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a45      	ldr	r2, [pc, #276]	; (8001450 <HAL_GPIO_Init+0x2bc>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d00d      	beq.n	800135a <HAL_GPIO_Init+0x1c6>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a44      	ldr	r2, [pc, #272]	; (8001454 <HAL_GPIO_Init+0x2c0>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d007      	beq.n	8001356 <HAL_GPIO_Init+0x1c2>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a43      	ldr	r2, [pc, #268]	; (8001458 <HAL_GPIO_Init+0x2c4>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d101      	bne.n	8001352 <HAL_GPIO_Init+0x1be>
 800134e:	2303      	movs	r3, #3
 8001350:	e006      	b.n	8001360 <HAL_GPIO_Init+0x1cc>
 8001352:	2305      	movs	r3, #5
 8001354:	e004      	b.n	8001360 <HAL_GPIO_Init+0x1cc>
 8001356:	2302      	movs	r3, #2
 8001358:	e002      	b.n	8001360 <HAL_GPIO_Init+0x1cc>
 800135a:	2301      	movs	r3, #1
 800135c:	e000      	b.n	8001360 <HAL_GPIO_Init+0x1cc>
 800135e:	2300      	movs	r3, #0
 8001360:	697a      	ldr	r2, [r7, #20]
 8001362:	2103      	movs	r1, #3
 8001364:	400a      	ands	r2, r1
 8001366:	00d2      	lsls	r2, r2, #3
 8001368:	4093      	lsls	r3, r2
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001370:	4936      	ldr	r1, [pc, #216]	; (800144c <HAL_GPIO_Init+0x2b8>)
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	089b      	lsrs	r3, r3, #2
 8001376:	3318      	adds	r3, #24
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800137e:	4a33      	ldr	r2, [pc, #204]	; (800144c <HAL_GPIO_Init+0x2b8>)
 8001380:	2380      	movs	r3, #128	; 0x80
 8001382:	58d3      	ldr	r3, [r2, r3]
 8001384:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	43da      	mvns	r2, r3
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	4013      	ands	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	2380      	movs	r3, #128	; 0x80
 8001396:	025b      	lsls	r3, r3, #9
 8001398:	4013      	ands	r3, r2
 800139a:	d003      	beq.n	80013a4 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013a4:	4929      	ldr	r1, [pc, #164]	; (800144c <HAL_GPIO_Init+0x2b8>)
 80013a6:	2280      	movs	r2, #128	; 0x80
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80013ac:	4a27      	ldr	r2, [pc, #156]	; (800144c <HAL_GPIO_Init+0x2b8>)
 80013ae:	2384      	movs	r3, #132	; 0x84
 80013b0:	58d3      	ldr	r3, [r2, r3]
 80013b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	43da      	mvns	r2, r3
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	4013      	ands	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	2380      	movs	r3, #128	; 0x80
 80013c4:	029b      	lsls	r3, r3, #10
 80013c6:	4013      	ands	r3, r2
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013d2:	491e      	ldr	r1, [pc, #120]	; (800144c <HAL_GPIO_Init+0x2b8>)
 80013d4:	2284      	movs	r2, #132	; 0x84
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013da:	4b1c      	ldr	r3, [pc, #112]	; (800144c <HAL_GPIO_Init+0x2b8>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	43da      	mvns	r2, r3
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	4013      	ands	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685a      	ldr	r2, [r3, #4]
 80013ee:	2380      	movs	r3, #128	; 0x80
 80013f0:	035b      	lsls	r3, r3, #13
 80013f2:	4013      	ands	r3, r2
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013fe:	4b13      	ldr	r3, [pc, #76]	; (800144c <HAL_GPIO_Init+0x2b8>)
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001404:	4b11      	ldr	r3, [pc, #68]	; (800144c <HAL_GPIO_Init+0x2b8>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	43da      	mvns	r2, r3
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	4013      	ands	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	2380      	movs	r3, #128	; 0x80
 800141a:	039b      	lsls	r3, r3, #14
 800141c:	4013      	ands	r3, r2
 800141e:	d003      	beq.n	8001428 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	4313      	orrs	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001428:	4b08      	ldr	r3, [pc, #32]	; (800144c <HAL_GPIO_Init+0x2b8>)
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	3301      	adds	r3, #1
 8001432:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	40da      	lsrs	r2, r3
 800143c:	1e13      	subs	r3, r2, #0
 800143e:	d000      	beq.n	8001442 <HAL_GPIO_Init+0x2ae>
 8001440:	e6b0      	b.n	80011a4 <HAL_GPIO_Init+0x10>
  }
}
 8001442:	46c0      	nop			; (mov r8, r8)
 8001444:	46c0      	nop			; (mov r8, r8)
 8001446:	46bd      	mov	sp, r7
 8001448:	b006      	add	sp, #24
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40021800 	.word	0x40021800
 8001450:	50000400 	.word	0x50000400
 8001454:	50000800 	.word	0x50000800
 8001458:	50000c00 	.word	0x50000c00

0800145c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	0008      	movs	r0, r1
 8001466:	0011      	movs	r1, r2
 8001468:	1cbb      	adds	r3, r7, #2
 800146a:	1c02      	adds	r2, r0, #0
 800146c:	801a      	strh	r2, [r3, #0]
 800146e:	1c7b      	adds	r3, r7, #1
 8001470:	1c0a      	adds	r2, r1, #0
 8001472:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001474:	1c7b      	adds	r3, r7, #1
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d004      	beq.n	8001486 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800147c:	1cbb      	adds	r3, r7, #2
 800147e:	881a      	ldrh	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001484:	e003      	b.n	800148e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001486:	1cbb      	adds	r3, r7, #2
 8001488:	881a      	ldrh	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800148e:	46c0      	nop			; (mov r8, r8)
 8001490:	46bd      	mov	sp, r7
 8001492:	b002      	add	sp, #8
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80014a0:	4b19      	ldr	r3, [pc, #100]	; (8001508 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a19      	ldr	r2, [pc, #100]	; (800150c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80014a6:	4013      	ands	r3, r2
 80014a8:	0019      	movs	r1, r3
 80014aa:	4b17      	ldr	r3, [pc, #92]	; (8001508 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	2380      	movs	r3, #128	; 0x80
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d11f      	bne.n	80014fc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80014bc:	4b14      	ldr	r3, [pc, #80]	; (8001510 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	0013      	movs	r3, r2
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	189b      	adds	r3, r3, r2
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	4912      	ldr	r1, [pc, #72]	; (8001514 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80014ca:	0018      	movs	r0, r3
 80014cc:	f7fe fe18 	bl	8000100 <__udivsi3>
 80014d0:	0003      	movs	r3, r0
 80014d2:	3301      	adds	r3, #1
 80014d4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014d6:	e008      	b.n	80014ea <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	3b01      	subs	r3, #1
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	e001      	b.n	80014ea <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e009      	b.n	80014fe <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014ea:	4b07      	ldr	r3, [pc, #28]	; (8001508 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80014ec:	695a      	ldr	r2, [r3, #20]
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	401a      	ands	r2, r3
 80014f4:	2380      	movs	r3, #128	; 0x80
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d0ed      	beq.n	80014d8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	0018      	movs	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	b004      	add	sp, #16
 8001504:	bd80      	pop	{r7, pc}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	40007000 	.word	0x40007000
 800150c:	fffff9ff 	.word	0xfffff9ff
 8001510:	20000000 	.word	0x20000000
 8001514:	000f4240 	.word	0x000f4240

08001518 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b088      	sub	sp, #32
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e2f9      	b.n	8001b1e <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2201      	movs	r2, #1
 8001530:	4013      	ands	r3, r2
 8001532:	d100      	bne.n	8001536 <HAL_RCC_OscConfig+0x1e>
 8001534:	e07c      	b.n	8001630 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001536:	4bc3      	ldr	r3, [pc, #780]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2238      	movs	r2, #56	; 0x38
 800153c:	4013      	ands	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001540:	4bc0      	ldr	r3, [pc, #768]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	2203      	movs	r2, #3
 8001546:	4013      	ands	r3, r2
 8001548:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	2b10      	cmp	r3, #16
 800154e:	d102      	bne.n	8001556 <HAL_RCC_OscConfig+0x3e>
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	2b03      	cmp	r3, #3
 8001554:	d002      	beq.n	800155c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	2b08      	cmp	r3, #8
 800155a:	d10b      	bne.n	8001574 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800155c:	4bb9      	ldr	r3, [pc, #740]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	2380      	movs	r3, #128	; 0x80
 8001562:	029b      	lsls	r3, r3, #10
 8001564:	4013      	ands	r3, r2
 8001566:	d062      	beq.n	800162e <HAL_RCC_OscConfig+0x116>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d15e      	bne.n	800162e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e2d4      	b.n	8001b1e <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	025b      	lsls	r3, r3, #9
 800157c:	429a      	cmp	r2, r3
 800157e:	d107      	bne.n	8001590 <HAL_RCC_OscConfig+0x78>
 8001580:	4bb0      	ldr	r3, [pc, #704]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4baf      	ldr	r3, [pc, #700]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 8001586:	2180      	movs	r1, #128	; 0x80
 8001588:	0249      	lsls	r1, r1, #9
 800158a:	430a      	orrs	r2, r1
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	e020      	b.n	80015d2 <HAL_RCC_OscConfig+0xba>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	23a0      	movs	r3, #160	; 0xa0
 8001596:	02db      	lsls	r3, r3, #11
 8001598:	429a      	cmp	r2, r3
 800159a:	d10e      	bne.n	80015ba <HAL_RCC_OscConfig+0xa2>
 800159c:	4ba9      	ldr	r3, [pc, #676]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4ba8      	ldr	r3, [pc, #672]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 80015a2:	2180      	movs	r1, #128	; 0x80
 80015a4:	02c9      	lsls	r1, r1, #11
 80015a6:	430a      	orrs	r2, r1
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	4ba6      	ldr	r3, [pc, #664]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	4ba5      	ldr	r3, [pc, #660]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 80015b0:	2180      	movs	r1, #128	; 0x80
 80015b2:	0249      	lsls	r1, r1, #9
 80015b4:	430a      	orrs	r2, r1
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	e00b      	b.n	80015d2 <HAL_RCC_OscConfig+0xba>
 80015ba:	4ba2      	ldr	r3, [pc, #648]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	4ba1      	ldr	r3, [pc, #644]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 80015c0:	49a1      	ldr	r1, [pc, #644]	; (8001848 <HAL_RCC_OscConfig+0x330>)
 80015c2:	400a      	ands	r2, r1
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	4b9f      	ldr	r3, [pc, #636]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	4b9e      	ldr	r3, [pc, #632]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 80015cc:	499f      	ldr	r1, [pc, #636]	; (800184c <HAL_RCC_OscConfig+0x334>)
 80015ce:	400a      	ands	r2, r1
 80015d0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d014      	beq.n	8001604 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015da:	f7ff fcb9 	bl	8000f50 <HAL_GetTick>
 80015de:	0003      	movs	r3, r0
 80015e0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e4:	f7ff fcb4 	bl	8000f50 <HAL_GetTick>
 80015e8:	0002      	movs	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b64      	cmp	r3, #100	; 0x64
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e293      	b.n	8001b1e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015f6:	4b93      	ldr	r3, [pc, #588]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	2380      	movs	r3, #128	; 0x80
 80015fc:	029b      	lsls	r3, r3, #10
 80015fe:	4013      	ands	r3, r2
 8001600:	d0f0      	beq.n	80015e4 <HAL_RCC_OscConfig+0xcc>
 8001602:	e015      	b.n	8001630 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001604:	f7ff fca4 	bl	8000f50 <HAL_GetTick>
 8001608:	0003      	movs	r3, r0
 800160a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800160e:	f7ff fc9f 	bl	8000f50 <HAL_GetTick>
 8001612:	0002      	movs	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b64      	cmp	r3, #100	; 0x64
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e27e      	b.n	8001b1e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001620:	4b88      	ldr	r3, [pc, #544]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	2380      	movs	r3, #128	; 0x80
 8001626:	029b      	lsls	r3, r3, #10
 8001628:	4013      	ands	r3, r2
 800162a:	d1f0      	bne.n	800160e <HAL_RCC_OscConfig+0xf6>
 800162c:	e000      	b.n	8001630 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800162e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2202      	movs	r2, #2
 8001636:	4013      	ands	r3, r2
 8001638:	d100      	bne.n	800163c <HAL_RCC_OscConfig+0x124>
 800163a:	e099      	b.n	8001770 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800163c:	4b81      	ldr	r3, [pc, #516]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	2238      	movs	r2, #56	; 0x38
 8001642:	4013      	ands	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001646:	4b7f      	ldr	r3, [pc, #508]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	2203      	movs	r2, #3
 800164c:	4013      	ands	r3, r2
 800164e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	2b10      	cmp	r3, #16
 8001654:	d102      	bne.n	800165c <HAL_RCC_OscConfig+0x144>
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	2b02      	cmp	r3, #2
 800165a:	d002      	beq.n	8001662 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d135      	bne.n	80016ce <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001662:	4b78      	ldr	r3, [pc, #480]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	2380      	movs	r3, #128	; 0x80
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	4013      	ands	r3, r2
 800166c:	d005      	beq.n	800167a <HAL_RCC_OscConfig+0x162>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e251      	b.n	8001b1e <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800167a:	4b72      	ldr	r3, [pc, #456]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	4a74      	ldr	r2, [pc, #464]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 8001680:	4013      	ands	r3, r2
 8001682:	0019      	movs	r1, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	695b      	ldr	r3, [r3, #20]
 8001688:	021a      	lsls	r2, r3, #8
 800168a:	4b6e      	ldr	r3, [pc, #440]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 800168c:	430a      	orrs	r2, r1
 800168e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d112      	bne.n	80016bc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001696:	4b6b      	ldr	r3, [pc, #428]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a6e      	ldr	r2, [pc, #440]	; (8001854 <HAL_RCC_OscConfig+0x33c>)
 800169c:	4013      	ands	r3, r2
 800169e:	0019      	movs	r1, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	691a      	ldr	r2, [r3, #16]
 80016a4:	4b67      	ldr	r3, [pc, #412]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 80016a6:	430a      	orrs	r2, r1
 80016a8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80016aa:	4b66      	ldr	r3, [pc, #408]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	0adb      	lsrs	r3, r3, #11
 80016b0:	2207      	movs	r2, #7
 80016b2:	4013      	ands	r3, r2
 80016b4:	4a68      	ldr	r2, [pc, #416]	; (8001858 <HAL_RCC_OscConfig+0x340>)
 80016b6:	40da      	lsrs	r2, r3
 80016b8:	4b68      	ldr	r3, [pc, #416]	; (800185c <HAL_RCC_OscConfig+0x344>)
 80016ba:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80016bc:	4b68      	ldr	r3, [pc, #416]	; (8001860 <HAL_RCC_OscConfig+0x348>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	0018      	movs	r0, r3
 80016c2:	f7ff fbe9 	bl	8000e98 <HAL_InitTick>
 80016c6:	1e03      	subs	r3, r0, #0
 80016c8:	d051      	beq.n	800176e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e227      	b.n	8001b1e <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d030      	beq.n	8001738 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80016d6:	4b5b      	ldr	r3, [pc, #364]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a5e      	ldr	r2, [pc, #376]	; (8001854 <HAL_RCC_OscConfig+0x33c>)
 80016dc:	4013      	ands	r3, r2
 80016de:	0019      	movs	r1, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	691a      	ldr	r2, [r3, #16]
 80016e4:	4b57      	ldr	r3, [pc, #348]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 80016e6:	430a      	orrs	r2, r1
 80016e8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80016ea:	4b56      	ldr	r3, [pc, #344]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	4b55      	ldr	r3, [pc, #340]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 80016f0:	2180      	movs	r1, #128	; 0x80
 80016f2:	0049      	lsls	r1, r1, #1
 80016f4:	430a      	orrs	r2, r1
 80016f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f8:	f7ff fc2a 	bl	8000f50 <HAL_GetTick>
 80016fc:	0003      	movs	r3, r0
 80016fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001702:	f7ff fc25 	bl	8000f50 <HAL_GetTick>
 8001706:	0002      	movs	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e204      	b.n	8001b1e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001714:	4b4b      	ldr	r3, [pc, #300]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	2380      	movs	r3, #128	; 0x80
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	4013      	ands	r3, r2
 800171e:	d0f0      	beq.n	8001702 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001720:	4b48      	ldr	r3, [pc, #288]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	4a4a      	ldr	r2, [pc, #296]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 8001726:	4013      	ands	r3, r2
 8001728:	0019      	movs	r1, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	021a      	lsls	r2, r3, #8
 8001730:	4b44      	ldr	r3, [pc, #272]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 8001732:	430a      	orrs	r2, r1
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	e01b      	b.n	8001770 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001738:	4b42      	ldr	r3, [pc, #264]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	4b41      	ldr	r3, [pc, #260]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 800173e:	4949      	ldr	r1, [pc, #292]	; (8001864 <HAL_RCC_OscConfig+0x34c>)
 8001740:	400a      	ands	r2, r1
 8001742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001744:	f7ff fc04 	bl	8000f50 <HAL_GetTick>
 8001748:	0003      	movs	r3, r0
 800174a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800174e:	f7ff fbff 	bl	8000f50 <HAL_GetTick>
 8001752:	0002      	movs	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e1de      	b.n	8001b1e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001760:	4b38      	ldr	r3, [pc, #224]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	4013      	ands	r3, r2
 800176a:	d1f0      	bne.n	800174e <HAL_RCC_OscConfig+0x236>
 800176c:	e000      	b.n	8001770 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800176e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2208      	movs	r2, #8
 8001776:	4013      	ands	r3, r2
 8001778:	d047      	beq.n	800180a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800177a:	4b32      	ldr	r3, [pc, #200]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	2238      	movs	r2, #56	; 0x38
 8001780:	4013      	ands	r3, r2
 8001782:	2b18      	cmp	r3, #24
 8001784:	d10a      	bne.n	800179c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001786:	4b2f      	ldr	r3, [pc, #188]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 8001788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800178a:	2202      	movs	r2, #2
 800178c:	4013      	ands	r3, r2
 800178e:	d03c      	beq.n	800180a <HAL_RCC_OscConfig+0x2f2>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d138      	bne.n	800180a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e1c0      	b.n	8001b1e <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d019      	beq.n	80017d8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80017a4:	4b27      	ldr	r3, [pc, #156]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 80017a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017a8:	4b26      	ldr	r3, [pc, #152]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 80017aa:	2101      	movs	r1, #1
 80017ac:	430a      	orrs	r2, r1
 80017ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b0:	f7ff fbce 	bl	8000f50 <HAL_GetTick>
 80017b4:	0003      	movs	r3, r0
 80017b6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ba:	f7ff fbc9 	bl	8000f50 <HAL_GetTick>
 80017be:	0002      	movs	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e1a8      	b.n	8001b1e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017cc:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 80017ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017d0:	2202      	movs	r2, #2
 80017d2:	4013      	ands	r3, r2
 80017d4:	d0f1      	beq.n	80017ba <HAL_RCC_OscConfig+0x2a2>
 80017d6:	e018      	b.n	800180a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80017d8:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 80017da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017dc:	4b19      	ldr	r3, [pc, #100]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 80017de:	2101      	movs	r1, #1
 80017e0:	438a      	bics	r2, r1
 80017e2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e4:	f7ff fbb4 	bl	8000f50 <HAL_GetTick>
 80017e8:	0003      	movs	r3, r0
 80017ea:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ee:	f7ff fbaf 	bl	8000f50 <HAL_GetTick>
 80017f2:	0002      	movs	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e18e      	b.n	8001b1e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001800:	4b10      	ldr	r3, [pc, #64]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 8001802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001804:	2202      	movs	r2, #2
 8001806:	4013      	ands	r3, r2
 8001808:	d1f1      	bne.n	80017ee <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2204      	movs	r2, #4
 8001810:	4013      	ands	r3, r2
 8001812:	d100      	bne.n	8001816 <HAL_RCC_OscConfig+0x2fe>
 8001814:	e0c6      	b.n	80019a4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001816:	231f      	movs	r3, #31
 8001818:	18fb      	adds	r3, r7, r3
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	2238      	movs	r2, #56	; 0x38
 8001824:	4013      	ands	r3, r2
 8001826:	2b20      	cmp	r3, #32
 8001828:	d11e      	bne.n	8001868 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_RCC_OscConfig+0x32c>)
 800182c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182e:	2202      	movs	r2, #2
 8001830:	4013      	ands	r3, r2
 8001832:	d100      	bne.n	8001836 <HAL_RCC_OscConfig+0x31e>
 8001834:	e0b6      	b.n	80019a4 <HAL_RCC_OscConfig+0x48c>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d000      	beq.n	8001840 <HAL_RCC_OscConfig+0x328>
 800183e:	e0b1      	b.n	80019a4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e16c      	b.n	8001b1e <HAL_RCC_OscConfig+0x606>
 8001844:	40021000 	.word	0x40021000
 8001848:	fffeffff 	.word	0xfffeffff
 800184c:	fffbffff 	.word	0xfffbffff
 8001850:	ffff80ff 	.word	0xffff80ff
 8001854:	ffffc7ff 	.word	0xffffc7ff
 8001858:	00f42400 	.word	0x00f42400
 800185c:	20000000 	.word	0x20000000
 8001860:	20000004 	.word	0x20000004
 8001864:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001868:	4baf      	ldr	r3, [pc, #700]	; (8001b28 <HAL_RCC_OscConfig+0x610>)
 800186a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800186c:	2380      	movs	r3, #128	; 0x80
 800186e:	055b      	lsls	r3, r3, #21
 8001870:	4013      	ands	r3, r2
 8001872:	d101      	bne.n	8001878 <HAL_RCC_OscConfig+0x360>
 8001874:	2301      	movs	r3, #1
 8001876:	e000      	b.n	800187a <HAL_RCC_OscConfig+0x362>
 8001878:	2300      	movs	r3, #0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d011      	beq.n	80018a2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800187e:	4baa      	ldr	r3, [pc, #680]	; (8001b28 <HAL_RCC_OscConfig+0x610>)
 8001880:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001882:	4ba9      	ldr	r3, [pc, #676]	; (8001b28 <HAL_RCC_OscConfig+0x610>)
 8001884:	2180      	movs	r1, #128	; 0x80
 8001886:	0549      	lsls	r1, r1, #21
 8001888:	430a      	orrs	r2, r1
 800188a:	63da      	str	r2, [r3, #60]	; 0x3c
 800188c:	4ba6      	ldr	r3, [pc, #664]	; (8001b28 <HAL_RCC_OscConfig+0x610>)
 800188e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001890:	2380      	movs	r3, #128	; 0x80
 8001892:	055b      	lsls	r3, r3, #21
 8001894:	4013      	ands	r3, r2
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800189a:	231f      	movs	r3, #31
 800189c:	18fb      	adds	r3, r7, r3
 800189e:	2201      	movs	r2, #1
 80018a0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018a2:	4ba2      	ldr	r3, [pc, #648]	; (8001b2c <HAL_RCC_OscConfig+0x614>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	2380      	movs	r3, #128	; 0x80
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4013      	ands	r3, r2
 80018ac:	d11a      	bne.n	80018e4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018ae:	4b9f      	ldr	r3, [pc, #636]	; (8001b2c <HAL_RCC_OscConfig+0x614>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	4b9e      	ldr	r3, [pc, #632]	; (8001b2c <HAL_RCC_OscConfig+0x614>)
 80018b4:	2180      	movs	r1, #128	; 0x80
 80018b6:	0049      	lsls	r1, r1, #1
 80018b8:	430a      	orrs	r2, r1
 80018ba:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80018bc:	f7ff fb48 	bl	8000f50 <HAL_GetTick>
 80018c0:	0003      	movs	r3, r0
 80018c2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c6:	f7ff fb43 	bl	8000f50 <HAL_GetTick>
 80018ca:	0002      	movs	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e122      	b.n	8001b1e <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018d8:	4b94      	ldr	r3, [pc, #592]	; (8001b2c <HAL_RCC_OscConfig+0x614>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	4013      	ands	r3, r2
 80018e2:	d0f0      	beq.n	80018c6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d106      	bne.n	80018fa <HAL_RCC_OscConfig+0x3e2>
 80018ec:	4b8e      	ldr	r3, [pc, #568]	; (8001b28 <HAL_RCC_OscConfig+0x610>)
 80018ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018f0:	4b8d      	ldr	r3, [pc, #564]	; (8001b28 <HAL_RCC_OscConfig+0x610>)
 80018f2:	2101      	movs	r1, #1
 80018f4:	430a      	orrs	r2, r1
 80018f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80018f8:	e01c      	b.n	8001934 <HAL_RCC_OscConfig+0x41c>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	2b05      	cmp	r3, #5
 8001900:	d10c      	bne.n	800191c <HAL_RCC_OscConfig+0x404>
 8001902:	4b89      	ldr	r3, [pc, #548]	; (8001b28 <HAL_RCC_OscConfig+0x610>)
 8001904:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001906:	4b88      	ldr	r3, [pc, #544]	; (8001b28 <HAL_RCC_OscConfig+0x610>)
 8001908:	2104      	movs	r1, #4
 800190a:	430a      	orrs	r2, r1
 800190c:	65da      	str	r2, [r3, #92]	; 0x5c
 800190e:	4b86      	ldr	r3, [pc, #536]	; (8001b28 <HAL_RCC_OscConfig+0x610>)
 8001910:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001912:	4b85      	ldr	r3, [pc, #532]	; (8001b28 <HAL_RCC_OscConfig+0x610>)
 8001914:	2101      	movs	r1, #1
 8001916:	430a      	orrs	r2, r1
 8001918:	65da      	str	r2, [r3, #92]	; 0x5c
 800191a:	e00b      	b.n	8001934 <HAL_RCC_OscConfig+0x41c>
 800191c:	4b82      	ldr	r3, [pc, #520]	; (8001b28 <HAL_RCC_OscConfig+0x610>)
 800191e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001920:	4b81      	ldr	r3, [pc, #516]	; (8001b28 <HAL_RCC_OscConfig+0x610>)
 8001922:	2101      	movs	r1, #1
 8001924:	438a      	bics	r2, r1
 8001926:	65da      	str	r2, [r3, #92]	; 0x5c
 8001928:	4b7f      	ldr	r3, [pc, #508]	; (8001b28 <HAL_RCC_OscConfig+0x610>)
 800192a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800192c:	4b7e      	ldr	r3, [pc, #504]	; (8001b28 <HAL_RCC_OscConfig+0x610>)
 800192e:	2104      	movs	r1, #4
 8001930:	438a      	bics	r2, r1
 8001932:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d014      	beq.n	8001966 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193c:	f7ff fb08 	bl	8000f50 <HAL_GetTick>
 8001940:	0003      	movs	r3, r0
 8001942:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001944:	e009      	b.n	800195a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001946:	f7ff fb03 	bl	8000f50 <HAL_GetTick>
 800194a:	0002      	movs	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	4a77      	ldr	r2, [pc, #476]	; (8001b30 <HAL_RCC_OscConfig+0x618>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e0e1      	b.n	8001b1e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800195a:	4b73      	ldr	r3, [pc, #460]	; (8001b28 <HAL_RCC_OscConfig+0x610>)
 800195c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800195e:	2202      	movs	r2, #2
 8001960:	4013      	ands	r3, r2
 8001962:	d0f0      	beq.n	8001946 <HAL_RCC_OscConfig+0x42e>
 8001964:	e013      	b.n	800198e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001966:	f7ff faf3 	bl	8000f50 <HAL_GetTick>
 800196a:	0003      	movs	r3, r0
 800196c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800196e:	e009      	b.n	8001984 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001970:	f7ff faee 	bl	8000f50 <HAL_GetTick>
 8001974:	0002      	movs	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	4a6d      	ldr	r2, [pc, #436]	; (8001b30 <HAL_RCC_OscConfig+0x618>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e0cc      	b.n	8001b1e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001984:	4b68      	ldr	r3, [pc, #416]	; (8001b28 <HAL_RCC_OscConfig+0x610>)
 8001986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001988:	2202      	movs	r2, #2
 800198a:	4013      	ands	r3, r2
 800198c:	d1f0      	bne.n	8001970 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800198e:	231f      	movs	r3, #31
 8001990:	18fb      	adds	r3, r7, r3
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d105      	bne.n	80019a4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001998:	4b63      	ldr	r3, [pc, #396]	; (8001b28 <HAL_RCC_OscConfig+0x610>)
 800199a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800199c:	4b62      	ldr	r3, [pc, #392]	; (8001b28 <HAL_RCC_OscConfig+0x610>)
 800199e:	4965      	ldr	r1, [pc, #404]	; (8001b34 <HAL_RCC_OscConfig+0x61c>)
 80019a0:	400a      	ands	r2, r1
 80019a2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	69db      	ldr	r3, [r3, #28]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d100      	bne.n	80019ae <HAL_RCC_OscConfig+0x496>
 80019ac:	e0b6      	b.n	8001b1c <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019ae:	4b5e      	ldr	r3, [pc, #376]	; (8001b28 <HAL_RCC_OscConfig+0x610>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	2238      	movs	r2, #56	; 0x38
 80019b4:	4013      	ands	r3, r2
 80019b6:	2b10      	cmp	r3, #16
 80019b8:	d100      	bne.n	80019bc <HAL_RCC_OscConfig+0x4a4>
 80019ba:	e07e      	b.n	8001aba <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69db      	ldr	r3, [r3, #28]
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d153      	bne.n	8001a6c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c4:	4b58      	ldr	r3, [pc, #352]	; (8001b28 <HAL_RCC_OscConfig+0x610>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b57      	ldr	r3, [pc, #348]	; (8001b28 <HAL_RCC_OscConfig+0x610>)
 80019ca:	495b      	ldr	r1, [pc, #364]	; (8001b38 <HAL_RCC_OscConfig+0x620>)
 80019cc:	400a      	ands	r2, r1
 80019ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d0:	f7ff fabe 	bl	8000f50 <HAL_GetTick>
 80019d4:	0003      	movs	r3, r0
 80019d6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019da:	f7ff fab9 	bl	8000f50 <HAL_GetTick>
 80019de:	0002      	movs	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e098      	b.n	8001b1e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019ec:	4b4e      	ldr	r3, [pc, #312]	; (8001b28 <HAL_RCC_OscConfig+0x610>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	2380      	movs	r3, #128	; 0x80
 80019f2:	049b      	lsls	r3, r3, #18
 80019f4:	4013      	ands	r3, r2
 80019f6:	d1f0      	bne.n	80019da <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019f8:	4b4b      	ldr	r3, [pc, #300]	; (8001b28 <HAL_RCC_OscConfig+0x610>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	4a4f      	ldr	r2, [pc, #316]	; (8001b3c <HAL_RCC_OscConfig+0x624>)
 80019fe:	4013      	ands	r3, r2
 8001a00:	0019      	movs	r1, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a1a      	ldr	r2, [r3, #32]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a10:	021b      	lsls	r3, r3, #8
 8001a12:	431a      	orrs	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a18:	431a      	orrs	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	4b41      	ldr	r3, [pc, #260]	; (8001b28 <HAL_RCC_OscConfig+0x610>)
 8001a22:	430a      	orrs	r2, r1
 8001a24:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a26:	4b40      	ldr	r3, [pc, #256]	; (8001b28 <HAL_RCC_OscConfig+0x610>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	4b3f      	ldr	r3, [pc, #252]	; (8001b28 <HAL_RCC_OscConfig+0x610>)
 8001a2c:	2180      	movs	r1, #128	; 0x80
 8001a2e:	0449      	lsls	r1, r1, #17
 8001a30:	430a      	orrs	r2, r1
 8001a32:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001a34:	4b3c      	ldr	r3, [pc, #240]	; (8001b28 <HAL_RCC_OscConfig+0x610>)
 8001a36:	68da      	ldr	r2, [r3, #12]
 8001a38:	4b3b      	ldr	r3, [pc, #236]	; (8001b28 <HAL_RCC_OscConfig+0x610>)
 8001a3a:	2180      	movs	r1, #128	; 0x80
 8001a3c:	0549      	lsls	r1, r1, #21
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a42:	f7ff fa85 	bl	8000f50 <HAL_GetTick>
 8001a46:	0003      	movs	r3, r0
 8001a48:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4c:	f7ff fa80 	bl	8000f50 <HAL_GetTick>
 8001a50:	0002      	movs	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e05f      	b.n	8001b1e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a5e:	4b32      	ldr	r3, [pc, #200]	; (8001b28 <HAL_RCC_OscConfig+0x610>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	2380      	movs	r3, #128	; 0x80
 8001a64:	049b      	lsls	r3, r3, #18
 8001a66:	4013      	ands	r3, r2
 8001a68:	d0f0      	beq.n	8001a4c <HAL_RCC_OscConfig+0x534>
 8001a6a:	e057      	b.n	8001b1c <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a6c:	4b2e      	ldr	r3, [pc, #184]	; (8001b28 <HAL_RCC_OscConfig+0x610>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b2d      	ldr	r3, [pc, #180]	; (8001b28 <HAL_RCC_OscConfig+0x610>)
 8001a72:	4931      	ldr	r1, [pc, #196]	; (8001b38 <HAL_RCC_OscConfig+0x620>)
 8001a74:	400a      	ands	r2, r1
 8001a76:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001a78:	4b2b      	ldr	r3, [pc, #172]	; (8001b28 <HAL_RCC_OscConfig+0x610>)
 8001a7a:	68da      	ldr	r2, [r3, #12]
 8001a7c:	4b2a      	ldr	r3, [pc, #168]	; (8001b28 <HAL_RCC_OscConfig+0x610>)
 8001a7e:	2103      	movs	r1, #3
 8001a80:	438a      	bics	r2, r1
 8001a82:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001a84:	4b28      	ldr	r3, [pc, #160]	; (8001b28 <HAL_RCC_OscConfig+0x610>)
 8001a86:	68da      	ldr	r2, [r3, #12]
 8001a88:	4b27      	ldr	r3, [pc, #156]	; (8001b28 <HAL_RCC_OscConfig+0x610>)
 8001a8a:	492d      	ldr	r1, [pc, #180]	; (8001b40 <HAL_RCC_OscConfig+0x628>)
 8001a8c:	400a      	ands	r2, r1
 8001a8e:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a90:	f7ff fa5e 	bl	8000f50 <HAL_GetTick>
 8001a94:	0003      	movs	r3, r0
 8001a96:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9a:	f7ff fa59 	bl	8000f50 <HAL_GetTick>
 8001a9e:	0002      	movs	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e038      	b.n	8001b1e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aac:	4b1e      	ldr	r3, [pc, #120]	; (8001b28 <HAL_RCC_OscConfig+0x610>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	2380      	movs	r3, #128	; 0x80
 8001ab2:	049b      	lsls	r3, r3, #18
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d1f0      	bne.n	8001a9a <HAL_RCC_OscConfig+0x582>
 8001ab8:	e030      	b.n	8001b1c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d101      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e02b      	b.n	8001b1e <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001ac6:	4b18      	ldr	r3, [pc, #96]	; (8001b28 <HAL_RCC_OscConfig+0x610>)
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	2203      	movs	r2, #3
 8001ad0:	401a      	ands	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d11e      	bne.n	8001b18 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	2270      	movs	r2, #112	; 0x70
 8001ade:	401a      	ands	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d117      	bne.n	8001b18 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	23fe      	movs	r3, #254	; 0xfe
 8001aec:	01db      	lsls	r3, r3, #7
 8001aee:	401a      	ands	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d10e      	bne.n	8001b18 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	23f8      	movs	r3, #248	; 0xf8
 8001afe:	039b      	lsls	r3, r3, #14
 8001b00:	401a      	ands	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d106      	bne.n	8001b18 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	0f5b      	lsrs	r3, r3, #29
 8001b0e:	075a      	lsls	r2, r3, #29
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d001      	beq.n	8001b1c <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e000      	b.n	8001b1e <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	0018      	movs	r0, r3
 8001b20:	46bd      	mov	sp, r7
 8001b22:	b008      	add	sp, #32
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	46c0      	nop			; (mov r8, r8)
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40007000 	.word	0x40007000
 8001b30:	00001388 	.word	0x00001388
 8001b34:	efffffff 	.word	0xefffffff
 8001b38:	feffffff 	.word	0xfeffffff
 8001b3c:	1fc1808c 	.word	0x1fc1808c
 8001b40:	effeffff 	.word	0xeffeffff

08001b44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e0e9      	b.n	8001d2c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b58:	4b76      	ldr	r3, [pc, #472]	; (8001d34 <HAL_RCC_ClockConfig+0x1f0>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2207      	movs	r2, #7
 8001b5e:	4013      	ands	r3, r2
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d91e      	bls.n	8001ba4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b66:	4b73      	ldr	r3, [pc, #460]	; (8001d34 <HAL_RCC_ClockConfig+0x1f0>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2207      	movs	r2, #7
 8001b6c:	4393      	bics	r3, r2
 8001b6e:	0019      	movs	r1, r3
 8001b70:	4b70      	ldr	r3, [pc, #448]	; (8001d34 <HAL_RCC_ClockConfig+0x1f0>)
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	430a      	orrs	r2, r1
 8001b76:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b78:	f7ff f9ea 	bl	8000f50 <HAL_GetTick>
 8001b7c:	0003      	movs	r3, r0
 8001b7e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b80:	e009      	b.n	8001b96 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b82:	f7ff f9e5 	bl	8000f50 <HAL_GetTick>
 8001b86:	0002      	movs	r2, r0
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	4a6a      	ldr	r2, [pc, #424]	; (8001d38 <HAL_RCC_ClockConfig+0x1f4>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e0ca      	b.n	8001d2c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b96:	4b67      	ldr	r3, [pc, #412]	; (8001d34 <HAL_RCC_ClockConfig+0x1f0>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2207      	movs	r2, #7
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d1ee      	bne.n	8001b82 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2202      	movs	r2, #2
 8001baa:	4013      	ands	r3, r2
 8001bac:	d015      	beq.n	8001bda <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2204      	movs	r2, #4
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d006      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001bb8:	4b60      	ldr	r3, [pc, #384]	; (8001d3c <HAL_RCC_ClockConfig+0x1f8>)
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	4b5f      	ldr	r3, [pc, #380]	; (8001d3c <HAL_RCC_ClockConfig+0x1f8>)
 8001bbe:	21e0      	movs	r1, #224	; 0xe0
 8001bc0:	01c9      	lsls	r1, r1, #7
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc6:	4b5d      	ldr	r3, [pc, #372]	; (8001d3c <HAL_RCC_ClockConfig+0x1f8>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	4a5d      	ldr	r2, [pc, #372]	; (8001d40 <HAL_RCC_ClockConfig+0x1fc>)
 8001bcc:	4013      	ands	r3, r2
 8001bce:	0019      	movs	r1, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	4b59      	ldr	r3, [pc, #356]	; (8001d3c <HAL_RCC_ClockConfig+0x1f8>)
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2201      	movs	r2, #1
 8001be0:	4013      	ands	r3, r2
 8001be2:	d057      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d107      	bne.n	8001bfc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bec:	4b53      	ldr	r3, [pc, #332]	; (8001d3c <HAL_RCC_ClockConfig+0x1f8>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	2380      	movs	r3, #128	; 0x80
 8001bf2:	029b      	lsls	r3, r3, #10
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d12b      	bne.n	8001c50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e097      	b.n	8001d2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d107      	bne.n	8001c14 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c04:	4b4d      	ldr	r3, [pc, #308]	; (8001d3c <HAL_RCC_ClockConfig+0x1f8>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	2380      	movs	r3, #128	; 0x80
 8001c0a:	049b      	lsls	r3, r3, #18
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d11f      	bne.n	8001c50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e08b      	b.n	8001d2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d107      	bne.n	8001c2c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c1c:	4b47      	ldr	r3, [pc, #284]	; (8001d3c <HAL_RCC_ClockConfig+0x1f8>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	2380      	movs	r3, #128	; 0x80
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	4013      	ands	r3, r2
 8001c26:	d113      	bne.n	8001c50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e07f      	b.n	8001d2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	d106      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c34:	4b41      	ldr	r3, [pc, #260]	; (8001d3c <HAL_RCC_ClockConfig+0x1f8>)
 8001c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c38:	2202      	movs	r2, #2
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	d108      	bne.n	8001c50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e074      	b.n	8001d2c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c42:	4b3e      	ldr	r3, [pc, #248]	; (8001d3c <HAL_RCC_ClockConfig+0x1f8>)
 8001c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c46:	2202      	movs	r2, #2
 8001c48:	4013      	ands	r3, r2
 8001c4a:	d101      	bne.n	8001c50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e06d      	b.n	8001d2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c50:	4b3a      	ldr	r3, [pc, #232]	; (8001d3c <HAL_RCC_ClockConfig+0x1f8>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	2207      	movs	r2, #7
 8001c56:	4393      	bics	r3, r2
 8001c58:	0019      	movs	r1, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	4b37      	ldr	r3, [pc, #220]	; (8001d3c <HAL_RCC_ClockConfig+0x1f8>)
 8001c60:	430a      	orrs	r2, r1
 8001c62:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c64:	f7ff f974 	bl	8000f50 <HAL_GetTick>
 8001c68:	0003      	movs	r3, r0
 8001c6a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6c:	e009      	b.n	8001c82 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c6e:	f7ff f96f 	bl	8000f50 <HAL_GetTick>
 8001c72:	0002      	movs	r2, r0
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	4a2f      	ldr	r2, [pc, #188]	; (8001d38 <HAL_RCC_ClockConfig+0x1f4>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e054      	b.n	8001d2c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c82:	4b2e      	ldr	r3, [pc, #184]	; (8001d3c <HAL_RCC_ClockConfig+0x1f8>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	2238      	movs	r2, #56	; 0x38
 8001c88:	401a      	ands	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d1ec      	bne.n	8001c6e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c94:	4b27      	ldr	r3, [pc, #156]	; (8001d34 <HAL_RCC_ClockConfig+0x1f0>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2207      	movs	r2, #7
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d21e      	bcs.n	8001ce0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca2:	4b24      	ldr	r3, [pc, #144]	; (8001d34 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2207      	movs	r2, #7
 8001ca8:	4393      	bics	r3, r2
 8001caa:	0019      	movs	r1, r3
 8001cac:	4b21      	ldr	r3, [pc, #132]	; (8001d34 <HAL_RCC_ClockConfig+0x1f0>)
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cb4:	f7ff f94c 	bl	8000f50 <HAL_GetTick>
 8001cb8:	0003      	movs	r3, r0
 8001cba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cbc:	e009      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cbe:	f7ff f947 	bl	8000f50 <HAL_GetTick>
 8001cc2:	0002      	movs	r2, r0
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	4a1b      	ldr	r2, [pc, #108]	; (8001d38 <HAL_RCC_ClockConfig+0x1f4>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e02c      	b.n	8001d2c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cd2:	4b18      	ldr	r3, [pc, #96]	; (8001d34 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2207      	movs	r2, #7
 8001cd8:	4013      	ands	r3, r2
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d1ee      	bne.n	8001cbe <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2204      	movs	r2, #4
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	d009      	beq.n	8001cfe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001cea:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <HAL_RCC_ClockConfig+0x1f8>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	4a15      	ldr	r2, [pc, #84]	; (8001d44 <HAL_RCC_ClockConfig+0x200>)
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	0019      	movs	r1, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68da      	ldr	r2, [r3, #12]
 8001cf8:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <HAL_RCC_ClockConfig+0x1f8>)
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001cfe:	f000 f829 	bl	8001d54 <HAL_RCC_GetSysClockFreq>
 8001d02:	0001      	movs	r1, r0
 8001d04:	4b0d      	ldr	r3, [pc, #52]	; (8001d3c <HAL_RCC_ClockConfig+0x1f8>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	0a1b      	lsrs	r3, r3, #8
 8001d0a:	220f      	movs	r2, #15
 8001d0c:	401a      	ands	r2, r3
 8001d0e:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <HAL_RCC_ClockConfig+0x204>)
 8001d10:	0092      	lsls	r2, r2, #2
 8001d12:	58d3      	ldr	r3, [r2, r3]
 8001d14:	221f      	movs	r2, #31
 8001d16:	4013      	ands	r3, r2
 8001d18:	000a      	movs	r2, r1
 8001d1a:	40da      	lsrs	r2, r3
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <HAL_RCC_ClockConfig+0x208>)
 8001d1e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <HAL_RCC_ClockConfig+0x20c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	0018      	movs	r0, r3
 8001d26:	f7ff f8b7 	bl	8000e98 <HAL_InitTick>
 8001d2a:	0003      	movs	r3, r0
}
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	b004      	add	sp, #16
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40022000 	.word	0x40022000
 8001d38:	00001388 	.word	0x00001388
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	fffff0ff 	.word	0xfffff0ff
 8001d44:	ffff8fff 	.word	0xffff8fff
 8001d48:	08002790 	.word	0x08002790
 8001d4c:	20000000 	.word	0x20000000
 8001d50:	20000004 	.word	0x20000004

08001d54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d5a:	4b3c      	ldr	r3, [pc, #240]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	2238      	movs	r2, #56	; 0x38
 8001d60:	4013      	ands	r3, r2
 8001d62:	d10f      	bne.n	8001d84 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001d64:	4b39      	ldr	r3, [pc, #228]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	0adb      	lsrs	r3, r3, #11
 8001d6a:	2207      	movs	r2, #7
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	2201      	movs	r2, #1
 8001d70:	409a      	lsls	r2, r3
 8001d72:	0013      	movs	r3, r2
 8001d74:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001d76:	6839      	ldr	r1, [r7, #0]
 8001d78:	4835      	ldr	r0, [pc, #212]	; (8001e50 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d7a:	f7fe f9c1 	bl	8000100 <__udivsi3>
 8001d7e:	0003      	movs	r3, r0
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	e05d      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d84:	4b31      	ldr	r3, [pc, #196]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	2238      	movs	r2, #56	; 0x38
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	d102      	bne.n	8001d96 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d90:	4b30      	ldr	r3, [pc, #192]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x100>)
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	e054      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d96:	4b2d      	ldr	r3, [pc, #180]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	2238      	movs	r2, #56	; 0x38
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	2b10      	cmp	r3, #16
 8001da0:	d138      	bne.n	8001e14 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001da2:	4b2a      	ldr	r3, [pc, #168]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	2203      	movs	r2, #3
 8001da8:	4013      	ands	r3, r2
 8001daa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dac:	4b27      	ldr	r3, [pc, #156]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	091b      	lsrs	r3, r3, #4
 8001db2:	2207      	movs	r2, #7
 8001db4:	4013      	ands	r3, r2
 8001db6:	3301      	adds	r3, #1
 8001db8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2b03      	cmp	r3, #3
 8001dbe:	d10d      	bne.n	8001ddc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dc0:	68b9      	ldr	r1, [r7, #8]
 8001dc2:	4824      	ldr	r0, [pc, #144]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x100>)
 8001dc4:	f7fe f99c 	bl	8000100 <__udivsi3>
 8001dc8:	0003      	movs	r3, r0
 8001dca:	0019      	movs	r1, r3
 8001dcc:	4b1f      	ldr	r3, [pc, #124]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	0a1b      	lsrs	r3, r3, #8
 8001dd2:	227f      	movs	r2, #127	; 0x7f
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	434b      	muls	r3, r1
 8001dd8:	617b      	str	r3, [r7, #20]
        break;
 8001dda:	e00d      	b.n	8001df8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001ddc:	68b9      	ldr	r1, [r7, #8]
 8001dde:	481c      	ldr	r0, [pc, #112]	; (8001e50 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001de0:	f7fe f98e 	bl	8000100 <__udivsi3>
 8001de4:	0003      	movs	r3, r0
 8001de6:	0019      	movs	r1, r3
 8001de8:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	0a1b      	lsrs	r3, r3, #8
 8001dee:	227f      	movs	r2, #127	; 0x7f
 8001df0:	4013      	ands	r3, r2
 8001df2:	434b      	muls	r3, r1
 8001df4:	617b      	str	r3, [r7, #20]
        break;
 8001df6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001df8:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	0f5b      	lsrs	r3, r3, #29
 8001dfe:	2207      	movs	r2, #7
 8001e00:	4013      	ands	r3, r2
 8001e02:	3301      	adds	r3, #1
 8001e04:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	6978      	ldr	r0, [r7, #20]
 8001e0a:	f7fe f979 	bl	8000100 <__udivsi3>
 8001e0e:	0003      	movs	r3, r0
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	e015      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001e14:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	2238      	movs	r2, #56	; 0x38
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	2b20      	cmp	r3, #32
 8001e1e:	d103      	bne.n	8001e28 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001e20:	2380      	movs	r3, #128	; 0x80
 8001e22:	021b      	lsls	r3, r3, #8
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	e00b      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001e28:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	2238      	movs	r2, #56	; 0x38
 8001e2e:	4013      	ands	r3, r2
 8001e30:	2b18      	cmp	r3, #24
 8001e32:	d103      	bne.n	8001e3c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001e34:	23fa      	movs	r3, #250	; 0xfa
 8001e36:	01db      	lsls	r3, r3, #7
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	e001      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e40:	693b      	ldr	r3, [r7, #16]
}
 8001e42:	0018      	movs	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	b006      	add	sp, #24
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	00f42400 	.word	0x00f42400
 8001e54:	007a1200 	.word	0x007a1200

08001e58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e04a      	b.n	8001f00 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	223d      	movs	r2, #61	; 0x3d
 8001e6e:	5c9b      	ldrb	r3, [r3, r2]
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d107      	bne.n	8001e86 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	223c      	movs	r2, #60	; 0x3c
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	0018      	movs	r0, r3
 8001e82:	f7fe ff59 	bl	8000d38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	223d      	movs	r2, #61	; 0x3d
 8001e8a:	2102      	movs	r1, #2
 8001e8c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	3304      	adds	r3, #4
 8001e96:	0019      	movs	r1, r3
 8001e98:	0010      	movs	r0, r2
 8001e9a:	f000 fa53 	bl	8002344 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2248      	movs	r2, #72	; 0x48
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	223e      	movs	r2, #62	; 0x3e
 8001eaa:	2101      	movs	r1, #1
 8001eac:	5499      	strb	r1, [r3, r2]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	223f      	movs	r2, #63	; 0x3f
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	5499      	strb	r1, [r3, r2]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2240      	movs	r2, #64	; 0x40
 8001eba:	2101      	movs	r1, #1
 8001ebc:	5499      	strb	r1, [r3, r2]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2241      	movs	r2, #65	; 0x41
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	5499      	strb	r1, [r3, r2]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2242      	movs	r2, #66	; 0x42
 8001eca:	2101      	movs	r1, #1
 8001ecc:	5499      	strb	r1, [r3, r2]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2243      	movs	r2, #67	; 0x43
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2244      	movs	r2, #68	; 0x44
 8001eda:	2101      	movs	r1, #1
 8001edc:	5499      	strb	r1, [r3, r2]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2245      	movs	r2, #69	; 0x45
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	5499      	strb	r1, [r3, r2]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2246      	movs	r2, #70	; 0x46
 8001eea:	2101      	movs	r1, #1
 8001eec:	5499      	strb	r1, [r3, r2]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2247      	movs	r2, #71	; 0x47
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	223d      	movs	r2, #61	; 0x3d
 8001efa:	2101      	movs	r1, #1
 8001efc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	0018      	movs	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	b002      	add	sp, #8
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	2202      	movs	r2, #2
 8001f18:	4013      	ands	r3, r2
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d124      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	2202      	movs	r2, #2
 8001f26:	4013      	ands	r3, r2
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d11d      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2203      	movs	r2, #3
 8001f32:	4252      	negs	r2, r2
 8001f34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	2203      	movs	r2, #3
 8001f44:	4013      	ands	r3, r2
 8001f46:	d004      	beq.n	8001f52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	0018      	movs	r0, r3
 8001f4c:	f000 f9e2 	bl	8002314 <HAL_TIM_IC_CaptureCallback>
 8001f50:	e007      	b.n	8001f62 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	0018      	movs	r0, r3
 8001f56:	f000 f9d5 	bl	8002304 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	f000 f9e1 	bl	8002324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	2204      	movs	r2, #4
 8001f70:	4013      	ands	r3, r2
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	d125      	bne.n	8001fc2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	2204      	movs	r2, #4
 8001f7e:	4013      	ands	r3, r2
 8001f80:	2b04      	cmp	r3, #4
 8001f82:	d11e      	bne.n	8001fc2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2205      	movs	r2, #5
 8001f8a:	4252      	negs	r2, r2
 8001f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2202      	movs	r2, #2
 8001f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	699a      	ldr	r2, [r3, #24]
 8001f9a:	23c0      	movs	r3, #192	; 0xc0
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d004      	beq.n	8001fac <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	f000 f9b5 	bl	8002314 <HAL_TIM_IC_CaptureCallback>
 8001faa:	e007      	b.n	8001fbc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f000 f9a8 	bl	8002304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	0018      	movs	r0, r3
 8001fb8:	f000 f9b4 	bl	8002324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	2208      	movs	r2, #8
 8001fca:	4013      	ands	r3, r2
 8001fcc:	2b08      	cmp	r3, #8
 8001fce:	d124      	bne.n	800201a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	2208      	movs	r2, #8
 8001fd8:	4013      	ands	r3, r2
 8001fda:	2b08      	cmp	r3, #8
 8001fdc:	d11d      	bne.n	800201a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2209      	movs	r2, #9
 8001fe4:	4252      	negs	r2, r2
 8001fe6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2204      	movs	r2, #4
 8001fec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	69db      	ldr	r3, [r3, #28]
 8001ff4:	2203      	movs	r2, #3
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d004      	beq.n	8002004 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	f000 f989 	bl	8002314 <HAL_TIM_IC_CaptureCallback>
 8002002:	e007      	b.n	8002014 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	0018      	movs	r0, r3
 8002008:	f000 f97c 	bl	8002304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	0018      	movs	r0, r3
 8002010:	f000 f988 	bl	8002324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	2210      	movs	r2, #16
 8002022:	4013      	ands	r3, r2
 8002024:	2b10      	cmp	r3, #16
 8002026:	d125      	bne.n	8002074 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	2210      	movs	r2, #16
 8002030:	4013      	ands	r3, r2
 8002032:	2b10      	cmp	r3, #16
 8002034:	d11e      	bne.n	8002074 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2211      	movs	r2, #17
 800203c:	4252      	negs	r2, r2
 800203e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2208      	movs	r2, #8
 8002044:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	69da      	ldr	r2, [r3, #28]
 800204c:	23c0      	movs	r3, #192	; 0xc0
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4013      	ands	r3, r2
 8002052:	d004      	beq.n	800205e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	0018      	movs	r0, r3
 8002058:	f000 f95c 	bl	8002314 <HAL_TIM_IC_CaptureCallback>
 800205c:	e007      	b.n	800206e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	0018      	movs	r0, r3
 8002062:	f000 f94f 	bl	8002304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	0018      	movs	r0, r3
 800206a:	f000 f95b 	bl	8002324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	2201      	movs	r2, #1
 800207c:	4013      	ands	r3, r2
 800207e:	2b01      	cmp	r3, #1
 8002080:	d10f      	bne.n	80020a2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	2201      	movs	r2, #1
 800208a:	4013      	ands	r3, r2
 800208c:	2b01      	cmp	r3, #1
 800208e:	d108      	bne.n	80020a2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2202      	movs	r2, #2
 8002096:	4252      	negs	r2, r2
 8002098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	0018      	movs	r0, r3
 800209e:	f7fe fe0b 	bl	8000cb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	2280      	movs	r2, #128	; 0x80
 80020aa:	4013      	ands	r3, r2
 80020ac:	2b80      	cmp	r3, #128	; 0x80
 80020ae:	d10f      	bne.n	80020d0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	2280      	movs	r2, #128	; 0x80
 80020b8:	4013      	ands	r3, r2
 80020ba:	2b80      	cmp	r3, #128	; 0x80
 80020bc:	d108      	bne.n	80020d0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2281      	movs	r2, #129	; 0x81
 80020c4:	4252      	negs	r2, r2
 80020c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	0018      	movs	r0, r3
 80020cc:	f000 fabc 	bl	8002648 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	691a      	ldr	r2, [r3, #16]
 80020d6:	2380      	movs	r3, #128	; 0x80
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	401a      	ands	r2, r3
 80020dc:	2380      	movs	r3, #128	; 0x80
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d10e      	bne.n	8002102 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	2280      	movs	r2, #128	; 0x80
 80020ec:	4013      	ands	r3, r2
 80020ee:	2b80      	cmp	r3, #128	; 0x80
 80020f0:	d107      	bne.n	8002102 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a1c      	ldr	r2, [pc, #112]	; (8002168 <HAL_TIM_IRQHandler+0x260>)
 80020f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	0018      	movs	r0, r3
 80020fe:	f000 faab 	bl	8002658 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	2240      	movs	r2, #64	; 0x40
 800210a:	4013      	ands	r3, r2
 800210c:	2b40      	cmp	r3, #64	; 0x40
 800210e:	d10f      	bne.n	8002130 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	2240      	movs	r2, #64	; 0x40
 8002118:	4013      	ands	r3, r2
 800211a:	2b40      	cmp	r3, #64	; 0x40
 800211c:	d108      	bne.n	8002130 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2241      	movs	r2, #65	; 0x41
 8002124:	4252      	negs	r2, r2
 8002126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	0018      	movs	r0, r3
 800212c:	f000 f902 	bl	8002334 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	2220      	movs	r2, #32
 8002138:	4013      	ands	r3, r2
 800213a:	2b20      	cmp	r3, #32
 800213c:	d10f      	bne.n	800215e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	2220      	movs	r2, #32
 8002146:	4013      	ands	r3, r2
 8002148:	2b20      	cmp	r3, #32
 800214a:	d108      	bne.n	800215e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2221      	movs	r2, #33	; 0x21
 8002152:	4252      	negs	r2, r2
 8002154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	0018      	movs	r0, r3
 800215a:	f000 fa6d 	bl	8002638 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	46bd      	mov	sp, r7
 8002162:	b002      	add	sp, #8
 8002164:	bd80      	pop	{r7, pc}
 8002166:	46c0      	nop			; (mov r8, r8)
 8002168:	fffffeff 	.word	0xfffffeff

0800216c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	223c      	movs	r2, #60	; 0x3c
 800217a:	5c9b      	ldrb	r3, [r3, r2]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <HAL_TIM_ConfigClockSource+0x18>
 8002180:	2302      	movs	r3, #2
 8002182:	e0b7      	b.n	80022f4 <HAL_TIM_ConfigClockSource+0x188>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	223c      	movs	r2, #60	; 0x3c
 8002188:	2101      	movs	r1, #1
 800218a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	223d      	movs	r2, #61	; 0x3d
 8002190:	2102      	movs	r1, #2
 8002192:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4a57      	ldr	r2, [pc, #348]	; (80022fc <HAL_TIM_ConfigClockSource+0x190>)
 80021a0:	4013      	ands	r3, r2
 80021a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4a56      	ldr	r2, [pc, #344]	; (8002300 <HAL_TIM_ConfigClockSource+0x194>)
 80021a8:	4013      	ands	r3, r2
 80021aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2280      	movs	r2, #128	; 0x80
 80021ba:	0192      	lsls	r2, r2, #6
 80021bc:	4293      	cmp	r3, r2
 80021be:	d040      	beq.n	8002242 <HAL_TIM_ConfigClockSource+0xd6>
 80021c0:	2280      	movs	r2, #128	; 0x80
 80021c2:	0192      	lsls	r2, r2, #6
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d900      	bls.n	80021ca <HAL_TIM_ConfigClockSource+0x5e>
 80021c8:	e088      	b.n	80022dc <HAL_TIM_ConfigClockSource+0x170>
 80021ca:	2280      	movs	r2, #128	; 0x80
 80021cc:	0152      	lsls	r2, r2, #5
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d100      	bne.n	80021d4 <HAL_TIM_ConfigClockSource+0x68>
 80021d2:	e085      	b.n	80022e0 <HAL_TIM_ConfigClockSource+0x174>
 80021d4:	2280      	movs	r2, #128	; 0x80
 80021d6:	0152      	lsls	r2, r2, #5
 80021d8:	4293      	cmp	r3, r2
 80021da:	d900      	bls.n	80021de <HAL_TIM_ConfigClockSource+0x72>
 80021dc:	e07e      	b.n	80022dc <HAL_TIM_ConfigClockSource+0x170>
 80021de:	2b70      	cmp	r3, #112	; 0x70
 80021e0:	d018      	beq.n	8002214 <HAL_TIM_ConfigClockSource+0xa8>
 80021e2:	d900      	bls.n	80021e6 <HAL_TIM_ConfigClockSource+0x7a>
 80021e4:	e07a      	b.n	80022dc <HAL_TIM_ConfigClockSource+0x170>
 80021e6:	2b60      	cmp	r3, #96	; 0x60
 80021e8:	d04f      	beq.n	800228a <HAL_TIM_ConfigClockSource+0x11e>
 80021ea:	d900      	bls.n	80021ee <HAL_TIM_ConfigClockSource+0x82>
 80021ec:	e076      	b.n	80022dc <HAL_TIM_ConfigClockSource+0x170>
 80021ee:	2b50      	cmp	r3, #80	; 0x50
 80021f0:	d03b      	beq.n	800226a <HAL_TIM_ConfigClockSource+0xfe>
 80021f2:	d900      	bls.n	80021f6 <HAL_TIM_ConfigClockSource+0x8a>
 80021f4:	e072      	b.n	80022dc <HAL_TIM_ConfigClockSource+0x170>
 80021f6:	2b40      	cmp	r3, #64	; 0x40
 80021f8:	d057      	beq.n	80022aa <HAL_TIM_ConfigClockSource+0x13e>
 80021fa:	d900      	bls.n	80021fe <HAL_TIM_ConfigClockSource+0x92>
 80021fc:	e06e      	b.n	80022dc <HAL_TIM_ConfigClockSource+0x170>
 80021fe:	2b30      	cmp	r3, #48	; 0x30
 8002200:	d063      	beq.n	80022ca <HAL_TIM_ConfigClockSource+0x15e>
 8002202:	d86b      	bhi.n	80022dc <HAL_TIM_ConfigClockSource+0x170>
 8002204:	2b20      	cmp	r3, #32
 8002206:	d060      	beq.n	80022ca <HAL_TIM_ConfigClockSource+0x15e>
 8002208:	d868      	bhi.n	80022dc <HAL_TIM_ConfigClockSource+0x170>
 800220a:	2b00      	cmp	r3, #0
 800220c:	d05d      	beq.n	80022ca <HAL_TIM_ConfigClockSource+0x15e>
 800220e:	2b10      	cmp	r3, #16
 8002210:	d05b      	beq.n	80022ca <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002212:	e063      	b.n	80022dc <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6818      	ldr	r0, [r3, #0]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	6899      	ldr	r1, [r3, #8]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	f000 f980 	bl	8002528 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2277      	movs	r2, #119	; 0x77
 8002234:	4313      	orrs	r3, r2
 8002236:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	609a      	str	r2, [r3, #8]
      break;
 8002240:	e04f      	b.n	80022e2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6818      	ldr	r0, [r3, #0]
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	6899      	ldr	r1, [r3, #8]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	f000 f969 	bl	8002528 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2180      	movs	r1, #128	; 0x80
 8002262:	01c9      	lsls	r1, r1, #7
 8002264:	430a      	orrs	r2, r1
 8002266:	609a      	str	r2, [r3, #8]
      break;
 8002268:	e03b      	b.n	80022e2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6818      	ldr	r0, [r3, #0]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	6859      	ldr	r1, [r3, #4]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	001a      	movs	r2, r3
 8002278:	f000 f8da 	bl	8002430 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2150      	movs	r1, #80	; 0x50
 8002282:	0018      	movs	r0, r3
 8002284:	f000 f934 	bl	80024f0 <TIM_ITRx_SetConfig>
      break;
 8002288:	e02b      	b.n	80022e2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6818      	ldr	r0, [r3, #0]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	6859      	ldr	r1, [r3, #4]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	001a      	movs	r2, r3
 8002298:	f000 f8f8 	bl	800248c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2160      	movs	r1, #96	; 0x60
 80022a2:	0018      	movs	r0, r3
 80022a4:	f000 f924 	bl	80024f0 <TIM_ITRx_SetConfig>
      break;
 80022a8:	e01b      	b.n	80022e2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6818      	ldr	r0, [r3, #0]
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	6859      	ldr	r1, [r3, #4]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	001a      	movs	r2, r3
 80022b8:	f000 f8ba 	bl	8002430 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2140      	movs	r1, #64	; 0x40
 80022c2:	0018      	movs	r0, r3
 80022c4:	f000 f914 	bl	80024f0 <TIM_ITRx_SetConfig>
      break;
 80022c8:	e00b      	b.n	80022e2 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	0019      	movs	r1, r3
 80022d4:	0010      	movs	r0, r2
 80022d6:	f000 f90b 	bl	80024f0 <TIM_ITRx_SetConfig>
        break;
 80022da:	e002      	b.n	80022e2 <HAL_TIM_ConfigClockSource+0x176>
      break;
 80022dc:	46c0      	nop			; (mov r8, r8)
 80022de:	e000      	b.n	80022e2 <HAL_TIM_ConfigClockSource+0x176>
      break;
 80022e0:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	223d      	movs	r2, #61	; 0x3d
 80022e6:	2101      	movs	r1, #1
 80022e8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	223c      	movs	r2, #60	; 0x3c
 80022ee:	2100      	movs	r1, #0
 80022f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	0018      	movs	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	b004      	add	sp, #16
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	ffceff88 	.word	0xffceff88
 8002300:	ffff00ff 	.word	0xffff00ff

08002304 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800230c:	46c0      	nop			; (mov r8, r8)
 800230e:	46bd      	mov	sp, r7
 8002310:	b002      	add	sp, #8
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800231c:	46c0      	nop			; (mov r8, r8)
 800231e:	46bd      	mov	sp, r7
 8002320:	b002      	add	sp, #8
 8002322:	bd80      	pop	{r7, pc}

08002324 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800232c:	46c0      	nop			; (mov r8, r8)
 800232e:	46bd      	mov	sp, r7
 8002330:	b002      	add	sp, #8
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800233c:	46c0      	nop			; (mov r8, r8)
 800233e:	46bd      	mov	sp, r7
 8002340:	b002      	add	sp, #8
 8002342:	bd80      	pop	{r7, pc}

08002344 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a2f      	ldr	r2, [pc, #188]	; (8002414 <TIM_Base_SetConfig+0xd0>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d003      	beq.n	8002364 <TIM_Base_SetConfig+0x20>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a2e      	ldr	r2, [pc, #184]	; (8002418 <TIM_Base_SetConfig+0xd4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d108      	bne.n	8002376 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2270      	movs	r2, #112	; 0x70
 8002368:	4393      	bics	r3, r2
 800236a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	4313      	orrs	r3, r2
 8002374:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a26      	ldr	r2, [pc, #152]	; (8002414 <TIM_Base_SetConfig+0xd0>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d013      	beq.n	80023a6 <TIM_Base_SetConfig+0x62>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a25      	ldr	r2, [pc, #148]	; (8002418 <TIM_Base_SetConfig+0xd4>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d00f      	beq.n	80023a6 <TIM_Base_SetConfig+0x62>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a24      	ldr	r2, [pc, #144]	; (800241c <TIM_Base_SetConfig+0xd8>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d00b      	beq.n	80023a6 <TIM_Base_SetConfig+0x62>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a23      	ldr	r2, [pc, #140]	; (8002420 <TIM_Base_SetConfig+0xdc>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d007      	beq.n	80023a6 <TIM_Base_SetConfig+0x62>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a22      	ldr	r2, [pc, #136]	; (8002424 <TIM_Base_SetConfig+0xe0>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d003      	beq.n	80023a6 <TIM_Base_SetConfig+0x62>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a21      	ldr	r2, [pc, #132]	; (8002428 <TIM_Base_SetConfig+0xe4>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d108      	bne.n	80023b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	4a20      	ldr	r2, [pc, #128]	; (800242c <TIM_Base_SetConfig+0xe8>)
 80023aa:	4013      	ands	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2280      	movs	r2, #128	; 0x80
 80023bc:	4393      	bics	r3, r2
 80023be:	001a      	movs	r2, r3
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a0c      	ldr	r2, [pc, #48]	; (8002414 <TIM_Base_SetConfig+0xd0>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d00b      	beq.n	80023fe <TIM_Base_SetConfig+0xba>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a0d      	ldr	r2, [pc, #52]	; (8002420 <TIM_Base_SetConfig+0xdc>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d007      	beq.n	80023fe <TIM_Base_SetConfig+0xba>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a0c      	ldr	r2, [pc, #48]	; (8002424 <TIM_Base_SetConfig+0xe0>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d003      	beq.n	80023fe <TIM_Base_SetConfig+0xba>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a0b      	ldr	r2, [pc, #44]	; (8002428 <TIM_Base_SetConfig+0xe4>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d103      	bne.n	8002406 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	691a      	ldr	r2, [r3, #16]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	615a      	str	r2, [r3, #20]
}
 800240c:	46c0      	nop			; (mov r8, r8)
 800240e:	46bd      	mov	sp, r7
 8002410:	b004      	add	sp, #16
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40012c00 	.word	0x40012c00
 8002418:	40000400 	.word	0x40000400
 800241c:	40002000 	.word	0x40002000
 8002420:	40014000 	.word	0x40014000
 8002424:	40014400 	.word	0x40014400
 8002428:	40014800 	.word	0x40014800
 800242c:	fffffcff 	.word	0xfffffcff

08002430 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	2201      	movs	r2, #1
 8002448:	4393      	bics	r3, r2
 800244a:	001a      	movs	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	22f0      	movs	r2, #240	; 0xf0
 800245a:	4393      	bics	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4313      	orrs	r3, r2
 8002466:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	220a      	movs	r2, #10
 800246c:	4393      	bics	r3, r2
 800246e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	4313      	orrs	r3, r2
 8002476:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	697a      	ldr	r2, [r7, #20]
 8002482:	621a      	str	r2, [r3, #32]
}
 8002484:	46c0      	nop			; (mov r8, r8)
 8002486:	46bd      	mov	sp, r7
 8002488:	b006      	add	sp, #24
 800248a:	bd80      	pop	{r7, pc}

0800248c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	2210      	movs	r2, #16
 800249e:	4393      	bics	r3, r2
 80024a0:	001a      	movs	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	4a0d      	ldr	r2, [pc, #52]	; (80024ec <TIM_TI2_ConfigInputStage+0x60>)
 80024b6:	4013      	ands	r3, r2
 80024b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	031b      	lsls	r3, r3, #12
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	22a0      	movs	r2, #160	; 0xa0
 80024c8:	4393      	bics	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	011b      	lsls	r3, r3, #4
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	697a      	ldr	r2, [r7, #20]
 80024da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	621a      	str	r2, [r3, #32]
}
 80024e2:	46c0      	nop			; (mov r8, r8)
 80024e4:	46bd      	mov	sp, r7
 80024e6:	b006      	add	sp, #24
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	ffff0fff 	.word	0xffff0fff

080024f0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4a08      	ldr	r2, [pc, #32]	; (8002524 <TIM_ITRx_SetConfig+0x34>)
 8002504:	4013      	ands	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	4313      	orrs	r3, r2
 800250e:	2207      	movs	r2, #7
 8002510:	4313      	orrs	r3, r2
 8002512:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	609a      	str	r2, [r3, #8]
}
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	46bd      	mov	sp, r7
 800251e:	b004      	add	sp, #16
 8002520:	bd80      	pop	{r7, pc}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	ffcfff8f 	.word	0xffcfff8f

08002528 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
 8002534:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	4a09      	ldr	r2, [pc, #36]	; (8002564 <TIM_ETR_SetConfig+0x3c>)
 8002540:	4013      	ands	r3, r2
 8002542:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	021a      	lsls	r2, r3, #8
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	431a      	orrs	r2, r3
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	4313      	orrs	r3, r2
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	4313      	orrs	r3, r2
 8002554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	609a      	str	r2, [r3, #8]
}
 800255c:	46c0      	nop			; (mov r8, r8)
 800255e:	46bd      	mov	sp, r7
 8002560:	b006      	add	sp, #24
 8002562:	bd80      	pop	{r7, pc}
 8002564:	ffff00ff 	.word	0xffff00ff

08002568 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	223c      	movs	r2, #60	; 0x3c
 8002576:	5c9b      	ldrb	r3, [r3, r2]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d101      	bne.n	8002580 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800257c:	2302      	movs	r3, #2
 800257e:	e04f      	b.n	8002620 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	223c      	movs	r2, #60	; 0x3c
 8002584:	2101      	movs	r1, #1
 8002586:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	223d      	movs	r2, #61	; 0x3d
 800258c:	2102      	movs	r1, #2
 800258e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a20      	ldr	r2, [pc, #128]	; (8002628 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d108      	bne.n	80025bc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	4a1f      	ldr	r2, [pc, #124]	; (800262c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80025ae:	4013      	ands	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2270      	movs	r2, #112	; 0x70
 80025c0:	4393      	bics	r3, r2
 80025c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a13      	ldr	r2, [pc, #76]	; (8002628 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d009      	beq.n	80025f4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a12      	ldr	r2, [pc, #72]	; (8002630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d004      	beq.n	80025f4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a11      	ldr	r2, [pc, #68]	; (8002634 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d10c      	bne.n	800260e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	2280      	movs	r2, #128	; 0x80
 80025f8:	4393      	bics	r3, r2
 80025fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	68ba      	ldr	r2, [r7, #8]
 8002602:	4313      	orrs	r3, r2
 8002604:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	223d      	movs	r2, #61	; 0x3d
 8002612:	2101      	movs	r1, #1
 8002614:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	223c      	movs	r2, #60	; 0x3c
 800261a:	2100      	movs	r1, #0
 800261c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	0018      	movs	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	b004      	add	sp, #16
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40012c00 	.word	0x40012c00
 800262c:	ff0fffff 	.word	0xff0fffff
 8002630:	40000400 	.word	0x40000400
 8002634:	40014000 	.word	0x40014000

08002638 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002640:	46c0      	nop			; (mov r8, r8)
 8002642:	46bd      	mov	sp, r7
 8002644:	b002      	add	sp, #8
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002650:	46c0      	nop			; (mov r8, r8)
 8002652:	46bd      	mov	sp, r7
 8002654:	b002      	add	sp, #8
 8002656:	bd80      	pop	{r7, pc}

08002658 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002660:	46c0      	nop			; (mov r8, r8)
 8002662:	46bd      	mov	sp, r7
 8002664:	b002      	add	sp, #8
 8002666:	bd80      	pop	{r7, pc}

08002668 <__libc_init_array>:
 8002668:	b570      	push	{r4, r5, r6, lr}
 800266a:	2600      	movs	r6, #0
 800266c:	4d0c      	ldr	r5, [pc, #48]	; (80026a0 <__libc_init_array+0x38>)
 800266e:	4c0d      	ldr	r4, [pc, #52]	; (80026a4 <__libc_init_array+0x3c>)
 8002670:	1b64      	subs	r4, r4, r5
 8002672:	10a4      	asrs	r4, r4, #2
 8002674:	42a6      	cmp	r6, r4
 8002676:	d109      	bne.n	800268c <__libc_init_array+0x24>
 8002678:	2600      	movs	r6, #0
 800267a:	f000 f87d 	bl	8002778 <_init>
 800267e:	4d0a      	ldr	r5, [pc, #40]	; (80026a8 <__libc_init_array+0x40>)
 8002680:	4c0a      	ldr	r4, [pc, #40]	; (80026ac <__libc_init_array+0x44>)
 8002682:	1b64      	subs	r4, r4, r5
 8002684:	10a4      	asrs	r4, r4, #2
 8002686:	42a6      	cmp	r6, r4
 8002688:	d105      	bne.n	8002696 <__libc_init_array+0x2e>
 800268a:	bd70      	pop	{r4, r5, r6, pc}
 800268c:	00b3      	lsls	r3, r6, #2
 800268e:	58eb      	ldr	r3, [r5, r3]
 8002690:	4798      	blx	r3
 8002692:	3601      	adds	r6, #1
 8002694:	e7ee      	b.n	8002674 <__libc_init_array+0xc>
 8002696:	00b3      	lsls	r3, r6, #2
 8002698:	58eb      	ldr	r3, [r5, r3]
 800269a:	4798      	blx	r3
 800269c:	3601      	adds	r6, #1
 800269e:	e7f2      	b.n	8002686 <__libc_init_array+0x1e>
 80026a0:	080027f8 	.word	0x080027f8
 80026a4:	080027f8 	.word	0x080027f8
 80026a8:	080027f8 	.word	0x080027f8
 80026ac:	080027fc 	.word	0x080027fc

080026b0 <__itoa>:
 80026b0:	1e93      	subs	r3, r2, #2
 80026b2:	b510      	push	{r4, lr}
 80026b4:	000c      	movs	r4, r1
 80026b6:	2b22      	cmp	r3, #34	; 0x22
 80026b8:	d904      	bls.n	80026c4 <__itoa+0x14>
 80026ba:	2300      	movs	r3, #0
 80026bc:	001c      	movs	r4, r3
 80026be:	700b      	strb	r3, [r1, #0]
 80026c0:	0020      	movs	r0, r4
 80026c2:	bd10      	pop	{r4, pc}
 80026c4:	2a0a      	cmp	r2, #10
 80026c6:	d109      	bne.n	80026dc <__itoa+0x2c>
 80026c8:	2800      	cmp	r0, #0
 80026ca:	da07      	bge.n	80026dc <__itoa+0x2c>
 80026cc:	232d      	movs	r3, #45	; 0x2d
 80026ce:	700b      	strb	r3, [r1, #0]
 80026d0:	2101      	movs	r1, #1
 80026d2:	4240      	negs	r0, r0
 80026d4:	1861      	adds	r1, r4, r1
 80026d6:	f000 f819 	bl	800270c <__utoa>
 80026da:	e7f1      	b.n	80026c0 <__itoa+0x10>
 80026dc:	2100      	movs	r1, #0
 80026de:	e7f9      	b.n	80026d4 <__itoa+0x24>

080026e0 <itoa>:
 80026e0:	b510      	push	{r4, lr}
 80026e2:	f7ff ffe5 	bl	80026b0 <__itoa>
 80026e6:	bd10      	pop	{r4, pc}

080026e8 <memcpy>:
 80026e8:	2300      	movs	r3, #0
 80026ea:	b510      	push	{r4, lr}
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d100      	bne.n	80026f2 <memcpy+0xa>
 80026f0:	bd10      	pop	{r4, pc}
 80026f2:	5ccc      	ldrb	r4, [r1, r3]
 80026f4:	54c4      	strb	r4, [r0, r3]
 80026f6:	3301      	adds	r3, #1
 80026f8:	e7f8      	b.n	80026ec <memcpy+0x4>

080026fa <memset>:
 80026fa:	0003      	movs	r3, r0
 80026fc:	1882      	adds	r2, r0, r2
 80026fe:	4293      	cmp	r3, r2
 8002700:	d100      	bne.n	8002704 <memset+0xa>
 8002702:	4770      	bx	lr
 8002704:	7019      	strb	r1, [r3, #0]
 8002706:	3301      	adds	r3, #1
 8002708:	e7f9      	b.n	80026fe <memset+0x4>
	...

0800270c <__utoa>:
 800270c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800270e:	0016      	movs	r6, r2
 8002710:	b08d      	sub	sp, #52	; 0x34
 8002712:	0007      	movs	r7, r0
 8002714:	000c      	movs	r4, r1
 8002716:	2225      	movs	r2, #37	; 0x25
 8002718:	4916      	ldr	r1, [pc, #88]	; (8002774 <__utoa+0x68>)
 800271a:	a802      	add	r0, sp, #8
 800271c:	f7ff ffe4 	bl	80026e8 <memcpy>
 8002720:	1eb3      	subs	r3, r6, #2
 8002722:	2500      	movs	r5, #0
 8002724:	2b22      	cmp	r3, #34	; 0x22
 8002726:	d820      	bhi.n	800276a <__utoa+0x5e>
 8002728:	1e63      	subs	r3, r4, #1
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	ab02      	add	r3, sp, #8
 800272e:	9301      	str	r3, [sp, #4]
 8002730:	0038      	movs	r0, r7
 8002732:	0031      	movs	r1, r6
 8002734:	f7fd fd6a 	bl	800020c <__aeabi_uidivmod>
 8002738:	000b      	movs	r3, r1
 800273a:	9a01      	ldr	r2, [sp, #4]
 800273c:	0029      	movs	r1, r5
 800273e:	5cd3      	ldrb	r3, [r2, r3]
 8002740:	9a00      	ldr	r2, [sp, #0]
 8002742:	3501      	adds	r5, #1
 8002744:	5553      	strb	r3, [r2, r5]
 8002746:	003b      	movs	r3, r7
 8002748:	0007      	movs	r7, r0
 800274a:	429e      	cmp	r6, r3
 800274c:	d9f0      	bls.n	8002730 <__utoa+0x24>
 800274e:	2300      	movs	r3, #0
 8002750:	0022      	movs	r2, r4
 8002752:	5563      	strb	r3, [r4, r5]
 8002754:	000b      	movs	r3, r1
 8002756:	1ac8      	subs	r0, r1, r3
 8002758:	4283      	cmp	r3, r0
 800275a:	dd08      	ble.n	800276e <__utoa+0x62>
 800275c:	7810      	ldrb	r0, [r2, #0]
 800275e:	5ce5      	ldrb	r5, [r4, r3]
 8002760:	7015      	strb	r5, [r2, #0]
 8002762:	54e0      	strb	r0, [r4, r3]
 8002764:	3201      	adds	r2, #1
 8002766:	3b01      	subs	r3, #1
 8002768:	e7f5      	b.n	8002756 <__utoa+0x4a>
 800276a:	7025      	strb	r5, [r4, #0]
 800276c:	002c      	movs	r4, r5
 800276e:	0020      	movs	r0, r4
 8002770:	b00d      	add	sp, #52	; 0x34
 8002772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002774:	080027d0 	.word	0x080027d0

08002778 <_init>:
 8002778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800277a:	46c0      	nop			; (mov r8, r8)
 800277c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800277e:	bc08      	pop	{r3}
 8002780:	469e      	mov	lr, r3
 8002782:	4770      	bx	lr

08002784 <_fini>:
 8002784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002786:	46c0      	nop			; (mov r8, r8)
 8002788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800278a:	bc08      	pop	{r3}
 800278c:	469e      	mov	lr, r3
 800278e:	4770      	bx	lr
