
7seg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f38  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08002ff0  08002ff0  00012ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031a0  080031a0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080031a0  080031a0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031a0  080031a0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031a0  080031a0  000131a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031a4  080031a4  000131a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080031a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000010  080031b8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  080031b8  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000afde  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a95  00000000  00000000  0002b016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  0002cab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b8  00000000  00000000  0002d530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014f5b  00000000  00000000  0002dee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b7a4  00000000  00000000  00042e43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008707c  00000000  00000000  0004e5e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d5663  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002610  00000000  00000000  000d56b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000010 	.word	0x20000010
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002fd8 	.word	0x08002fd8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000014 	.word	0x20000014
 80000fc:	08002fd8 	.word	0x08002fd8

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <LEDmultiplexing>:
static void _LEDallOff(LEDdisplayTypeDef *LEDdisplay);
static void _LEDwriteCharacter(LEDdisplayTypeDef *LEDdisplay, uint8_t character);
void _LEDtransition(LEDdisplayTypeDef *LEDdisplay,
		uint8_t LEDtransitionDirection);

void LEDmultiplexing(LEDdisplayTypeDef *LEDdisplay) {
 8000218:	b590      	push	{r4, r7, lr}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]

//every intterrupt occurs
	_LEDallOff(LEDdisplay);
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	0018      	movs	r0, r3
 8000224:	f000 f9bb 	bl	800059e <_LEDallOff>
	_LEDfieldOn(LEDdisplay, LEDdisplay->actualField);
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2268      	movs	r2, #104	; 0x68
 800022c:	5c9a      	ldrb	r2, [r3, r2]
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	0011      	movs	r1, r2
 8000232:	0018      	movs	r0, r3
 8000234:	f000 f971 	bl	800051a <_LEDfieldOn>
	_LEDwriteCharacter(LEDdisplay,
			LEDdisplay->digitBuffer[LEDdisplay->actualField]);
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2268      	movs	r2, #104	; 0x68
 800023c:	5c9b      	ldrb	r3, [r3, r2]
 800023e:	0019      	movs	r1, r3
	_LEDwriteCharacter(LEDdisplay,
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	2260      	movs	r2, #96	; 0x60
 8000244:	185b      	adds	r3, r3, r1
 8000246:	189b      	adds	r3, r3, r2
 8000248:	781a      	ldrb	r2, [r3, #0]
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	0011      	movs	r1, r2
 800024e:	0018      	movs	r0, r3
 8000250:	f000 fa12 	bl	8000678 <_LEDwriteCharacter>

	if (LEDdisplay->dotBuffer[LEDdisplay->actualField] == 1) {
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	2268      	movs	r2, #104	; 0x68
 8000258:	5c9b      	ldrb	r3, [r3, r2]
 800025a:	0019      	movs	r1, r3
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2264      	movs	r2, #100	; 0x64
 8000260:	185b      	adds	r3, r3, r1
 8000262:	189b      	adds	r3, r3, r2
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	2b01      	cmp	r3, #1
 8000268:	d107      	bne.n	800027a <LEDmultiplexing+0x62>
		HAL_GPIO_WritePin(LEDdisplay->SegDOTPort, LEDdisplay->SegDOTPin,
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8000272:	2200      	movs	r2, #0
 8000274:	0019      	movs	r1, r3
 8000276:	f001 fc98 	bl	8001baa <HAL_GPIO_WritePin>
		SEGMENT_ON);
	}

	LEDdisplay->actualField++;
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	2268      	movs	r2, #104	; 0x68
 800027e:	5c9b      	ldrb	r3, [r3, r2]
 8000280:	3301      	adds	r3, #1
 8000282:	b2d9      	uxtb	r1, r3
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	2268      	movs	r2, #104	; 0x68
 8000288:	5499      	strb	r1, [r3, r2]
	if (LEDdisplay->actualField >= LED_FIELDS)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	2268      	movs	r2, #104	; 0x68
 800028e:	5c9b      	ldrb	r3, [r3, r2]
 8000290:	2b03      	cmp	r3, #3
 8000292:	d903      	bls.n	800029c <LEDmultiplexing+0x84>
		LEDdisplay->actualField = 0;
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	2268      	movs	r2, #104	; 0x68
 8000298:	2100      	movs	r1, #0
 800029a:	5499      	strb	r1, [r3, r2]

	LEDdisplay->prescalerCounter++;
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	226e      	movs	r2, #110	; 0x6e
 80002a0:	5a9b      	ldrh	r3, [r3, r2]
 80002a2:	3301      	adds	r3, #1
 80002a4:	b299      	uxth	r1, r3
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	226e      	movs	r2, #110	; 0x6e
 80002aa:	5299      	strh	r1, [r3, r2]

//every interrupt divided by prescaler
	if (LEDdisplay->prescalerCounter % LED_TRANSITION_PRE == 0) {
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	226e      	movs	r2, #110	; 0x6e
 80002b0:	5a9b      	ldrh	r3, [r3, r2]
 80002b2:	2207      	movs	r2, #7
 80002b4:	4013      	ands	r3, r2
 80002b6:	b29b      	uxth	r3, r3
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d000      	beq.n	80002be <LEDmultiplexing+0xa6>
 80002bc:	e0a2      	b.n	8000404 <LEDmultiplexing+0x1ec>

		//transition handling
		if (LEDdisplay->transitionStatus != LED_TRANSITION_DISABLED) {
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	226a      	movs	r2, #106	; 0x6a
 80002c2:	5c9b      	ldrb	r3, [r3, r2]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d100      	bne.n	80002ca <LEDmultiplexing+0xb2>
 80002c8:	e09c      	b.n	8000404 <LEDmultiplexing+0x1ec>

			//right dir
			if (LEDdisplay->transitionStatus == LED_TRANSITION_DIR_RIGHT) {
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	226a      	movs	r2, #106	; 0x6a
 80002ce:	5c9b      	ldrb	r3, [r3, r2]
 80002d0:	2b02      	cmp	r3, #2
 80002d2:	d13f      	bne.n	8000354 <LEDmultiplexing+0x13c>
				for (uint8_t i = LED_FIELDS - 1; i > 0; i--) {
 80002d4:	230f      	movs	r3, #15
 80002d6:	18fb      	adds	r3, r7, r3
 80002d8:	2203      	movs	r2, #3
 80002da:	701a      	strb	r2, [r3, #0]
 80002dc:	e015      	b.n	800030a <LEDmultiplexing+0xf2>
					LEDdisplay->digitBuffer[i] = LEDdisplay->digitBuffer[i - 1]; //fill with separator fields
 80002de:	240f      	movs	r4, #15
 80002e0:	193b      	adds	r3, r7, r4
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	1e5a      	subs	r2, r3, #1
 80002e6:	193b      	adds	r3, r7, r4
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	6879      	ldr	r1, [r7, #4]
 80002ec:	2060      	movs	r0, #96	; 0x60
 80002ee:	188a      	adds	r2, r1, r2
 80002f0:	1812      	adds	r2, r2, r0
 80002f2:	7810      	ldrb	r0, [r2, #0]
 80002f4:	687a      	ldr	r2, [r7, #4]
 80002f6:	2160      	movs	r1, #96	; 0x60
 80002f8:	18d3      	adds	r3, r2, r3
 80002fa:	185b      	adds	r3, r3, r1
 80002fc:	1c02      	adds	r2, r0, #0
 80002fe:	701a      	strb	r2, [r3, #0]
				for (uint8_t i = LED_FIELDS - 1; i > 0; i--) {
 8000300:	193b      	adds	r3, r7, r4
 8000302:	781a      	ldrb	r2, [r3, #0]
 8000304:	193b      	adds	r3, r7, r4
 8000306:	3a01      	subs	r2, #1
 8000308:	701a      	strb	r2, [r3, #0]
 800030a:	230f      	movs	r3, #15
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d1e4      	bne.n	80002de <LEDmultiplexing+0xc6>
				}

				if (LEDdisplay->transitionStage < LED_TRANSITION_SEPARATOR_SIZE) {
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	2269      	movs	r2, #105	; 0x69
 8000318:	5c9b      	ldrb	r3, [r3, r2]
 800031a:	2b02      	cmp	r3, #2
 800031c:	d80c      	bhi.n	8000338 <LEDmultiplexing+0x120>
					LEDdisplay->digitBuffer[0] =
							LEDdisplay->transitionSeparator[LEDdisplay->transitionStage]; //fill with separator fields
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	2269      	movs	r2, #105	; 0x69
 8000322:	5c9b      	ldrb	r3, [r3, r2]
 8000324:	0019      	movs	r1, r3
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	226b      	movs	r2, #107	; 0x6b
 800032a:	185b      	adds	r3, r3, r1
 800032c:	189b      	adds	r3, r3, r2
 800032e:	7819      	ldrb	r1, [r3, #0]
					LEDdisplay->digitBuffer[0] =
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	2260      	movs	r2, #96	; 0x60
 8000334:	5499      	strb	r1, [r3, r2]
 8000336:	e00d      	b.n	8000354 <LEDmultiplexing+0x13c>
				} else {
					LEDdisplay->digitBuffer[0] =
							LEDdisplay->digitTransitionBuffer[LED_FIELDS - 1
									- (LEDdisplay->transitionStage
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	2269      	movs	r2, #105	; 0x69
 800033c:	5c9b      	ldrb	r3, [r3, r2]
 800033e:	001a      	movs	r2, r3
 8000340:	2306      	movs	r3, #6
 8000342:	1a9b      	subs	r3, r3, r2
							LEDdisplay->digitTransitionBuffer[LED_FIELDS - 1
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	2170      	movs	r1, #112	; 0x70
 8000348:	18d3      	adds	r3, r2, r3
 800034a:	185b      	adds	r3, r3, r1
 800034c:	7819      	ldrb	r1, [r3, #0]
					LEDdisplay->digitBuffer[0] =
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	2260      	movs	r2, #96	; 0x60
 8000352:	5499      	strb	r1, [r3, r2]
				}

			}

			//left dir
			if (LEDdisplay->transitionStatus == LED_TRANSITION_DIR_LEFT) {
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	226a      	movs	r2, #106	; 0x6a
 8000358:	5c9b      	ldrb	r3, [r3, r2]
 800035a:	2b01      	cmp	r3, #1
 800035c:	d13d      	bne.n	80003da <LEDmultiplexing+0x1c2>
				for (uint8_t i = 0; i < LED_FIELDS - 1; i++) {
 800035e:	230e      	movs	r3, #14
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	2200      	movs	r2, #0
 8000364:	701a      	strb	r2, [r3, #0]
 8000366:	e015      	b.n	8000394 <LEDmultiplexing+0x17c>
					LEDdisplay->digitBuffer[i] = LEDdisplay->digitBuffer[i + 1]; //digits
 8000368:	240e      	movs	r4, #14
 800036a:	193b      	adds	r3, r7, r4
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	1c5a      	adds	r2, r3, #1
 8000370:	193b      	adds	r3, r7, r4
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	6879      	ldr	r1, [r7, #4]
 8000376:	2060      	movs	r0, #96	; 0x60
 8000378:	188a      	adds	r2, r1, r2
 800037a:	1812      	adds	r2, r2, r0
 800037c:	7810      	ldrb	r0, [r2, #0]
 800037e:	687a      	ldr	r2, [r7, #4]
 8000380:	2160      	movs	r1, #96	; 0x60
 8000382:	18d3      	adds	r3, r2, r3
 8000384:	185b      	adds	r3, r3, r1
 8000386:	1c02      	adds	r2, r0, #0
 8000388:	701a      	strb	r2, [r3, #0]
				for (uint8_t i = 0; i < LED_FIELDS - 1; i++) {
 800038a:	193b      	adds	r3, r7, r4
 800038c:	781a      	ldrb	r2, [r3, #0]
 800038e:	193b      	adds	r3, r7, r4
 8000390:	3201      	adds	r2, #1
 8000392:	701a      	strb	r2, [r3, #0]
 8000394:	230e      	movs	r3, #14
 8000396:	18fb      	adds	r3, r7, r3
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	2b02      	cmp	r3, #2
 800039c:	d9e4      	bls.n	8000368 <LEDmultiplexing+0x150>
				}

				if (LEDdisplay->transitionStage < LED_TRANSITION_SEPARATOR_SIZE) {
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	2269      	movs	r2, #105	; 0x69
 80003a2:	5c9b      	ldrb	r3, [r3, r2]
 80003a4:	2b02      	cmp	r3, #2
 80003a6:	d80c      	bhi.n	80003c2 <LEDmultiplexing+0x1aa>
					LEDdisplay->digitBuffer[LED_FIELDS - 1] =
							LEDdisplay->transitionSeparator[LEDdisplay->transitionStage]; //fill with separator fields
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2269      	movs	r2, #105	; 0x69
 80003ac:	5c9b      	ldrb	r3, [r3, r2]
 80003ae:	0019      	movs	r1, r3
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	226b      	movs	r2, #107	; 0x6b
 80003b4:	185b      	adds	r3, r3, r1
 80003b6:	189b      	adds	r3, r3, r2
 80003b8:	7819      	ldrb	r1, [r3, #0]
					LEDdisplay->digitBuffer[LED_FIELDS - 1] =
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	2263      	movs	r2, #99	; 0x63
 80003be:	5499      	strb	r1, [r3, r2]
 80003c0:	e00b      	b.n	80003da <LEDmultiplexing+0x1c2>
				} else {
					LEDdisplay->digitBuffer[LED_FIELDS - 1] =
							LEDdisplay->digitTransitionBuffer[LEDdisplay->transitionStage
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	2269      	movs	r2, #105	; 0x69
 80003c6:	5c9b      	ldrb	r3, [r3, r2]
									- LED_TRANSITION_SEPARATOR_SIZE]; //fill with digits from transition buffer
 80003c8:	3b03      	subs	r3, #3
							LEDdisplay->digitTransitionBuffer[LEDdisplay->transitionStage
 80003ca:	687a      	ldr	r2, [r7, #4]
 80003cc:	2170      	movs	r1, #112	; 0x70
 80003ce:	18d3      	adds	r3, r2, r3
 80003d0:	185b      	adds	r3, r3, r1
 80003d2:	7819      	ldrb	r1, [r3, #0]
					LEDdisplay->digitBuffer[LED_FIELDS - 1] =
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	2263      	movs	r2, #99	; 0x63
 80003d8:	5499      	strb	r1, [r3, r2]
				}

			}

			LEDdisplay->transitionStage++;
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	2269      	movs	r2, #105	; 0x69
 80003de:	5c9b      	ldrb	r3, [r3, r2]
 80003e0:	3301      	adds	r3, #1
 80003e2:	b2d9      	uxtb	r1, r3
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	2269      	movs	r2, #105	; 0x69
 80003e8:	5499      	strb	r1, [r3, r2]
			if (LEDdisplay->transitionStage >= LED_TRANSITION_STAGES) {
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	2269      	movs	r2, #105	; 0x69
 80003ee:	5c9b      	ldrb	r3, [r3, r2]
 80003f0:	2b06      	cmp	r3, #6
 80003f2:	d907      	bls.n	8000404 <LEDmultiplexing+0x1ec>
				LEDdisplay->transitionStage = 0;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	2269      	movs	r2, #105	; 0x69
 80003f8:	2100      	movs	r1, #0
 80003fa:	5499      	strb	r1, [r3, r2]
				LEDdisplay->transitionStatus = LED_TRANSITION_DISABLED;
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	226a      	movs	r2, #106	; 0x6a
 8000400:	2100      	movs	r1, #0
 8000402:	5499      	strb	r1, [r3, r2]
			}
		}

	}
}
 8000404:	46c0      	nop			; (mov r8, r8)
 8000406:	46bd      	mov	sp, r7
 8000408:	b005      	add	sp, #20
 800040a:	bd90      	pop	{r4, r7, pc}

0800040c <_LEDtransition>:

void _LEDtransition(LEDdisplayTypeDef *LEDdisplay,
		uint8_t LEDtransitionDirection) {
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
 8000414:	000a      	movs	r2, r1
 8000416:	1cfb      	adds	r3, r7, #3
 8000418:	701a      	strb	r2, [r3, #0]
	if (LEDdisplay->transitionStatus == 0) {
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	226a      	movs	r2, #106	; 0x6a
 800041e:	5c9b      	ldrb	r3, [r3, r2]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d104      	bne.n	800042e <_LEDtransition+0x22>
		LEDdisplay->transitionStatus = LEDtransitionDirection;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	1cfa      	adds	r2, r7, #3
 8000428:	216a      	movs	r1, #106	; 0x6a
 800042a:	7812      	ldrb	r2, [r2, #0]
 800042c:	545a      	strb	r2, [r3, r1]
	}
}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	46bd      	mov	sp, r7
 8000432:	b002      	add	sp, #8
 8000434:	bd80      	pop	{r7, pc}

08000436 <_LEDsegmentOn>:

static void _LEDsegmentOn(LEDdisplayTypeDef *LEDdisplay, uint8_t segment) {
 8000436:	b580      	push	{r7, lr}
 8000438:	b082      	sub	sp, #8
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
 800043e:	000a      	movs	r2, r1
 8000440:	1cfb      	adds	r3, r7, #3
 8000442:	701a      	strb	r2, [r3, #0]

	if (segment == DISP_SEG_A)
 8000444:	1cfb      	adds	r3, r7, #3
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d108      	bne.n	800045e <_LEDsegmentOn+0x28>
		HAL_GPIO_WritePin(LEDdisplay->SegAPort, LEDdisplay->SegAPin,
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	6858      	ldr	r0, [r3, #4]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	881b      	ldrh	r3, [r3, #0]
 8000454:	2200      	movs	r2, #0
 8000456:	0019      	movs	r1, r3
 8000458:	f001 fba7 	bl	8001baa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEDdisplay->SegGPort, LEDdisplay->SegGPin,
		SEGMENT_ON);
	else if (segment == DISP_SEG_DOT)
		HAL_GPIO_WritePin(LEDdisplay->SegDOTPort, LEDdisplay->SegDOTPin,
		SEGMENT_ON);
}
 800045c:	e059      	b.n	8000512 <_LEDsegmentOn+0xdc>
	else if (segment == DISP_SEG_B)
 800045e:	1cfb      	adds	r3, r7, #3
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	2b02      	cmp	r3, #2
 8000464:	d108      	bne.n	8000478 <_LEDsegmentOn+0x42>
		HAL_GPIO_WritePin(LEDdisplay->SegBPort, LEDdisplay->SegBPin,
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	68d8      	ldr	r0, [r3, #12]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	891b      	ldrh	r3, [r3, #8]
 800046e:	2200      	movs	r2, #0
 8000470:	0019      	movs	r1, r3
 8000472:	f001 fb9a 	bl	8001baa <HAL_GPIO_WritePin>
}
 8000476:	e04c      	b.n	8000512 <_LEDsegmentOn+0xdc>
	else if (segment == DISP_SEG_C)
 8000478:	1cfb      	adds	r3, r7, #3
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2b03      	cmp	r3, #3
 800047e:	d108      	bne.n	8000492 <_LEDsegmentOn+0x5c>
		HAL_GPIO_WritePin(LEDdisplay->SegCPort, LEDdisplay->SegCPin,
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	6958      	ldr	r0, [r3, #20]
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	8a1b      	ldrh	r3, [r3, #16]
 8000488:	2200      	movs	r2, #0
 800048a:	0019      	movs	r1, r3
 800048c:	f001 fb8d 	bl	8001baa <HAL_GPIO_WritePin>
}
 8000490:	e03f      	b.n	8000512 <_LEDsegmentOn+0xdc>
	else if (segment == DISP_SEG_D)
 8000492:	1cfb      	adds	r3, r7, #3
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	2b04      	cmp	r3, #4
 8000498:	d108      	bne.n	80004ac <_LEDsegmentOn+0x76>
		HAL_GPIO_WritePin(LEDdisplay->SegDPort, LEDdisplay->SegDPin,
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	69d8      	ldr	r0, [r3, #28]
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	8b1b      	ldrh	r3, [r3, #24]
 80004a2:	2200      	movs	r2, #0
 80004a4:	0019      	movs	r1, r3
 80004a6:	f001 fb80 	bl	8001baa <HAL_GPIO_WritePin>
}
 80004aa:	e032      	b.n	8000512 <_LEDsegmentOn+0xdc>
	else if (segment == DISP_SEG_E)
 80004ac:	1cfb      	adds	r3, r7, #3
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	2b05      	cmp	r3, #5
 80004b2:	d108      	bne.n	80004c6 <_LEDsegmentOn+0x90>
		HAL_GPIO_WritePin(LEDdisplay->SegEPort, LEDdisplay->SegEPin,
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	8c1b      	ldrh	r3, [r3, #32]
 80004bc:	2200      	movs	r2, #0
 80004be:	0019      	movs	r1, r3
 80004c0:	f001 fb73 	bl	8001baa <HAL_GPIO_WritePin>
}
 80004c4:	e025      	b.n	8000512 <_LEDsegmentOn+0xdc>
	else if (segment == DISP_SEG_F)
 80004c6:	1cfb      	adds	r3, r7, #3
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	2b06      	cmp	r3, #6
 80004cc:	d108      	bne.n	80004e0 <_LEDsegmentOn+0xaa>
		HAL_GPIO_WritePin(LEDdisplay->SegFPort, LEDdisplay->SegFPin,
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80004d6:	2200      	movs	r2, #0
 80004d8:	0019      	movs	r1, r3
 80004da:	f001 fb66 	bl	8001baa <HAL_GPIO_WritePin>
}
 80004de:	e018      	b.n	8000512 <_LEDsegmentOn+0xdc>
	else if (segment == DISP_SEG_G)
 80004e0:	1cfb      	adds	r3, r7, #3
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	2b07      	cmp	r3, #7
 80004e6:	d108      	bne.n	80004fa <_LEDsegmentOn+0xc4>
		HAL_GPIO_WritePin(LEDdisplay->SegGPort, LEDdisplay->SegGPin,
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80004f0:	2200      	movs	r2, #0
 80004f2:	0019      	movs	r1, r3
 80004f4:	f001 fb59 	bl	8001baa <HAL_GPIO_WritePin>
}
 80004f8:	e00b      	b.n	8000512 <_LEDsegmentOn+0xdc>
	else if (segment == DISP_SEG_DOT)
 80004fa:	1cfb      	adds	r3, r7, #3
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	2b08      	cmp	r3, #8
 8000500:	d107      	bne.n	8000512 <_LEDsegmentOn+0xdc>
		HAL_GPIO_WritePin(LEDdisplay->SegDOTPort, LEDdisplay->SegDOTPin,
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800050a:	2200      	movs	r2, #0
 800050c:	0019      	movs	r1, r3
 800050e:	f001 fb4c 	bl	8001baa <HAL_GPIO_WritePin>
}
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	46bd      	mov	sp, r7
 8000516:	b002      	add	sp, #8
 8000518:	bd80      	pop	{r7, pc}

0800051a <_LEDfieldOn>:

static void _LEDfieldOn(LEDdisplayTypeDef *LEDdisplay, uint8_t field) {
 800051a:	b580      	push	{r7, lr}
 800051c:	b082      	sub	sp, #8
 800051e:	af00      	add	r7, sp, #0
 8000520:	6078      	str	r0, [r7, #4]
 8000522:	000a      	movs	r2, r1
 8000524:	1cfb      	adds	r3, r7, #3
 8000526:	701a      	strb	r2, [r3, #0]

#if LED_FIELDS >=1
	if (field == FIELD_0)
 8000528:	1cfb      	adds	r3, r7, #3
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d109      	bne.n	8000544 <_LEDfieldOn+0x2a>
		HAL_GPIO_WritePin(LEDdisplay->Field0Port, LEDdisplay->Field0Pin,
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2240      	movs	r2, #64	; 0x40
 8000538:	5a9b      	ldrh	r3, [r3, r2]
 800053a:	2201      	movs	r2, #1
 800053c:	0019      	movs	r1, r3
 800053e:	f001 fb34 	bl	8001baa <HAL_GPIO_WritePin>
#if LED_FIELDS >=4
	else if (field == FIELD_3)
		HAL_GPIO_WritePin(LEDdisplay->Field3Port, LEDdisplay->Field3Pin,
		FIELD_ON);
#endif
}
 8000542:	e028      	b.n	8000596 <_LEDfieldOn+0x7c>
	else if (field == FIELD_1)
 8000544:	1cfb      	adds	r3, r7, #3
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b01      	cmp	r3, #1
 800054a:	d109      	bne.n	8000560 <_LEDfieldOn+0x46>
		HAL_GPIO_WritePin(LEDdisplay->Field1Port, LEDdisplay->Field1Pin,
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	2248      	movs	r2, #72	; 0x48
 8000554:	5a9b      	ldrh	r3, [r3, r2]
 8000556:	2201      	movs	r2, #1
 8000558:	0019      	movs	r1, r3
 800055a:	f001 fb26 	bl	8001baa <HAL_GPIO_WritePin>
}
 800055e:	e01a      	b.n	8000596 <_LEDfieldOn+0x7c>
	else if (field == FIELD_2)
 8000560:	1cfb      	adds	r3, r7, #3
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	2b02      	cmp	r3, #2
 8000566:	d109      	bne.n	800057c <_LEDfieldOn+0x62>
		HAL_GPIO_WritePin(LEDdisplay->Field2Port, LEDdisplay->Field2Pin,
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	2250      	movs	r2, #80	; 0x50
 8000570:	5a9b      	ldrh	r3, [r3, r2]
 8000572:	2201      	movs	r2, #1
 8000574:	0019      	movs	r1, r3
 8000576:	f001 fb18 	bl	8001baa <HAL_GPIO_WritePin>
}
 800057a:	e00c      	b.n	8000596 <_LEDfieldOn+0x7c>
	else if (field == FIELD_3)
 800057c:	1cfb      	adds	r3, r7, #3
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b03      	cmp	r3, #3
 8000582:	d108      	bne.n	8000596 <_LEDfieldOn+0x7c>
		HAL_GPIO_WritePin(LEDdisplay->Field3Port, LEDdisplay->Field3Pin,
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2258      	movs	r2, #88	; 0x58
 800058c:	5a9b      	ldrh	r3, [r3, r2]
 800058e:	2201      	movs	r2, #1
 8000590:	0019      	movs	r1, r3
 8000592:	f001 fb0a 	bl	8001baa <HAL_GPIO_WritePin>
}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	b002      	add	sp, #8
 800059c:	bd80      	pop	{r7, pc}

0800059e <_LEDallOff>:

static void _LEDallOff(LEDdisplayTypeDef *LEDdisplay) {
 800059e:	b580      	push	{r7, lr}
 80005a0:	b082      	sub	sp, #8
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]

#if LED_FIELDS >=1
	HAL_GPIO_WritePin(LEDdisplay->Field0Port, LEDdisplay->Field0Pin, FIELD_OFF);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	2240      	movs	r2, #64	; 0x40
 80005ae:	5a9b      	ldrh	r3, [r3, r2]
 80005b0:	2200      	movs	r2, #0
 80005b2:	0019      	movs	r1, r3
 80005b4:	f001 faf9 	bl	8001baa <HAL_GPIO_WritePin>
#endif
#if LED_FIELDS >=2
	HAL_GPIO_WritePin(LEDdisplay->Field1Port, LEDdisplay->Field1Pin, FIELD_OFF);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2248      	movs	r2, #72	; 0x48
 80005c0:	5a9b      	ldrh	r3, [r3, r2]
 80005c2:	2200      	movs	r2, #0
 80005c4:	0019      	movs	r1, r3
 80005c6:	f001 faf0 	bl	8001baa <HAL_GPIO_WritePin>
#endif
#if LED_FIELDS >=3
	HAL_GPIO_WritePin(LEDdisplay->Field2Port, LEDdisplay->Field2Pin, FIELD_OFF);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2250      	movs	r2, #80	; 0x50
 80005d2:	5a9b      	ldrh	r3, [r3, r2]
 80005d4:	2200      	movs	r2, #0
 80005d6:	0019      	movs	r1, r3
 80005d8:	f001 fae7 	bl	8001baa <HAL_GPIO_WritePin>
#endif
#if LED_FIELDS >=4
	HAL_GPIO_WritePin(LEDdisplay->Field3Port, LEDdisplay->Field3Pin, FIELD_OFF);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2258      	movs	r2, #88	; 0x58
 80005e4:	5a9b      	ldrh	r3, [r3, r2]
 80005e6:	2200      	movs	r2, #0
 80005e8:	0019      	movs	r1, r3
 80005ea:	f001 fade 	bl	8001baa <HAL_GPIO_WritePin>
#endif

	HAL_GPIO_WritePin(LEDdisplay->SegAPort, LEDdisplay->SegAPin, SEGMENT_OFF);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	6858      	ldr	r0, [r3, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	2201      	movs	r2, #1
 80005f8:	0019      	movs	r1, r3
 80005fa:	f001 fad6 	bl	8001baa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegBPort, LEDdisplay->SegBPin, SEGMENT_OFF);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	68d8      	ldr	r0, [r3, #12]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	891b      	ldrh	r3, [r3, #8]
 8000606:	2201      	movs	r2, #1
 8000608:	0019      	movs	r1, r3
 800060a:	f001 face 	bl	8001baa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegCPort, LEDdisplay->SegCPin, SEGMENT_OFF);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6958      	ldr	r0, [r3, #20]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	8a1b      	ldrh	r3, [r3, #16]
 8000616:	2201      	movs	r2, #1
 8000618:	0019      	movs	r1, r3
 800061a:	f001 fac6 	bl	8001baa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegDPort, LEDdisplay->SegDPin, SEGMENT_OFF);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	69d8      	ldr	r0, [r3, #28]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	8b1b      	ldrh	r3, [r3, #24]
 8000626:	2201      	movs	r2, #1
 8000628:	0019      	movs	r1, r3
 800062a:	f001 fabe 	bl	8001baa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegEPort, LEDdisplay->SegEPin, SEGMENT_OFF);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	8c1b      	ldrh	r3, [r3, #32]
 8000636:	2201      	movs	r2, #1
 8000638:	0019      	movs	r1, r3
 800063a:	f001 fab6 	bl	8001baa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegFPort, LEDdisplay->SegFPin, SEGMENT_OFF);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000646:	2201      	movs	r2, #1
 8000648:	0019      	movs	r1, r3
 800064a:	f001 faae 	bl	8001baa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegGPort, LEDdisplay->SegGPin, SEGMENT_OFF);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000656:	2201      	movs	r2, #1
 8000658:	0019      	movs	r1, r3
 800065a:	f001 faa6 	bl	8001baa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegDOTPort, LEDdisplay->SegDOTPin,
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8000666:	2201      	movs	r2, #1
 8000668:	0019      	movs	r1, r3
 800066a:	f001 fa9e 	bl	8001baa <HAL_GPIO_WritePin>
	SEGMENT_OFF);

}
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	46bd      	mov	sp, r7
 8000672:	b002      	add	sp, #8
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <_LEDwriteCharacter>:

static void _LEDwriteCharacter(LEDdisplayTypeDef *LEDdisplay, uint8_t character) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	000a      	movs	r2, r1
 8000682:	1cfb      	adds	r3, r7, #3
 8000684:	701a      	strb	r2, [r3, #0]

	if (character >= 48 && character <= 57) {
 8000686:	1cfb      	adds	r3, r7, #3
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b2f      	cmp	r3, #47	; 0x2f
 800068c:	d800      	bhi.n	8000690 <_LEDwriteCharacter+0x18>
 800068e:	e10f      	b.n	80008b0 <_LEDwriteCharacter+0x238>
 8000690:	1cfb      	adds	r3, r7, #3
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b39      	cmp	r3, #57	; 0x39
 8000696:	d900      	bls.n	800069a <_LEDwriteCharacter+0x22>
 8000698:	e10a      	b.n	80008b0 <_LEDwriteCharacter+0x238>
		switch (character) {
 800069a:	1cfb      	adds	r3, r7, #3
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	3b30      	subs	r3, #48	; 0x30
 80006a0:	2b09      	cmp	r3, #9
 80006a2:	d900      	bls.n	80006a6 <_LEDwriteCharacter+0x2e>
 80006a4:	e293      	b.n	8000bce <_LEDwriteCharacter+0x556>
 80006a6:	009a      	lsls	r2, r3, #2
 80006a8:	4bea      	ldr	r3, [pc, #936]	; (8000a54 <_LEDwriteCharacter+0x3dc>)
 80006aa:	18d3      	adds	r3, r2, r3
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	469f      	mov	pc, r3
		case '1':

			_LEDsegmentOn(LEDdisplay, DISP_SEG_B);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2102      	movs	r1, #2
 80006b4:	0018      	movs	r0, r3
 80006b6:	f7ff febe 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_C);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2103      	movs	r1, #3
 80006be:	0018      	movs	r0, r3
 80006c0:	f7ff feb9 	bl	8000436 <_LEDsegmentOn>
			break;
 80006c4:	e0f3      	b.n	80008ae <_LEDwriteCharacter+0x236>
		case '2':
			_LEDsegmentOn(LEDdisplay, DISP_SEG_A);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2101      	movs	r1, #1
 80006ca:	0018      	movs	r0, r3
 80006cc:	f7ff feb3 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_B);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2102      	movs	r1, #2
 80006d4:	0018      	movs	r0, r3
 80006d6:	f7ff feae 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_G);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2107      	movs	r1, #7
 80006de:	0018      	movs	r0, r3
 80006e0:	f7ff fea9 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_E);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2105      	movs	r1, #5
 80006e8:	0018      	movs	r0, r3
 80006ea:	f7ff fea4 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_D);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2104      	movs	r1, #4
 80006f2:	0018      	movs	r0, r3
 80006f4:	f7ff fe9f 	bl	8000436 <_LEDsegmentOn>
			break;
 80006f8:	e0d9      	b.n	80008ae <_LEDwriteCharacter+0x236>
		case '3':
			_LEDsegmentOn(LEDdisplay, DISP_SEG_A);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	2101      	movs	r1, #1
 80006fe:	0018      	movs	r0, r3
 8000700:	f7ff fe99 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_B);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2102      	movs	r1, #2
 8000708:	0018      	movs	r0, r3
 800070a:	f7ff fe94 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_G);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2107      	movs	r1, #7
 8000712:	0018      	movs	r0, r3
 8000714:	f7ff fe8f 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_C);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2103      	movs	r1, #3
 800071c:	0018      	movs	r0, r3
 800071e:	f7ff fe8a 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_D);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2104      	movs	r1, #4
 8000726:	0018      	movs	r0, r3
 8000728:	f7ff fe85 	bl	8000436 <_LEDsegmentOn>
			break;
 800072c:	e0bf      	b.n	80008ae <_LEDwriteCharacter+0x236>
		case '4':
			_LEDsegmentOn(LEDdisplay, DISP_SEG_F);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2106      	movs	r1, #6
 8000732:	0018      	movs	r0, r3
 8000734:	f7ff fe7f 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_G);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2107      	movs	r1, #7
 800073c:	0018      	movs	r0, r3
 800073e:	f7ff fe7a 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_B);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2102      	movs	r1, #2
 8000746:	0018      	movs	r0, r3
 8000748:	f7ff fe75 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_C);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2103      	movs	r1, #3
 8000750:	0018      	movs	r0, r3
 8000752:	f7ff fe70 	bl	8000436 <_LEDsegmentOn>
			break;
 8000756:	e0aa      	b.n	80008ae <_LEDwriteCharacter+0x236>
		case '5':
			_LEDsegmentOn(LEDdisplay, DISP_SEG_A);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2101      	movs	r1, #1
 800075c:	0018      	movs	r0, r3
 800075e:	f7ff fe6a 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_F);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2106      	movs	r1, #6
 8000766:	0018      	movs	r0, r3
 8000768:	f7ff fe65 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_G);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2107      	movs	r1, #7
 8000770:	0018      	movs	r0, r3
 8000772:	f7ff fe60 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_C);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2103      	movs	r1, #3
 800077a:	0018      	movs	r0, r3
 800077c:	f7ff fe5b 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_D);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2104      	movs	r1, #4
 8000784:	0018      	movs	r0, r3
 8000786:	f7ff fe56 	bl	8000436 <_LEDsegmentOn>
			break;
 800078a:	e090      	b.n	80008ae <_LEDwriteCharacter+0x236>
		case '6':
			_LEDsegmentOn(LEDdisplay, DISP_SEG_A);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2101      	movs	r1, #1
 8000790:	0018      	movs	r0, r3
 8000792:	f7ff fe50 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_C);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2103      	movs	r1, #3
 800079a:	0018      	movs	r0, r3
 800079c:	f7ff fe4b 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_D);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2104      	movs	r1, #4
 80007a4:	0018      	movs	r0, r3
 80007a6:	f7ff fe46 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_E);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2105      	movs	r1, #5
 80007ae:	0018      	movs	r0, r3
 80007b0:	f7ff fe41 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_F);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2106      	movs	r1, #6
 80007b8:	0018      	movs	r0, r3
 80007ba:	f7ff fe3c 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_G);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2107      	movs	r1, #7
 80007c2:	0018      	movs	r0, r3
 80007c4:	f7ff fe37 	bl	8000436 <_LEDsegmentOn>
			break;
 80007c8:	e071      	b.n	80008ae <_LEDwriteCharacter+0x236>
		case '7':
			_LEDsegmentOn(LEDdisplay, DISP_SEG_A);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2101      	movs	r1, #1
 80007ce:	0018      	movs	r0, r3
 80007d0:	f7ff fe31 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_B);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2102      	movs	r1, #2
 80007d8:	0018      	movs	r0, r3
 80007da:	f7ff fe2c 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_C);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2103      	movs	r1, #3
 80007e2:	0018      	movs	r0, r3
 80007e4:	f7ff fe27 	bl	8000436 <_LEDsegmentOn>
			break;
 80007e8:	e061      	b.n	80008ae <_LEDwriteCharacter+0x236>
		case '8':
			_LEDsegmentOn(LEDdisplay, DISP_SEG_A);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2101      	movs	r1, #1
 80007ee:	0018      	movs	r0, r3
 80007f0:	f7ff fe21 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_B);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2102      	movs	r1, #2
 80007f8:	0018      	movs	r0, r3
 80007fa:	f7ff fe1c 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_C);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2103      	movs	r1, #3
 8000802:	0018      	movs	r0, r3
 8000804:	f7ff fe17 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_D);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2104      	movs	r1, #4
 800080c:	0018      	movs	r0, r3
 800080e:	f7ff fe12 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_E);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2105      	movs	r1, #5
 8000816:	0018      	movs	r0, r3
 8000818:	f7ff fe0d 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_F);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2106      	movs	r1, #6
 8000820:	0018      	movs	r0, r3
 8000822:	f7ff fe08 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_G);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2107      	movs	r1, #7
 800082a:	0018      	movs	r0, r3
 800082c:	f7ff fe03 	bl	8000436 <_LEDsegmentOn>
			break;
 8000830:	e03d      	b.n	80008ae <_LEDwriteCharacter+0x236>
		case '9':
			_LEDsegmentOn(LEDdisplay, DISP_SEG_A);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2101      	movs	r1, #1
 8000836:	0018      	movs	r0, r3
 8000838:	f7ff fdfd 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_B);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2102      	movs	r1, #2
 8000840:	0018      	movs	r0, r3
 8000842:	f7ff fdf8 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_C);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2103      	movs	r1, #3
 800084a:	0018      	movs	r0, r3
 800084c:	f7ff fdf3 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_D);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2104      	movs	r1, #4
 8000854:	0018      	movs	r0, r3
 8000856:	f7ff fdee 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_F);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2106      	movs	r1, #6
 800085e:	0018      	movs	r0, r3
 8000860:	f7ff fde9 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_G);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2107      	movs	r1, #7
 8000868:	0018      	movs	r0, r3
 800086a:	f7ff fde4 	bl	8000436 <_LEDsegmentOn>
			break;
 800086e:	e01e      	b.n	80008ae <_LEDwriteCharacter+0x236>
		case '0':
			_LEDsegmentOn(LEDdisplay, DISP_SEG_A);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2101      	movs	r1, #1
 8000874:	0018      	movs	r0, r3
 8000876:	f7ff fdde 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_B);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2102      	movs	r1, #2
 800087e:	0018      	movs	r0, r3
 8000880:	f7ff fdd9 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_C);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2103      	movs	r1, #3
 8000888:	0018      	movs	r0, r3
 800088a:	f7ff fdd4 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_D);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2104      	movs	r1, #4
 8000892:	0018      	movs	r0, r3
 8000894:	f7ff fdcf 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_E);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2105      	movs	r1, #5
 800089c:	0018      	movs	r0, r3
 800089e:	f7ff fdca 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_F);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2106      	movs	r1, #6
 80008a6:	0018      	movs	r0, r3
 80008a8:	f7ff fdc5 	bl	8000436 <_LEDsegmentOn>
			break;
 80008ac:	46c0      	nop			; (mov r8, r8)
		switch (character) {
 80008ae:	e18e      	b.n	8000bce <_LEDwriteCharacter+0x556>
		}
	} else {
		switch (character) {
 80008b0:	1cfb      	adds	r3, r7, #3
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	3b2d      	subs	r3, #45	; 0x2d
 80008b6:	2b45      	cmp	r3, #69	; 0x45
 80008b8:	d900      	bls.n	80008bc <_LEDwriteCharacter+0x244>
 80008ba:	e188      	b.n	8000bce <_LEDwriteCharacter+0x556>
 80008bc:	009a      	lsls	r2, r3, #2
 80008be:	4b66      	ldr	r3, [pc, #408]	; (8000a58 <_LEDwriteCharacter+0x3e0>)
 80008c0:	18d3      	adds	r3, r2, r3
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	469f      	mov	pc, r3
		case 'A':
			_LEDsegmentOn(LEDdisplay, DISP_SEG_A);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2101      	movs	r1, #1
 80008ca:	0018      	movs	r0, r3
 80008cc:	f7ff fdb3 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_B);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2102      	movs	r1, #2
 80008d4:	0018      	movs	r0, r3
 80008d6:	f7ff fdae 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_C);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2103      	movs	r1, #3
 80008de:	0018      	movs	r0, r3
 80008e0:	f7ff fda9 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_E);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2105      	movs	r1, #5
 80008e8:	0018      	movs	r0, r3
 80008ea:	f7ff fda4 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_F);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2106      	movs	r1, #6
 80008f2:	0018      	movs	r0, r3
 80008f4:	f7ff fd9f 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_G);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2107      	movs	r1, #7
 80008fc:	0018      	movs	r0, r3
 80008fe:	f7ff fd9a 	bl	8000436 <_LEDsegmentOn>
			break;
 8000902:	e164      	b.n	8000bce <_LEDwriteCharacter+0x556>
		case 'b':
			_LEDsegmentOn(LEDdisplay, DISP_SEG_C);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2103      	movs	r1, #3
 8000908:	0018      	movs	r0, r3
 800090a:	f7ff fd94 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_D);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2104      	movs	r1, #4
 8000912:	0018      	movs	r0, r3
 8000914:	f7ff fd8f 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_E);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2105      	movs	r1, #5
 800091c:	0018      	movs	r0, r3
 800091e:	f7ff fd8a 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_F);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2106      	movs	r1, #6
 8000926:	0018      	movs	r0, r3
 8000928:	f7ff fd85 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_G);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2107      	movs	r1, #7
 8000930:	0018      	movs	r0, r3
 8000932:	f7ff fd80 	bl	8000436 <_LEDsegmentOn>
			break;
 8000936:	e14a      	b.n	8000bce <_LEDwriteCharacter+0x556>

		case 'C':
			_LEDsegmentOn(LEDdisplay, DISP_SEG_A);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2101      	movs	r1, #1
 800093c:	0018      	movs	r0, r3
 800093e:	f7ff fd7a 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_D);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2104      	movs	r1, #4
 8000946:	0018      	movs	r0, r3
 8000948:	f7ff fd75 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_E);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2105      	movs	r1, #5
 8000950:	0018      	movs	r0, r3
 8000952:	f7ff fd70 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_F);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2106      	movs	r1, #6
 800095a:	0018      	movs	r0, r3
 800095c:	f7ff fd6b 	bl	8000436 <_LEDsegmentOn>
			break;
 8000960:	e135      	b.n	8000bce <_LEDwriteCharacter+0x556>

		case 'c':
			_LEDsegmentOn(LEDdisplay, DISP_SEG_D);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2104      	movs	r1, #4
 8000966:	0018      	movs	r0, r3
 8000968:	f7ff fd65 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_E);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2105      	movs	r1, #5
 8000970:	0018      	movs	r0, r3
 8000972:	f7ff fd60 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_G);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2107      	movs	r1, #7
 800097a:	0018      	movs	r0, r3
 800097c:	f7ff fd5b 	bl	8000436 <_LEDsegmentOn>
			break;
 8000980:	e125      	b.n	8000bce <_LEDwriteCharacter+0x556>

		case 'D':
			_LEDsegmentOn(LEDdisplay, DISP_SEG_A);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2101      	movs	r1, #1
 8000986:	0018      	movs	r0, r3
 8000988:	f7ff fd55 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_B);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2102      	movs	r1, #2
 8000990:	0018      	movs	r0, r3
 8000992:	f7ff fd50 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_C);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2103      	movs	r1, #3
 800099a:	0018      	movs	r0, r3
 800099c:	f7ff fd4b 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_D);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2104      	movs	r1, #4
 80009a4:	0018      	movs	r0, r3
 80009a6:	f7ff fd46 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_E);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2105      	movs	r1, #5
 80009ae:	0018      	movs	r0, r3
 80009b0:	f7ff fd41 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_F);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2106      	movs	r1, #6
 80009b8:	0018      	movs	r0, r3
 80009ba:	f7ff fd3c 	bl	8000436 <_LEDsegmentOn>
			break;
 80009be:	e106      	b.n	8000bce <_LEDwriteCharacter+0x556>

		case 'd':
			_LEDsegmentOn(LEDdisplay, DISP_SEG_B);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2102      	movs	r1, #2
 80009c4:	0018      	movs	r0, r3
 80009c6:	f7ff fd36 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_C);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2103      	movs	r1, #3
 80009ce:	0018      	movs	r0, r3
 80009d0:	f7ff fd31 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_D);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2104      	movs	r1, #4
 80009d8:	0018      	movs	r0, r3
 80009da:	f7ff fd2c 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_E);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2105      	movs	r1, #5
 80009e2:	0018      	movs	r0, r3
 80009e4:	f7ff fd27 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_G);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2107      	movs	r1, #7
 80009ec:	0018      	movs	r0, r3
 80009ee:	f7ff fd22 	bl	8000436 <_LEDsegmentOn>
			break;
 80009f2:	e0ec      	b.n	8000bce <_LEDwriteCharacter+0x556>

		case 'E':
			_LEDsegmentOn(LEDdisplay, DISP_SEG_A);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2101      	movs	r1, #1
 80009f8:	0018      	movs	r0, r3
 80009fa:	f7ff fd1c 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_D);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2104      	movs	r1, #4
 8000a02:	0018      	movs	r0, r3
 8000a04:	f7ff fd17 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_E);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2105      	movs	r1, #5
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f7ff fd12 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_F);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2106      	movs	r1, #6
 8000a16:	0018      	movs	r0, r3
 8000a18:	f7ff fd0d 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_G);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2107      	movs	r1, #7
 8000a20:	0018      	movs	r0, r3
 8000a22:	f7ff fd08 	bl	8000436 <_LEDsegmentOn>
			break;
 8000a26:	e0d2      	b.n	8000bce <_LEDwriteCharacter+0x556>

		case 'F':
			_LEDsegmentOn(LEDdisplay, DISP_SEG_A);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f7ff fd02 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_E);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2105      	movs	r1, #5
 8000a36:	0018      	movs	r0, r3
 8000a38:	f7ff fcfd 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_F);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2106      	movs	r1, #6
 8000a40:	0018      	movs	r0, r3
 8000a42:	f7ff fcf8 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_G);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2107      	movs	r1, #7
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f7ff fcf3 	bl	8000436 <_LEDsegmentOn>
			break;
 8000a50:	e0bd      	b.n	8000bce <_LEDwriteCharacter+0x556>
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	08002ff8 	.word	0x08002ff8
 8000a58:	08003020 	.word	0x08003020
		case 'H':
			_LEDsegmentOn(LEDdisplay, DISP_SEG_B);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2102      	movs	r1, #2
 8000a60:	0018      	movs	r0, r3
 8000a62:	f7ff fce8 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_C);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2103      	movs	r1, #3
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f7ff fce3 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_E);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2105      	movs	r1, #5
 8000a74:	0018      	movs	r0, r3
 8000a76:	f7ff fcde 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_F);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2106      	movs	r1, #6
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f7ff fcd9 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_G);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2107      	movs	r1, #7
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f7ff fcd4 	bl	8000436 <_LEDsegmentOn>
			break;
 8000a8e:	e09e      	b.n	8000bce <_LEDwriteCharacter+0x556>
		case 'J':
			_LEDsegmentOn(LEDdisplay, DISP_SEG_B);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2102      	movs	r1, #2
 8000a94:	0018      	movs	r0, r3
 8000a96:	f7ff fcce 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_C);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2103      	movs	r1, #3
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f7ff fcc9 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_D);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2104      	movs	r1, #4
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f7ff fcc4 	bl	8000436 <_LEDsegmentOn>
			break;
 8000aae:	e08e      	b.n	8000bce <_LEDwriteCharacter+0x556>
		case 'L':
			_LEDsegmentOn(LEDdisplay, DISP_SEG_D);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2104      	movs	r1, #4
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f7ff fcbe 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_E);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2105      	movs	r1, #5
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f7ff fcb9 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_F);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2106      	movs	r1, #6
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f7ff fcb4 	bl	8000436 <_LEDsegmentOn>
			break;
 8000ace:	e07e      	b.n	8000bce <_LEDwriteCharacter+0x556>

		case 'O':
			_LEDsegmentOn(LEDdisplay, DISP_SEG_A);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f7ff fcae 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_B);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2102      	movs	r1, #2
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f7ff fca9 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_C);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2103      	movs	r1, #3
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f7ff fca4 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_D);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2104      	movs	r1, #4
 8000af2:	0018      	movs	r0, r3
 8000af4:	f7ff fc9f 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_E);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2105      	movs	r1, #5
 8000afc:	0018      	movs	r0, r3
 8000afe:	f7ff fc9a 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_F);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2106      	movs	r1, #6
 8000b06:	0018      	movs	r0, r3
 8000b08:	f7ff fc95 	bl	8000436 <_LEDsegmentOn>
			break;
 8000b0c:	e05f      	b.n	8000bce <_LEDwriteCharacter+0x556>

		case 'o':
			_LEDsegmentOn(LEDdisplay, DISP_SEG_C);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2103      	movs	r1, #3
 8000b12:	0018      	movs	r0, r3
 8000b14:	f7ff fc8f 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_D);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2104      	movs	r1, #4
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f7ff fc8a 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_E);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2105      	movs	r1, #5
 8000b26:	0018      	movs	r0, r3
 8000b28:	f7ff fc85 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_G);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2107      	movs	r1, #7
 8000b30:	0018      	movs	r0, r3
 8000b32:	f7ff fc80 	bl	8000436 <_LEDsegmentOn>
			break;
 8000b36:	e04a      	b.n	8000bce <_LEDwriteCharacter+0x556>
		case 'P':
			_LEDsegmentOn(LEDdisplay, DISP_SEG_A);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f7ff fc7a 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_B);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2102      	movs	r1, #2
 8000b46:	0018      	movs	r0, r3
 8000b48:	f7ff fc75 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_E);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2105      	movs	r1, #5
 8000b50:	0018      	movs	r0, r3
 8000b52:	f7ff fc70 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_F);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2106      	movs	r1, #6
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f7ff fc6b 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_G);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2107      	movs	r1, #7
 8000b64:	0018      	movs	r0, r3
 8000b66:	f7ff fc66 	bl	8000436 <_LEDsegmentOn>
			break;
 8000b6a:	e030      	b.n	8000bce <_LEDwriteCharacter+0x556>
		case 'r':
			_LEDsegmentOn(LEDdisplay, DISP_SEG_E);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2105      	movs	r1, #5
 8000b70:	0018      	movs	r0, r3
 8000b72:	f7ff fc60 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_G);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2107      	movs	r1, #7
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f7ff fc5b 	bl	8000436 <_LEDsegmentOn>
			break;
 8000b80:	e025      	b.n	8000bce <_LEDwriteCharacter+0x556>
		case 'U':
			_LEDsegmentOn(LEDdisplay, DISP_SEG_B);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2102      	movs	r1, #2
 8000b86:	0018      	movs	r0, r3
 8000b88:	f7ff fc55 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_C);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2103      	movs	r1, #3
 8000b90:	0018      	movs	r0, r3
 8000b92:	f7ff fc50 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_D);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2104      	movs	r1, #4
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f7ff fc4b 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_E);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2105      	movs	r1, #5
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f7ff fc46 	bl	8000436 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, DISP_SEG_F);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2106      	movs	r1, #6
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f7ff fc41 	bl	8000436 <_LEDsegmentOn>
			break;
 8000bb4:	e00b      	b.n	8000bce <_LEDwriteCharacter+0x556>
		case '-':
			_LEDsegmentOn(LEDdisplay, DISP_SEG_G);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2107      	movs	r1, #7
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f7ff fc3b 	bl	8000436 <_LEDsegmentOn>
			break;
 8000bc0:	e005      	b.n	8000bce <_LEDwriteCharacter+0x556>
		case '_':
			_LEDsegmentOn(LEDdisplay, DISP_SEG_D);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2104      	movs	r1, #4
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f7ff fc35 	bl	8000436 <_LEDsegmentOn>
			break;
 8000bcc:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	b002      	add	sp, #8
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	46c0      	nop			; (mov r8, r8)

08000bd8 <LEDinit>:
 *
 * @param  Display handler
 *
 * @retval None
 */
void LEDinit(LEDdisplayTypeDef *LEDdisplay) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]

	LEDclear(LEDdisplay);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	0018      	movs	r0, r3
 8000be4:	f000 f808 	bl	8000bf8 <LEDclear>
	LEDdisplay->actualField = FIELD_0;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2268      	movs	r2, #104	; 0x68
 8000bec:	2100      	movs	r1, #0
 8000bee:	5499      	strb	r1, [r3, r2]
}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	b002      	add	sp, #8
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <LEDclear>:
 *
 * @param  Display handler
 *
 * @retval None
 */
void LEDclear(LEDdisplayTypeDef *LEDdisplay) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	memset(LEDdisplay->digitBuffer, ' ', LED_FIELDS);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3360      	adds	r3, #96	; 0x60
 8000c04:	2204      	movs	r2, #4
 8000c06:	2120      	movs	r1, #32
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f002 f9a6 	bl	8002f5a <memset>
	memset(LEDdisplay->dotBuffer, 0, LED_FIELDS);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	3364      	adds	r3, #100	; 0x64
 8000c12:	2204      	movs	r2, #4
 8000c14:	2100      	movs	r1, #0
 8000c16:	0018      	movs	r0, r3
 8000c18:	f002 f99f 	bl	8002f5a <memset>
}
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b002      	add	sp, #8
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <LEDchar>:
 *
 * @param character to display
 *
 * @retval None
 */
void LEDchar(LEDdisplayTypeDef *LEDdisplay, uint8_t offset, uint8_t character) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	0008      	movs	r0, r1
 8000c2e:	0011      	movs	r1, r2
 8000c30:	1cfb      	adds	r3, r7, #3
 8000c32:	1c02      	adds	r2, r0, #0
 8000c34:	701a      	strb	r2, [r3, #0]
 8000c36:	1cbb      	adds	r3, r7, #2
 8000c38:	1c0a      	adds	r2, r1, #0
 8000c3a:	701a      	strb	r2, [r3, #0]
	LEDdisplay->digitBuffer[offset] = character;
 8000c3c:	1cfb      	adds	r3, r7, #3
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	2160      	movs	r1, #96	; 0x60
 8000c44:	18d3      	adds	r3, r2, r3
 8000c46:	185b      	adds	r3, r3, r1
 8000c48:	1cba      	adds	r2, r7, #2
 8000c4a:	7812      	ldrb	r2, [r2, #0]
 8000c4c:	701a      	strb	r2, [r3, #0]
}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	46bd      	mov	sp, r7
 8000c52:	b002      	add	sp, #8
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <LEDint>:
 * @param transition type
 *
 * @retval None
 */
void LEDint(LEDdisplayTypeDef *LEDdisplay, uint8_t offset, uint16_t number,
		uint8_t transition) {
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	000c      	movs	r4, r1
 8000c62:	0010      	movs	r0, r2
 8000c64:	0019      	movs	r1, r3
 8000c66:	1cfb      	adds	r3, r7, #3
 8000c68:	1c22      	adds	r2, r4, #0
 8000c6a:	701a      	strb	r2, [r3, #0]
 8000c6c:	003b      	movs	r3, r7
 8000c6e:	1c02      	adds	r2, r0, #0
 8000c70:	801a      	strh	r2, [r3, #0]
 8000c72:	1cbb      	adds	r3, r7, #2
 8000c74:	1c0a      	adds	r2, r1, #0
 8000c76:	701a      	strb	r2, [r3, #0]

	if (number > MAX_NUMBER)
 8000c78:	003b      	movs	r3, r7
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	4a2c      	ldr	r2, [pc, #176]	; (8000d30 <LEDint+0xd8>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d902      	bls.n	8000c88 <LEDint+0x30>
		number = MAX_NUMBER;
 8000c82:	003b      	movs	r3, r7
 8000c84:	4a2a      	ldr	r2, [pc, #168]	; (8000d30 <LEDint+0xd8>)
 8000c86:	801a      	strh	r2, [r3, #0]

	//determine size of destination place
	uint8_t size;
	if (number < 10)
 8000c88:	003b      	movs	r3, r7
 8000c8a:	881b      	ldrh	r3, [r3, #0]
 8000c8c:	2b09      	cmp	r3, #9
 8000c8e:	d804      	bhi.n	8000c9a <LEDint+0x42>
		size = 1;
 8000c90:	230f      	movs	r3, #15
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	2201      	movs	r2, #1
 8000c96:	701a      	strb	r2, [r3, #0]
 8000c98:	e01c      	b.n	8000cd4 <LEDint+0x7c>
	else if (number < 100)
 8000c9a:	003b      	movs	r3, r7
 8000c9c:	881b      	ldrh	r3, [r3, #0]
 8000c9e:	2b63      	cmp	r3, #99	; 0x63
 8000ca0:	d804      	bhi.n	8000cac <LEDint+0x54>
		size = 2;
 8000ca2:	230f      	movs	r3, #15
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	2202      	movs	r2, #2
 8000ca8:	701a      	strb	r2, [r3, #0]
 8000caa:	e013      	b.n	8000cd4 <LEDint+0x7c>
	else if (number < 1000)
 8000cac:	003b      	movs	r3, r7
 8000cae:	881a      	ldrh	r2, [r3, #0]
 8000cb0:	23fa      	movs	r3, #250	; 0xfa
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d204      	bcs.n	8000cc2 <LEDint+0x6a>
		size = 3;
 8000cb8:	230f      	movs	r3, #15
 8000cba:	18fb      	adds	r3, r7, r3
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	701a      	strb	r2, [r3, #0]
 8000cc0:	e008      	b.n	8000cd4 <LEDint+0x7c>
	else if (number < 10000)
 8000cc2:	003b      	movs	r3, r7
 8000cc4:	881b      	ldrh	r3, [r3, #0]
 8000cc6:	4a1a      	ldr	r2, [pc, #104]	; (8000d30 <LEDint+0xd8>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d803      	bhi.n	8000cd4 <LEDint+0x7c>
		size = 4;
 8000ccc:	230f      	movs	r3, #15
 8000cce:	18fb      	adds	r3, r7, r3
 8000cd0:	2204      	movs	r2, #4
 8000cd2:	701a      	strb	r2, [r3, #0]

	char buffer[5];

	itoa(number, buffer, 10);
 8000cd4:	003b      	movs	r3, r7
 8000cd6:	881b      	ldrh	r3, [r3, #0]
 8000cd8:	2408      	movs	r4, #8
 8000cda:	1939      	adds	r1, r7, r4
 8000cdc:	220a      	movs	r2, #10
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f002 f92e 	bl	8002f40 <itoa>

	if (transition == LED_TRANSITION_DISABLED) {
 8000ce4:	1cbb      	adds	r3, r7, #2
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d10a      	bne.n	8000d02 <LEDint+0xaa>
		memcpy(LEDdisplay->digitBuffer, buffer, size);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3360      	adds	r3, #96	; 0x60
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	230f      	movs	r3, #15
 8000cf4:	18fb      	adds	r3, r7, r3
 8000cf6:	781a      	ldrb	r2, [r3, #0]
 8000cf8:	193b      	adds	r3, r7, r4
 8000cfa:	0019      	movs	r1, r3
 8000cfc:	f002 f924 	bl	8002f48 <memcpy>
 8000d00:	e00a      	b.n	8000d18 <LEDint+0xc0>
	} else {
		memcpy(LEDdisplay->digitTransitionBuffer, buffer, size);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	3370      	adds	r3, #112	; 0x70
 8000d06:	0018      	movs	r0, r3
 8000d08:	230f      	movs	r3, #15
 8000d0a:	18fb      	adds	r3, r7, r3
 8000d0c:	781a      	ldrb	r2, [r3, #0]
 8000d0e:	2308      	movs	r3, #8
 8000d10:	18fb      	adds	r3, r7, r3
 8000d12:	0019      	movs	r1, r3
 8000d14:	f002 f918 	bl	8002f48 <memcpy>
	}

	_LEDtransition(LEDdisplay, transition);
 8000d18:	1cbb      	adds	r3, r7, #2
 8000d1a:	781a      	ldrb	r2, [r3, #0]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	0011      	movs	r1, r2
 8000d20:	0018      	movs	r0, r3
 8000d22:	f7ff fb73 	bl	800040c <_LEDtransition>
}
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	b005      	add	sp, #20
 8000d2c:	bd90      	pop	{r4, r7, pc}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	0000270f 	.word	0x0000270f

08000d34 <LEDstr>:
 * @param transition type
 *
 * @retval None
 */
void LEDstr(LEDdisplayTypeDef *LEDdisplay, uint8_t offset, char *str,
		uint8_t transition) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	0008      	movs	r0, r1
 8000d3e:	607a      	str	r2, [r7, #4]
 8000d40:	0019      	movs	r1, r3
 8000d42:	230b      	movs	r3, #11
 8000d44:	18fb      	adds	r3, r7, r3
 8000d46:	1c02      	adds	r2, r0, #0
 8000d48:	701a      	strb	r2, [r3, #0]
 8000d4a:	230a      	movs	r3, #10
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	1c0a      	adds	r2, r1, #0
 8000d50:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < sizeof(str); i++) {
 8000d52:	2317      	movs	r3, #23
 8000d54:	18fb      	adds	r3, r7, r3
 8000d56:	2200      	movs	r2, #0
 8000d58:	701a      	strb	r2, [r3, #0]
 8000d5a:	e02f      	b.n	8000dbc <LEDstr+0x88>

		if (transition == LED_TRANSITION_DISABLED) {
 8000d5c:	230a      	movs	r3, #10
 8000d5e:	18fb      	adds	r3, r7, r3
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d10e      	bne.n	8000d84 <LEDstr+0x50>
			LEDdisplay->digitBuffer[i] = str[i];
 8000d66:	2117      	movs	r1, #23
 8000d68:	187b      	adds	r3, r7, r1
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	18d2      	adds	r2, r2, r3
 8000d70:	187b      	adds	r3, r7, r1
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	7810      	ldrb	r0, [r2, #0]
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	2160      	movs	r1, #96	; 0x60
 8000d7a:	18d3      	adds	r3, r2, r3
 8000d7c:	185b      	adds	r3, r3, r1
 8000d7e:	1c02      	adds	r2, r0, #0
 8000d80:	701a      	strb	r2, [r3, #0]
 8000d82:	e015      	b.n	8000db0 <LEDstr+0x7c>
		} else {
			LEDdisplay->digitTransitionBuffer[i] = str[i];
 8000d84:	2117      	movs	r1, #23
 8000d86:	187b      	adds	r3, r7, r1
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	18d2      	adds	r2, r2, r3
 8000d8e:	187b      	adds	r3, r7, r1
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	7810      	ldrb	r0, [r2, #0]
 8000d94:	68fa      	ldr	r2, [r7, #12]
 8000d96:	2170      	movs	r1, #112	; 0x70
 8000d98:	18d3      	adds	r3, r2, r3
 8000d9a:	185b      	adds	r3, r3, r1
 8000d9c:	1c02      	adds	r2, r0, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
			_LEDtransition(LEDdisplay, transition);
 8000da0:	230a      	movs	r3, #10
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	781a      	ldrb	r2, [r3, #0]
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	0011      	movs	r1, r2
 8000daa:	0018      	movs	r0, r3
 8000dac:	f7ff fb2e 	bl	800040c <_LEDtransition>
	for (uint8_t i = 0; i < sizeof(str); i++) {
 8000db0:	2117      	movs	r1, #23
 8000db2:	187b      	adds	r3, r7, r1
 8000db4:	781a      	ldrb	r2, [r3, #0]
 8000db6:	187b      	adds	r3, r7, r1
 8000db8:	3201      	adds	r2, #1
 8000dba:	701a      	strb	r2, [r3, #0]
 8000dbc:	2317      	movs	r3, #23
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b03      	cmp	r3, #3
 8000dc4:	d9ca      	bls.n	8000d5c <LEDstr+0x28>
		}

	}
}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	46c0      	nop			; (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b006      	add	sp, #24
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <LEDdot>:
 *
 * @param transition type
 *
 * @retval None
 */
void LEDdot(LEDdisplayTypeDef *LEDdisplay, uint8_t dotNum, uint8_t active) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	0008      	movs	r0, r1
 8000dda:	0011      	movs	r1, r2
 8000ddc:	1cfb      	adds	r3, r7, #3
 8000dde:	1c02      	adds	r2, r0, #0
 8000de0:	701a      	strb	r2, [r3, #0]
 8000de2:	1cbb      	adds	r3, r7, #2
 8000de4:	1c0a      	adds	r2, r1, #0
 8000de6:	701a      	strb	r2, [r3, #0]
	if (active == DOT_ACTIVE)
 8000de8:	1cbb      	adds	r3, r7, #2
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d108      	bne.n	8000e02 <LEDdot+0x32>
		LEDdisplay->dotBuffer[dotNum] = 1;
 8000df0:	1cfb      	adds	r3, r7, #3
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	2164      	movs	r1, #100	; 0x64
 8000df8:	18d3      	adds	r3, r2, r3
 8000dfa:	185b      	adds	r3, r3, r1
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	701a      	strb	r2, [r3, #0]
	else if (active == DOT_INACTIVE)
		LEDdisplay->dotBuffer[dotNum] = 0;
}
 8000e00:	e00b      	b.n	8000e1a <LEDdot+0x4a>
	else if (active == DOT_INACTIVE)
 8000e02:	1cbb      	adds	r3, r7, #2
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d107      	bne.n	8000e1a <LEDdot+0x4a>
		LEDdisplay->dotBuffer[dotNum] = 0;
 8000e0a:	1cfb      	adds	r3, r7, #3
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	2164      	movs	r1, #100	; 0x64
 8000e12:	18d3      	adds	r3, r2, r3
 8000e14:	185b      	adds	r3, r3, r1
 8000e16:	2200      	movs	r2, #0
 8000e18:	701a      	strb	r2, [r3, #0]
}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	b002      	add	sp, #8
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e2a:	f000 fb9f 	bl	800156c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e2e:	f000 f91d 	bl	800106c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e32:	f000 f9bf 	bl	80011b4 <MX_GPIO_Init>
	MX_TIM1_Init();
 8000e36:	f000 f961 	bl	80010fc <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 8000e3a:	4b83      	ldr	r3, [pc, #524]	; (8001048 <main+0x224>)
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f001 fc3d 	bl	80026bc <HAL_TIM_Base_Start_IT>

	// LED DISPLAY- Pin assignment
	disp1.Field0Port = DISP_FIELD_0_GPIO_Port;
 8000e42:	4b82      	ldr	r3, [pc, #520]	; (800104c <main+0x228>)
 8000e44:	22a0      	movs	r2, #160	; 0xa0
 8000e46:	05d2      	lsls	r2, r2, #23
 8000e48:	645a      	str	r2, [r3, #68]	; 0x44
	disp1.Field0Pin = DISP_FIELD_0_Pin;
 8000e4a:	4b80      	ldr	r3, [pc, #512]	; (800104c <main+0x228>)
 8000e4c:	2240      	movs	r2, #64	; 0x40
 8000e4e:	2180      	movs	r1, #128	; 0x80
 8000e50:	0089      	lsls	r1, r1, #2
 8000e52:	5299      	strh	r1, [r3, r2]
	disp1.Field1Port = DISP_FIELD_1_GPIO_Port;
 8000e54:	4b7d      	ldr	r3, [pc, #500]	; (800104c <main+0x228>)
 8000e56:	22a0      	movs	r2, #160	; 0xa0
 8000e58:	05d2      	lsls	r2, r2, #23
 8000e5a:	64da      	str	r2, [r3, #76]	; 0x4c
	disp1.Field1Pin = DISP_FIELD_1_Pin;
 8000e5c:	4b7b      	ldr	r3, [pc, #492]	; (800104c <main+0x228>)
 8000e5e:	2248      	movs	r2, #72	; 0x48
 8000e60:	2180      	movs	r1, #128	; 0x80
 8000e62:	0109      	lsls	r1, r1, #4
 8000e64:	5299      	strh	r1, [r3, r2]
	disp1.Field2Port = DISP_FIELD_2_GPIO_Port;
 8000e66:	4b79      	ldr	r3, [pc, #484]	; (800104c <main+0x228>)
 8000e68:	22a0      	movs	r2, #160	; 0xa0
 8000e6a:	05d2      	lsls	r2, r2, #23
 8000e6c:	655a      	str	r2, [r3, #84]	; 0x54
	disp1.Field2Pin = DISP_FIELD_2_Pin;
 8000e6e:	4b77      	ldr	r3, [pc, #476]	; (800104c <main+0x228>)
 8000e70:	2250      	movs	r2, #80	; 0x50
 8000e72:	2180      	movs	r1, #128	; 0x80
 8000e74:	0149      	lsls	r1, r1, #5
 8000e76:	5299      	strh	r1, [r3, r2]
	disp1.Field3Port = DISP_FIELD_3_GPIO_Port;
 8000e78:	4b74      	ldr	r3, [pc, #464]	; (800104c <main+0x228>)
 8000e7a:	4a75      	ldr	r2, [pc, #468]	; (8001050 <main+0x22c>)
 8000e7c:	65da      	str	r2, [r3, #92]	; 0x5c
	disp1.Field3Pin = DISP_FIELD_3_Pin;
 8000e7e:	4b73      	ldr	r3, [pc, #460]	; (800104c <main+0x228>)
 8000e80:	2258      	movs	r2, #88	; 0x58
 8000e82:	2108      	movs	r1, #8
 8000e84:	5299      	strh	r1, [r3, r2]

	disp1.SegAPort = DISP_SEG_A_GPIO_Port;
 8000e86:	4b71      	ldr	r3, [pc, #452]	; (800104c <main+0x228>)
 8000e88:	4a72      	ldr	r2, [pc, #456]	; (8001054 <main+0x230>)
 8000e8a:	605a      	str	r2, [r3, #4]
	disp1.SegAPin = DISP_SEG_A_Pin;
 8000e8c:	4b6f      	ldr	r3, [pc, #444]	; (800104c <main+0x228>)
 8000e8e:	2240      	movs	r2, #64	; 0x40
 8000e90:	801a      	strh	r2, [r3, #0]
	disp1.SegBPort = DISP_SEG_B_GPIO_Port;
 8000e92:	4b6e      	ldr	r3, [pc, #440]	; (800104c <main+0x228>)
 8000e94:	22a0      	movs	r2, #160	; 0xa0
 8000e96:	05d2      	lsls	r2, r2, #23
 8000e98:	60da      	str	r2, [r3, #12]
	disp1.SegBPin = DISP_SEG_B_Pin;
 8000e9a:	4b6c      	ldr	r3, [pc, #432]	; (800104c <main+0x228>)
 8000e9c:	4a6e      	ldr	r2, [pc, #440]	; (8001058 <main+0x234>)
 8000e9e:	811a      	strh	r2, [r3, #8]
	disp1.SegCPort = DISP_SEG_C_GPIO_Port;
 8000ea0:	4b6a      	ldr	r3, [pc, #424]	; (800104c <main+0x228>)
 8000ea2:	4a6b      	ldr	r2, [pc, #428]	; (8001050 <main+0x22c>)
 8000ea4:	615a      	str	r2, [r3, #20]
	disp1.SegCPin = DISP_SEG_C_Pin;
 8000ea6:	4b69      	ldr	r3, [pc, #420]	; (800104c <main+0x228>)
 8000ea8:	2220      	movs	r2, #32
 8000eaa:	821a      	strh	r2, [r3, #16]
	disp1.SegDPort = DISP_SEG_D_GPIO_Port;
 8000eac:	4b67      	ldr	r3, [pc, #412]	; (800104c <main+0x228>)
 8000eae:	4a68      	ldr	r2, [pc, #416]	; (8001050 <main+0x22c>)
 8000eb0:	61da      	str	r2, [r3, #28]
	disp1.SegDPin = DISP_SEG_D_Pin;
 8000eb2:	4b66      	ldr	r3, [pc, #408]	; (800104c <main+0x228>)
 8000eb4:	2280      	movs	r2, #128	; 0x80
 8000eb6:	831a      	strh	r2, [r3, #24]
	disp1.SegEPort = DISP_SEG_E_GPIO_Port;
 8000eb8:	4b64      	ldr	r3, [pc, #400]	; (800104c <main+0x228>)
 8000eba:	4a65      	ldr	r2, [pc, #404]	; (8001050 <main+0x22c>)
 8000ebc:	625a      	str	r2, [r3, #36]	; 0x24
	disp1.SegEPin = DISP_SEG_E_Pin;
 8000ebe:	4b63      	ldr	r3, [pc, #396]	; (800104c <main+0x228>)
 8000ec0:	2280      	movs	r2, #128	; 0x80
 8000ec2:	0052      	lsls	r2, r2, #1
 8000ec4:	841a      	strh	r2, [r3, #32]
	disp1.SegFPort = DISP_SEG_F_GPIO_Port;
 8000ec6:	4b61      	ldr	r3, [pc, #388]	; (800104c <main+0x228>)
 8000ec8:	22a0      	movs	r2, #160	; 0xa0
 8000eca:	05d2      	lsls	r2, r2, #23
 8000ecc:	62da      	str	r2, [r3, #44]	; 0x2c
	disp1.SegFPin = DISP_SEG_F_Pin;
 8000ece:	4b5f      	ldr	r3, [pc, #380]	; (800104c <main+0x228>)
 8000ed0:	2280      	movs	r2, #128	; 0x80
 8000ed2:	00d2      	lsls	r2, r2, #3
 8000ed4:	851a      	strh	r2, [r3, #40]	; 0x28
	disp1.SegGPort = DISP_SEG_G_GPIO_Port;
 8000ed6:	4b5d      	ldr	r3, [pc, #372]	; (800104c <main+0x228>)
 8000ed8:	4a5d      	ldr	r2, [pc, #372]	; (8001050 <main+0x22c>)
 8000eda:	635a      	str	r2, [r3, #52]	; 0x34
	disp1.SegGPin = DISP_SEG_G_Pin;
 8000edc:	4b5b      	ldr	r3, [pc, #364]	; (800104c <main+0x228>)
 8000ede:	2210      	movs	r2, #16
 8000ee0:	861a      	strh	r2, [r3, #48]	; 0x30
	disp1.SegDOTPort = DISP_SEG_DOT_GPIO_Port;
 8000ee2:	4b5a      	ldr	r3, [pc, #360]	; (800104c <main+0x228>)
 8000ee4:	4a5a      	ldr	r2, [pc, #360]	; (8001050 <main+0x22c>)
 8000ee6:	63da      	str	r2, [r3, #60]	; 0x3c
	disp1.SegDOTPin = DISP_SEG_DOT_Pin;
 8000ee8:	4b58      	ldr	r3, [pc, #352]	; (800104c <main+0x228>)
 8000eea:	2240      	movs	r2, #64	; 0x40
 8000eec:	871a      	strh	r2, [r3, #56]	; 0x38

	//set transition separator
	disp1.transitionSeparator[0] = '_';
 8000eee:	4b57      	ldr	r3, [pc, #348]	; (800104c <main+0x228>)
 8000ef0:	226b      	movs	r2, #107	; 0x6b
 8000ef2:	215f      	movs	r1, #95	; 0x5f
 8000ef4:	5499      	strb	r1, [r3, r2]
	disp1.transitionSeparator[1] = '_';
 8000ef6:	4b55      	ldr	r3, [pc, #340]	; (800104c <main+0x228>)
 8000ef8:	226c      	movs	r2, #108	; 0x6c
 8000efa:	215f      	movs	r1, #95	; 0x5f
 8000efc:	5499      	strb	r1, [r3, r2]
	disp1.transitionSeparator[2] = '_';
 8000efe:	4b53      	ldr	r3, [pc, #332]	; (800104c <main+0x228>)
 8000f00:	226d      	movs	r2, #109	; 0x6d
 8000f02:	215f      	movs	r1, #95	; 0x5f
 8000f04:	5499      	strb	r1, [r3, r2]

	LEDinit(&disp1);
 8000f06:	4b51      	ldr	r3, [pc, #324]	; (800104c <main+0x228>)
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f7ff fe65 	bl	8000bd8 <LEDinit>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		LEDchar(&disp1, 0, 'H');
 8000f0e:	4b4f      	ldr	r3, [pc, #316]	; (800104c <main+0x228>)
 8000f10:	2248      	movs	r2, #72	; 0x48
 8000f12:	2100      	movs	r1, #0
 8000f14:	0018      	movs	r0, r3
 8000f16:	f7ff fe85 	bl	8000c24 <LEDchar>
		LEDchar(&disp1, 1, 'A');
 8000f1a:	4b4c      	ldr	r3, [pc, #304]	; (800104c <main+0x228>)
 8000f1c:	2241      	movs	r2, #65	; 0x41
 8000f1e:	2101      	movs	r1, #1
 8000f20:	0018      	movs	r0, r3
 8000f22:	f7ff fe7f 	bl	8000c24 <LEDchar>
		LEDchar(&disp1, 2, 'L');
 8000f26:	4b49      	ldr	r3, [pc, #292]	; (800104c <main+0x228>)
 8000f28:	224c      	movs	r2, #76	; 0x4c
 8000f2a:	2102      	movs	r1, #2
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f7ff fe79 	bl	8000c24 <LEDchar>
		HAL_Delay(300);
 8000f32:	2396      	movs	r3, #150	; 0x96
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	0018      	movs	r0, r3
 8000f38:	f000 fb9e 	bl	8001678 <HAL_Delay>
		LEDclear(&disp1);
 8000f3c:	4b43      	ldr	r3, [pc, #268]	; (800104c <main+0x228>)
 8000f3e:	0018      	movs	r0, r3
 8000f40:	f7ff fe5a 	bl	8000bf8 <LEDclear>

		LEDdot(&disp1, 0, DOT_ACTIVE);
 8000f44:	4b41      	ldr	r3, [pc, #260]	; (800104c <main+0x228>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	2100      	movs	r1, #0
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f7ff ff40 	bl	8000dd0 <LEDdot>
		HAL_Delay(300);
 8000f50:	2396      	movs	r3, #150	; 0x96
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	0018      	movs	r0, r3
 8000f56:	f000 fb8f 	bl	8001678 <HAL_Delay>
		LEDdot(&disp1, 1, DOT_ACTIVE);
 8000f5a:	4b3c      	ldr	r3, [pc, #240]	; (800104c <main+0x228>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	2101      	movs	r1, #1
 8000f60:	0018      	movs	r0, r3
 8000f62:	f7ff ff35 	bl	8000dd0 <LEDdot>
		HAL_Delay(300);
 8000f66:	2396      	movs	r3, #150	; 0x96
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f000 fb84 	bl	8001678 <HAL_Delay>
		LEDdot(&disp1, 2, DOT_ACTIVE);
 8000f70:	4b36      	ldr	r3, [pc, #216]	; (800104c <main+0x228>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	2102      	movs	r1, #2
 8000f76:	0018      	movs	r0, r3
 8000f78:	f7ff ff2a 	bl	8000dd0 <LEDdot>
		HAL_Delay(300);
 8000f7c:	2396      	movs	r3, #150	; 0x96
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	0018      	movs	r0, r3
 8000f82:	f000 fb79 	bl	8001678 <HAL_Delay>
		LEDdot(&disp1, 3, DOT_ACTIVE);
 8000f86:	4b31      	ldr	r3, [pc, #196]	; (800104c <main+0x228>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2103      	movs	r1, #3
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f7ff ff1f 	bl	8000dd0 <LEDdot>
		HAL_Delay(300);
 8000f92:	2396      	movs	r3, #150	; 0x96
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	0018      	movs	r0, r3
 8000f98:	f000 fb6e 	bl	8001678 <HAL_Delay>
		LEDclear(&disp1);
 8000f9c:	4b2b      	ldr	r3, [pc, #172]	; (800104c <main+0x228>)
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f7ff fe2a 	bl	8000bf8 <LEDclear>

		for (uint16_t i = 9000; i < 10000; i++) {
 8000fa4:	1dbb      	adds	r3, r7, #6
 8000fa6:	4a2d      	ldr	r2, [pc, #180]	; (800105c <main+0x238>)
 8000fa8:	801a      	strh	r2, [r3, #0]
 8000faa:	e012      	b.n	8000fd2 <main+0x1ae>
			LEDclear(&disp1);
 8000fac:	4b27      	ldr	r3, [pc, #156]	; (800104c <main+0x228>)
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f7ff fe22 	bl	8000bf8 <LEDclear>
			LEDint(&disp1, 0, i, LED_TRANSITION_DISABLED);
 8000fb4:	1dbb      	adds	r3, r7, #6
 8000fb6:	881a      	ldrh	r2, [r3, #0]
 8000fb8:	4824      	ldr	r0, [pc, #144]	; (800104c <main+0x228>)
 8000fba:	2300      	movs	r3, #0
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	f7ff fe4b 	bl	8000c58 <LEDint>
			HAL_Delay(1);
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f000 fb58 	bl	8001678 <HAL_Delay>
		for (uint16_t i = 9000; i < 10000; i++) {
 8000fc8:	1dbb      	adds	r3, r7, #6
 8000fca:	881a      	ldrh	r2, [r3, #0]
 8000fcc:	1dbb      	adds	r3, r7, #6
 8000fce:	3201      	adds	r2, #1
 8000fd0:	801a      	strh	r2, [r3, #0]
 8000fd2:	1dbb      	adds	r3, r7, #6
 8000fd4:	881b      	ldrh	r3, [r3, #0]
 8000fd6:	4a22      	ldr	r2, [pc, #136]	; (8001060 <main+0x23c>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d9e7      	bls.n	8000fac <main+0x188>
		}
		LEDclear(&disp1);
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	; (800104c <main+0x228>)
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f7ff fe0a 	bl	8000bf8 <LEDclear>

		LEDstr(&disp1, 0, "Err", LED_TRANSITION_DIR_LEFT);
 8000fe4:	4a1f      	ldr	r2, [pc, #124]	; (8001064 <main+0x240>)
 8000fe6:	4819      	ldr	r0, [pc, #100]	; (800104c <main+0x228>)
 8000fe8:	2301      	movs	r3, #1
 8000fea:	2100      	movs	r1, #0
 8000fec:	f7ff fea2 	bl	8000d34 <LEDstr>
		HAL_Delay(500);
 8000ff0:	23fa      	movs	r3, #250	; 0xfa
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f000 fb3f 	bl	8001678 <HAL_Delay>
		LEDstr(&disp1, 0, "LEd", LED_TRANSITION_DIR_RIGHT);
 8000ffa:	4a1b      	ldr	r2, [pc, #108]	; (8001068 <main+0x244>)
 8000ffc:	4813      	ldr	r0, [pc, #76]	; (800104c <main+0x228>)
 8000ffe:	2302      	movs	r3, #2
 8001000:	2100      	movs	r1, #0
 8001002:	f7ff fe97 	bl	8000d34 <LEDstr>
		HAL_Delay(500);
 8001006:	23fa      	movs	r3, #250	; 0xfa
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	0018      	movs	r0, r3
 800100c:	f000 fb34 	bl	8001678 <HAL_Delay>

		LEDstr(&disp1, 0, "Err", LED_TRANSITION_DIR_LEFT);
 8001010:	4a14      	ldr	r2, [pc, #80]	; (8001064 <main+0x240>)
 8001012:	480e      	ldr	r0, [pc, #56]	; (800104c <main+0x228>)
 8001014:	2301      	movs	r3, #1
 8001016:	2100      	movs	r1, #0
 8001018:	f7ff fe8c 	bl	8000d34 <LEDstr>
		HAL_Delay(500);
 800101c:	23fa      	movs	r3, #250	; 0xfa
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	0018      	movs	r0, r3
 8001022:	f000 fb29 	bl	8001678 <HAL_Delay>
		LEDstr(&disp1, 0, "LEd", LED_TRANSITION_DIR_RIGHT);
 8001026:	4a10      	ldr	r2, [pc, #64]	; (8001068 <main+0x244>)
 8001028:	4808      	ldr	r0, [pc, #32]	; (800104c <main+0x228>)
 800102a:	2302      	movs	r3, #2
 800102c:	2100      	movs	r1, #0
 800102e:	f7ff fe81 	bl	8000d34 <LEDstr>
		HAL_Delay(500);
 8001032:	23fa      	movs	r3, #250	; 0xfa
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	0018      	movs	r0, r3
 8001038:	f000 fb1e 	bl	8001678 <HAL_Delay>

		LEDclear(&disp1);
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <main+0x228>)
 800103e:	0018      	movs	r0, r3
 8001040:	f7ff fdda 	bl	8000bf8 <LEDclear>
		LEDchar(&disp1, 0, 'H');
 8001044:	e763      	b.n	8000f0e <main+0xea>
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	200000a4 	.word	0x200000a4
 800104c:	20000030 	.word	0x20000030
 8001050:	50000400 	.word	0x50000400
 8001054:	50000800 	.word	0x50000800
 8001058:	ffff8000 	.word	0xffff8000
 800105c:	00002328 	.word	0x00002328
 8001060:	0000270f 	.word	0x0000270f
 8001064:	08002ff0 	.word	0x08002ff0
 8001068:	08002ff4 	.word	0x08002ff4

0800106c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800106c:	b590      	push	{r4, r7, lr}
 800106e:	b093      	sub	sp, #76	; 0x4c
 8001070:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001072:	2414      	movs	r4, #20
 8001074:	193b      	adds	r3, r7, r4
 8001076:	0018      	movs	r0, r3
 8001078:	2334      	movs	r3, #52	; 0x34
 800107a:	001a      	movs	r2, r3
 800107c:	2100      	movs	r1, #0
 800107e:	f001 ff6c 	bl	8002f5a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	0018      	movs	r0, r3
 8001086:	2310      	movs	r3, #16
 8001088:	001a      	movs	r2, r3
 800108a:	2100      	movs	r1, #0
 800108c:	f001 ff65 	bl	8002f5a <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001090:	2380      	movs	r3, #128	; 0x80
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	0018      	movs	r0, r3
 8001096:	f000 fdd9 	bl	8001c4c <HAL_PWREx_ControlVoltageScaling>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800109a:	193b      	adds	r3, r7, r4
 800109c:	2202      	movs	r2, #2
 800109e:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a0:	193b      	adds	r3, r7, r4
 80010a2:	2280      	movs	r2, #128	; 0x80
 80010a4:	0052      	lsls	r2, r2, #1
 80010a6:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80010a8:	193b      	adds	r3, r7, r4
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ae:	193b      	adds	r3, r7, r4
 80010b0:	2240      	movs	r2, #64	; 0x40
 80010b2:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010b4:	193b      	adds	r3, r7, r4
 80010b6:	2200      	movs	r2, #0
 80010b8:	61da      	str	r2, [r3, #28]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80010ba:	193b      	adds	r3, r7, r4
 80010bc:	0018      	movs	r0, r3
 80010be:	f000 fe05 	bl	8001ccc <HAL_RCC_OscConfig>
 80010c2:	1e03      	subs	r3, r0, #0
 80010c4:	d001      	beq.n	80010ca <SystemClock_Config+0x5e>
		Error_Handler();
 80010c6:	f000 f989 	bl	80013dc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	2207      	movs	r2, #7
 80010ce:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	2200      	movs	r2, #0
 80010d4:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	2100      	movs	r1, #0
 80010e6:	0018      	movs	r0, r3
 80010e8:	f001 f906 	bl	80022f8 <HAL_RCC_ClockConfig>
 80010ec:	1e03      	subs	r3, r0, #0
 80010ee:	d001      	beq.n	80010f4 <SystemClock_Config+0x88>
		Error_Handler();
 80010f0:	f000 f974 	bl	80013dc <Error_Handler>
	}
}
 80010f4:	46c0      	nop			; (mov r8, r8)
 80010f6:	46bd      	mov	sp, r7
 80010f8:	b013      	add	sp, #76	; 0x4c
 80010fa:	bd90      	pop	{r4, r7, pc}

080010fc <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001102:	2310      	movs	r3, #16
 8001104:	18fb      	adds	r3, r7, r3
 8001106:	0018      	movs	r0, r3
 8001108:	2310      	movs	r3, #16
 800110a:	001a      	movs	r2, r3
 800110c:	2100      	movs	r1, #0
 800110e:	f001 ff24 	bl	8002f5a <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	0018      	movs	r0, r3
 8001116:	230c      	movs	r3, #12
 8001118:	001a      	movs	r2, r3
 800111a:	2100      	movs	r1, #0
 800111c:	f001 ff1d 	bl	8002f5a <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001120:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <MX_TIM1_Init+0xac>)
 8001122:	4a22      	ldr	r2, [pc, #136]	; (80011ac <MX_TIM1_Init+0xb0>)
 8001124:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 40;
 8001126:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <MX_TIM1_Init+0xac>)
 8001128:	2228      	movs	r2, #40	; 0x28
 800112a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112c:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <MX_TIM1_Init+0xac>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1999;
 8001132:	4b1d      	ldr	r3, [pc, #116]	; (80011a8 <MX_TIM1_Init+0xac>)
 8001134:	4a1e      	ldr	r2, [pc, #120]	; (80011b0 <MX_TIM1_Init+0xb4>)
 8001136:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001138:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <MX_TIM1_Init+0xac>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800113e:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <MX_TIM1_Init+0xac>)
 8001140:	2200      	movs	r2, #0
 8001142:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001144:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <MX_TIM1_Init+0xac>)
 8001146:	2200      	movs	r2, #0
 8001148:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800114a:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <MX_TIM1_Init+0xac>)
 800114c:	0018      	movs	r0, r3
 800114e:	f001 fa5d 	bl	800260c <HAL_TIM_Base_Init>
 8001152:	1e03      	subs	r3, r0, #0
 8001154:	d001      	beq.n	800115a <MX_TIM1_Init+0x5e>
		Error_Handler();
 8001156:	f000 f941 	bl	80013dc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800115a:	2110      	movs	r1, #16
 800115c:	187b      	adds	r3, r7, r1
 800115e:	2280      	movs	r2, #128	; 0x80
 8001160:	0152      	lsls	r2, r2, #5
 8001162:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001164:	187a      	adds	r2, r7, r1
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <MX_TIM1_Init+0xac>)
 8001168:	0011      	movs	r1, r2
 800116a:	0018      	movs	r0, r3
 800116c:	f001 fc2e 	bl	80029cc <HAL_TIM_ConfigClockSource>
 8001170:	1e03      	subs	r3, r0, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM1_Init+0x7c>
		Error_Handler();
 8001174:	f000 f932 	bl	80013dc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	2200      	movs	r2, #0
 8001182:	605a      	str	r2, [r3, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800118a:	1d3a      	adds	r2, r7, #4
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <MX_TIM1_Init+0xac>)
 800118e:	0011      	movs	r1, r2
 8001190:	0018      	movs	r0, r3
 8001192:	f001 fe19 	bl	8002dc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001196:	1e03      	subs	r3, r0, #0
 8001198:	d001      	beq.n	800119e <MX_TIM1_Init+0xa2>
			!= HAL_OK) {
		Error_Handler();
 800119a:	f000 f91f 	bl	80013dc <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	46bd      	mov	sp, r7
 80011a2:	b008      	add	sp, #32
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	200000a4 	.word	0x200000a4
 80011ac:	40012c00 	.word	0x40012c00
 80011b0:	000007cf 	.word	0x000007cf

080011b4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80011b4:	b590      	push	{r4, r7, lr}
 80011b6:	b089      	sub	sp, #36	; 0x24
 80011b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80011ba:	240c      	movs	r4, #12
 80011bc:	193b      	adds	r3, r7, r4
 80011be:	0018      	movs	r0, r3
 80011c0:	2314      	movs	r3, #20
 80011c2:	001a      	movs	r2, r3
 80011c4:	2100      	movs	r1, #0
 80011c6:	f001 fec8 	bl	8002f5a <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80011ca:	4b51      	ldr	r3, [pc, #324]	; (8001310 <MX_GPIO_Init+0x15c>)
 80011cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011ce:	4b50      	ldr	r3, [pc, #320]	; (8001310 <MX_GPIO_Init+0x15c>)
 80011d0:	2102      	movs	r1, #2
 80011d2:	430a      	orrs	r2, r1
 80011d4:	635a      	str	r2, [r3, #52]	; 0x34
 80011d6:	4b4e      	ldr	r3, [pc, #312]	; (8001310 <MX_GPIO_Init+0x15c>)
 80011d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011da:	2202      	movs	r2, #2
 80011dc:	4013      	ands	r3, r2
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	4b4b      	ldr	r3, [pc, #300]	; (8001310 <MX_GPIO_Init+0x15c>)
 80011e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011e6:	4b4a      	ldr	r3, [pc, #296]	; (8001310 <MX_GPIO_Init+0x15c>)
 80011e8:	2101      	movs	r1, #1
 80011ea:	430a      	orrs	r2, r1
 80011ec:	635a      	str	r2, [r3, #52]	; 0x34
 80011ee:	4b48      	ldr	r3, [pc, #288]	; (8001310 <MX_GPIO_Init+0x15c>)
 80011f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011f2:	2201      	movs	r2, #1
 80011f4:	4013      	ands	r3, r2
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80011fa:	4b45      	ldr	r3, [pc, #276]	; (8001310 <MX_GPIO_Init+0x15c>)
 80011fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011fe:	4b44      	ldr	r3, [pc, #272]	; (8001310 <MX_GPIO_Init+0x15c>)
 8001200:	2104      	movs	r1, #4
 8001202:	430a      	orrs	r2, r1
 8001204:	635a      	str	r2, [r3, #52]	; 0x34
 8001206:	4b42      	ldr	r3, [pc, #264]	; (8001310 <MX_GPIO_Init+0x15c>)
 8001208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800120a:	2204      	movs	r2, #4
 800120c:	4013      	ands	r3, r2
 800120e:	603b      	str	r3, [r7, #0]
 8001210:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8001212:	23fe      	movs	r3, #254	; 0xfe
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	483f      	ldr	r0, [pc, #252]	; (8001314 <MX_GPIO_Init+0x160>)
 8001218:	2200      	movs	r2, #0
 800121a:	0019      	movs	r1, r3
 800121c:	f000 fcc5 	bl	8001baa <HAL_GPIO_WritePin>
			LED_GREEN_Pin | DISP_FIELD_3_Pin | DISP_SEG_G_Pin | DISP_SEG_C_Pin
					| DISP_SEG_DOT_Pin | DISP_SEG_D_Pin | DISP_SEG_E_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8001220:	239e      	movs	r3, #158	; 0x9e
 8001222:	0219      	lsls	r1, r3, #8
 8001224:	23a0      	movs	r3, #160	; 0xa0
 8001226:	05db      	lsls	r3, r3, #23
 8001228:	2200      	movs	r2, #0
 800122a:	0018      	movs	r0, r3
 800122c:	f000 fcbd 	bl	8001baa <HAL_GPIO_WritePin>
			DISP_FIELD_0_Pin | DISP_SEG_F_Pin | DISP_FIELD_1_Pin
					| DISP_FIELD_2_Pin | DISP_SEG_B_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DISP_SEG_A_GPIO_Port, DISP_SEG_A_Pin, GPIO_PIN_RESET);
 8001230:	4b39      	ldr	r3, [pc, #228]	; (8001318 <MX_GPIO_Init+0x164>)
 8001232:	2200      	movs	r2, #0
 8001234:	2140      	movs	r1, #64	; 0x40
 8001236:	0018      	movs	r0, r3
 8001238:	f000 fcb7 	bl	8001baa <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LED_GREEN_Pin DISP_FIELD_3_Pin DISP_SEG_G_Pin DISP_SEG_C_Pin
	 DISP_SEG_DOT_Pin DISP_SEG_D_Pin DISP_SEG_E_Pin */
	GPIO_InitStruct.Pin = LED_GREEN_Pin | DISP_FIELD_3_Pin | DISP_SEG_G_Pin
 800123c:	193b      	adds	r3, r7, r4
 800123e:	22fe      	movs	r2, #254	; 0xfe
 8001240:	0092      	lsls	r2, r2, #2
 8001242:	601a      	str	r2, [r3, #0]
			| DISP_SEG_C_Pin | DISP_SEG_DOT_Pin | DISP_SEG_D_Pin
			| DISP_SEG_E_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001244:	193b      	adds	r3, r7, r4
 8001246:	2201      	movs	r2, #1
 8001248:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	193b      	adds	r3, r7, r4
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	193b      	adds	r3, r7, r4
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001256:	193b      	adds	r3, r7, r4
 8001258:	4a2e      	ldr	r2, [pc, #184]	; (8001314 <MX_GPIO_Init+0x160>)
 800125a:	0019      	movs	r1, r3
 800125c:	0010      	movs	r0, r2
 800125e:	f000 fb23 	bl	80018a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : BUTTON_Pin */
	GPIO_InitStruct.Pin = BUTTON_Pin;
 8001262:	193b      	adds	r3, r7, r4
 8001264:	2210      	movs	r2, #16
 8001266:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001268:	193b      	adds	r3, r7, r4
 800126a:	2200      	movs	r2, #0
 800126c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800126e:	193b      	adds	r3, r7, r4
 8001270:	2201      	movs	r2, #1
 8001272:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001274:	193a      	adds	r2, r7, r4
 8001276:	23a0      	movs	r3, #160	; 0xa0
 8001278:	05db      	lsls	r3, r3, #23
 800127a:	0011      	movs	r1, r2
 800127c:	0018      	movs	r0, r3
 800127e:	f000 fb13 	bl	80018a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : ENC_L_Pin ENC_R_Pin */
	GPIO_InitStruct.Pin = ENC_L_Pin | ENC_R_Pin;
 8001282:	193b      	adds	r3, r7, r4
 8001284:	2260      	movs	r2, #96	; 0x60
 8001286:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001288:	193b      	adds	r3, r7, r4
 800128a:	2288      	movs	r2, #136	; 0x88
 800128c:	0352      	lsls	r2, r2, #13
 800128e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001290:	193b      	adds	r3, r7, r4
 8001292:	2201      	movs	r2, #1
 8001294:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001296:	193a      	adds	r2, r7, r4
 8001298:	23a0      	movs	r3, #160	; 0xa0
 800129a:	05db      	lsls	r3, r3, #23
 800129c:	0011      	movs	r1, r2
 800129e:	0018      	movs	r0, r3
 80012a0:	f000 fb02 	bl	80018a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : DISP_FIELD_0_Pin DISP_SEG_F_Pin DISP_FIELD_1_Pin DISP_FIELD_2_Pin
	 DISP_SEG_B_Pin */
	GPIO_InitStruct.Pin = DISP_FIELD_0_Pin | DISP_SEG_F_Pin | DISP_FIELD_1_Pin
 80012a4:	0021      	movs	r1, r4
 80012a6:	187b      	adds	r3, r7, r1
 80012a8:	229e      	movs	r2, #158	; 0x9e
 80012aa:	0212      	lsls	r2, r2, #8
 80012ac:	601a      	str	r2, [r3, #0]
			| DISP_FIELD_2_Pin | DISP_SEG_B_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ae:	000c      	movs	r4, r1
 80012b0:	193b      	adds	r3, r7, r4
 80012b2:	2201      	movs	r2, #1
 80012b4:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	193b      	adds	r3, r7, r4
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	193b      	adds	r3, r7, r4
 80012be:	2200      	movs	r2, #0
 80012c0:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c2:	193a      	adds	r2, r7, r4
 80012c4:	23a0      	movs	r3, #160	; 0xa0
 80012c6:	05db      	lsls	r3, r3, #23
 80012c8:	0011      	movs	r1, r2
 80012ca:	0018      	movs	r0, r3
 80012cc:	f000 faec 	bl	80018a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : DISP_SEG_A_Pin */
	GPIO_InitStruct.Pin = DISP_SEG_A_Pin;
 80012d0:	0021      	movs	r1, r4
 80012d2:	187b      	adds	r3, r7, r1
 80012d4:	2240      	movs	r2, #64	; 0x40
 80012d6:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d8:	187b      	adds	r3, r7, r1
 80012da:	2201      	movs	r2, #1
 80012dc:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	187b      	adds	r3, r7, r1
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	187b      	adds	r3, r7, r1
 80012e6:	2200      	movs	r2, #0
 80012e8:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(DISP_SEG_A_GPIO_Port, &GPIO_InitStruct);
 80012ea:	187b      	adds	r3, r7, r1
 80012ec:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <MX_GPIO_Init+0x164>)
 80012ee:	0019      	movs	r1, r3
 80012f0:	0010      	movs	r0, r2
 80012f2:	f000 fad9 	bl	80018a8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	2007      	movs	r0, #7
 80012fc:	f000 faa2 	bl	8001844 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001300:	2007      	movs	r0, #7
 8001302:	f000 fab4 	bl	800186e <HAL_NVIC_EnableIRQ>

}
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	46bd      	mov	sp, r7
 800130a:	b009      	add	sp, #36	; 0x24
 800130c:	bd90      	pop	{r4, r7, pc}
 800130e:	46c0      	nop			; (mov r8, r8)
 8001310:	40021000 	.word	0x40021000
 8001314:	50000400 	.word	0x50000400
 8001318:	50000800 	.word	0x50000800

0800131c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM1) {
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a05      	ldr	r2, [pc, #20]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d103      	bne.n	8001336 <HAL_TIM_PeriodElapsedCallback+0x1a>
		LEDmultiplexing(&disp1);
 800132e:	4b05      	ldr	r3, [pc, #20]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001330:	0018      	movs	r0, r3
 8001332:	f7fe ff71 	bl	8000218 <LEDmultiplexing>
//		LEDmultiplexing(&disp2);
	}

}
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	46bd      	mov	sp, r7
 800133a:	b002      	add	sp, #8
 800133c:	bd80      	pop	{r7, pc}
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	40012c00 	.word	0x40012c00
 8001344:	20000030 	.word	0x20000030

08001348 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8001348:	b590      	push	{r4, r7, lr}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	0002      	movs	r2, r0
 8001350:	1dbb      	adds	r3, r7, #6
 8001352:	801a      	strh	r2, [r3, #0]

	flagEncoderActive = 1;
 8001354:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <HAL_GPIO_EXTI_Rising_Callback+0x8c>)
 8001356:	2201      	movs	r2, #1
 8001358:	701a      	strb	r2, [r3, #0]
	if (GPIO_Pin == ENC_L_Pin) {
 800135a:	1dbb      	adds	r3, r7, #6
 800135c:	881b      	ldrh	r3, [r3, #0]
 800135e:	2b20      	cmp	r3, #32
 8001360:	d117      	bne.n	8001392 <HAL_GPIO_EXTI_Rising_Callback+0x4a>
		if (HAL_GPIO_ReadPin(ENC_R_GPIO_Port, ENC_R_Pin)
 8001362:	23a0      	movs	r3, #160	; 0xa0
 8001364:	05db      	lsls	r3, r3, #23
 8001366:	2140      	movs	r1, #64	; 0x40
 8001368:	0018      	movs	r0, r3
 800136a:	f000 fc01 	bl	8001b70 <HAL_GPIO_ReadPin>
 800136e:	0003      	movs	r3, r0
 8001370:	001c      	movs	r4, r3
				!= HAL_GPIO_ReadPin(ENC_L_GPIO_Port, ENC_L_Pin)) {
 8001372:	23a0      	movs	r3, #160	; 0xa0
 8001374:	05db      	lsls	r3, r3, #23
 8001376:	2120      	movs	r1, #32
 8001378:	0018      	movs	r0, r3
 800137a:	f000 fbf9 	bl	8001b70 <HAL_GPIO_ReadPin>
 800137e:	0003      	movs	r3, r0
		if (HAL_GPIO_ReadPin(ENC_R_GPIO_Port, ENC_R_Pin)
 8001380:	429c      	cmp	r4, r3
 8001382:	d006      	beq.n	8001392 <HAL_GPIO_EXTI_Rising_Callback+0x4a>

//			LEDstr(&disp1, 0, text1, LED_TRANSITION_DIR_LEFT);
			counter++;
 8001384:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <HAL_GPIO_EXTI_Rising_Callback+0x90>)
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	b29b      	uxth	r3, r3
 800138a:	3301      	adds	r3, #1
 800138c:	b29a      	uxth	r2, r3
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_GPIO_EXTI_Rising_Callback+0x90>)
 8001390:	801a      	strh	r2, [r3, #0]

		}
	}
	if (GPIO_Pin == ENC_R_Pin) {
 8001392:	1dbb      	adds	r3, r7, #6
 8001394:	881b      	ldrh	r3, [r3, #0]
 8001396:	2b40      	cmp	r3, #64	; 0x40
 8001398:	d117      	bne.n	80013ca <HAL_GPIO_EXTI_Rising_Callback+0x82>
		if (HAL_GPIO_ReadPin(ENC_R_GPIO_Port, ENC_R_Pin)
 800139a:	23a0      	movs	r3, #160	; 0xa0
 800139c:	05db      	lsls	r3, r3, #23
 800139e:	2140      	movs	r1, #64	; 0x40
 80013a0:	0018      	movs	r0, r3
 80013a2:	f000 fbe5 	bl	8001b70 <HAL_GPIO_ReadPin>
 80013a6:	0003      	movs	r3, r0
 80013a8:	001c      	movs	r4, r3
				!= HAL_GPIO_ReadPin(ENC_L_GPIO_Port, ENC_L_Pin)) {
 80013aa:	23a0      	movs	r3, #160	; 0xa0
 80013ac:	05db      	lsls	r3, r3, #23
 80013ae:	2120      	movs	r1, #32
 80013b0:	0018      	movs	r0, r3
 80013b2:	f000 fbdd 	bl	8001b70 <HAL_GPIO_ReadPin>
 80013b6:	0003      	movs	r3, r0
		if (HAL_GPIO_ReadPin(ENC_R_GPIO_Port, ENC_R_Pin)
 80013b8:	429c      	cmp	r4, r3
 80013ba:	d006      	beq.n	80013ca <HAL_GPIO_EXTI_Rising_Callback+0x82>

//			LEDstr(&disp1, 0, text2, LED_TRANSITION_DIR_RIGHT);
			counter--;
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_GPIO_EXTI_Rising_Callback+0x90>)
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	3b01      	subs	r3, #1
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <HAL_GPIO_EXTI_Rising_Callback+0x90>)
 80013c8:	801a      	strh	r2, [r3, #0]
		}
	}

}
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	46bd      	mov	sp, r7
 80013ce:	b003      	add	sp, #12
 80013d0:	bd90      	pop	{r4, r7, pc}
 80013d2:	46c0      	nop			; (mov r8, r8)
 80013d4:	2000002c 	.word	0x2000002c
 80013d8:	20000000 	.word	0x20000000

080013dc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e0:	b672      	cpsid	i
}
 80013e2:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80013e4:	e7fe      	b.n	80013e4 <Error_Handler+0x8>
	...

080013e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ee:	4b11      	ldr	r3, [pc, #68]	; (8001434 <HAL_MspInit+0x4c>)
 80013f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <HAL_MspInit+0x4c>)
 80013f4:	2101      	movs	r1, #1
 80013f6:	430a      	orrs	r2, r1
 80013f8:	641a      	str	r2, [r3, #64]	; 0x40
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <HAL_MspInit+0x4c>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	2201      	movs	r2, #1
 8001400:	4013      	ands	r3, r2
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <HAL_MspInit+0x4c>)
 8001408:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800140a:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <HAL_MspInit+0x4c>)
 800140c:	2180      	movs	r1, #128	; 0x80
 800140e:	0549      	lsls	r1, r1, #21
 8001410:	430a      	orrs	r2, r1
 8001412:	63da      	str	r2, [r3, #60]	; 0x3c
 8001414:	4b07      	ldr	r3, [pc, #28]	; (8001434 <HAL_MspInit+0x4c>)
 8001416:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001418:	2380      	movs	r3, #128	; 0x80
 800141a:	055b      	lsls	r3, r3, #21
 800141c:	4013      	ands	r3, r2
 800141e:	603b      	str	r3, [r7, #0]
 8001420:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8001422:	23c0      	movs	r3, #192	; 0xc0
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	0018      	movs	r0, r3
 8001428:	f000 f94a 	bl	80016c0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142c:	46c0      	nop			; (mov r8, r8)
 800142e:	46bd      	mov	sp, r7
 8001430:	b002      	add	sp, #8
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40021000 	.word	0x40021000

08001438 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a12      	ldr	r2, [pc, #72]	; (8001490 <HAL_TIM_Base_MspInit+0x58>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d11d      	bne.n	8001486 <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800144a:	4b12      	ldr	r3, [pc, #72]	; (8001494 <HAL_TIM_Base_MspInit+0x5c>)
 800144c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <HAL_TIM_Base_MspInit+0x5c>)
 8001450:	2180      	movs	r1, #128	; 0x80
 8001452:	0109      	lsls	r1, r1, #4
 8001454:	430a      	orrs	r2, r1
 8001456:	641a      	str	r2, [r3, #64]	; 0x40
 8001458:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <HAL_TIM_Base_MspInit+0x5c>)
 800145a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800145c:	2380      	movs	r3, #128	; 0x80
 800145e:	011b      	lsls	r3, r3, #4
 8001460:	4013      	ands	r3, r2
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2100      	movs	r1, #0
 800146a:	200d      	movs	r0, #13
 800146c:	f000 f9ea 	bl	8001844 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001470:	200d      	movs	r0, #13
 8001472:	f000 f9fc 	bl	800186e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2100      	movs	r1, #0
 800147a:	200e      	movs	r0, #14
 800147c:	f000 f9e2 	bl	8001844 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001480:	200e      	movs	r0, #14
 8001482:	f000 f9f4 	bl	800186e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001486:	46c0      	nop			; (mov r8, r8)
 8001488:	46bd      	mov	sp, r7
 800148a:	b004      	add	sp, #16
 800148c:	bd80      	pop	{r7, pc}
 800148e:	46c0      	nop			; (mov r8, r8)
 8001490:	40012c00 	.word	0x40012c00
 8001494:	40021000 	.word	0x40021000

08001498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800149c:	e7fe      	b.n	800149c <NMI_Handler+0x4>

0800149e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a2:	e7fe      	b.n	80014a2 <HardFault_Handler+0x4>

080014a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80014a8:	46c0      	nop			; (mov r8, r8)
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b2:	46c0      	nop			; (mov r8, r8)
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014bc:	f000 f8c0 	bl	8001640 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c0:	46c0      	nop			; (mov r8, r8)
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_L_Pin);
 80014ca:	2020      	movs	r0, #32
 80014cc:	f000 fb8a 	bl	8001be4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_R_Pin);
 80014d0:	2040      	movs	r0, #64	; 0x40
 80014d2:	f000 fb87 	bl	8001be4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014e0:	4b03      	ldr	r3, [pc, #12]	; (80014f0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80014e2:	0018      	movs	r0, r3
 80014e4:	f001 f940 	bl	8002768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80014e8:	46c0      	nop			; (mov r8, r8)
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	200000a4 	.word	0x200000a4

080014f4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014f8:	4b03      	ldr	r3, [pc, #12]	; (8001508 <TIM1_CC_IRQHandler+0x14>)
 80014fa:	0018      	movs	r0, r3
 80014fc:	f001 f934 	bl	8002768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001500:	46c0      	nop			; (mov r8, r8)
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	200000a4 	.word	0x200000a4

0800150c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001510:	46c0      	nop			; (mov r8, r8)
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001518:	480d      	ldr	r0, [pc, #52]	; (8001550 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800151a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800151c:	f7ff fff6 	bl	800150c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001520:	480c      	ldr	r0, [pc, #48]	; (8001554 <LoopForever+0x6>)
  ldr r1, =_edata
 8001522:	490d      	ldr	r1, [pc, #52]	; (8001558 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001524:	4a0d      	ldr	r2, [pc, #52]	; (800155c <LoopForever+0xe>)
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001528:	e002      	b.n	8001530 <LoopCopyDataInit>

0800152a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800152a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800152c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800152e:	3304      	adds	r3, #4

08001530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001534:	d3f9      	bcc.n	800152a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001536:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001538:	4c0a      	ldr	r4, [pc, #40]	; (8001564 <LoopForever+0x16>)
  movs r3, #0
 800153a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800153c:	e001      	b.n	8001542 <LoopFillZerobss>

0800153e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800153e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001540:	3204      	adds	r2, #4

08001542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001544:	d3fb      	bcc.n	800153e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001546:	f001 fcbf 	bl	8002ec8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800154a:	f7ff fc6b 	bl	8000e24 <main>

0800154e <LoopForever>:

LoopForever:
  b LoopForever
 800154e:	e7fe      	b.n	800154e <LoopForever>
  ldr   r0, =_estack
 8001550:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001558:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800155c:	080031a8 	.word	0x080031a8
  ldr r2, =_sbss
 8001560:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001564:	200000f4 	.word	0x200000f4

08001568 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001568:	e7fe      	b.n	8001568 <ADC1_IRQHandler>
	...

0800156c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001572:	1dfb      	adds	r3, r7, #7
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001578:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <HAL_Init+0x3c>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <HAL_Init+0x3c>)
 800157e:	2180      	movs	r1, #128	; 0x80
 8001580:	0049      	lsls	r1, r1, #1
 8001582:	430a      	orrs	r2, r1
 8001584:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001586:	2003      	movs	r0, #3
 8001588:	f000 f810 	bl	80015ac <HAL_InitTick>
 800158c:	1e03      	subs	r3, r0, #0
 800158e:	d003      	beq.n	8001598 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001590:	1dfb      	adds	r3, r7, #7
 8001592:	2201      	movs	r2, #1
 8001594:	701a      	strb	r2, [r3, #0]
 8001596:	e001      	b.n	800159c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001598:	f7ff ff26 	bl	80013e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800159c:	1dfb      	adds	r3, r7, #7
 800159e:	781b      	ldrb	r3, [r3, #0]
}
 80015a0:	0018      	movs	r0, r3
 80015a2:	46bd      	mov	sp, r7
 80015a4:	b002      	add	sp, #8
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40022000 	.word	0x40022000

080015ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ac:	b590      	push	{r4, r7, lr}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015b4:	230f      	movs	r3, #15
 80015b6:	18fb      	adds	r3, r7, r3
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80015bc:	4b1d      	ldr	r3, [pc, #116]	; (8001634 <HAL_InitTick+0x88>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d02b      	beq.n	800161c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80015c4:	4b1c      	ldr	r3, [pc, #112]	; (8001638 <HAL_InitTick+0x8c>)
 80015c6:	681c      	ldr	r4, [r3, #0]
 80015c8:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <HAL_InitTick+0x88>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	0019      	movs	r1, r3
 80015ce:	23fa      	movs	r3, #250	; 0xfa
 80015d0:	0098      	lsls	r0, r3, #2
 80015d2:	f7fe fd95 	bl	8000100 <__udivsi3>
 80015d6:	0003      	movs	r3, r0
 80015d8:	0019      	movs	r1, r3
 80015da:	0020      	movs	r0, r4
 80015dc:	f7fe fd90 	bl	8000100 <__udivsi3>
 80015e0:	0003      	movs	r3, r0
 80015e2:	0018      	movs	r0, r3
 80015e4:	f000 f953 	bl	800188e <HAL_SYSTICK_Config>
 80015e8:	1e03      	subs	r3, r0, #0
 80015ea:	d112      	bne.n	8001612 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b03      	cmp	r3, #3
 80015f0:	d80a      	bhi.n	8001608 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	2301      	movs	r3, #1
 80015f6:	425b      	negs	r3, r3
 80015f8:	2200      	movs	r2, #0
 80015fa:	0018      	movs	r0, r3
 80015fc:	f000 f922 	bl	8001844 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001600:	4b0e      	ldr	r3, [pc, #56]	; (800163c <HAL_InitTick+0x90>)
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	e00d      	b.n	8001624 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001608:	230f      	movs	r3, #15
 800160a:	18fb      	adds	r3, r7, r3
 800160c:	2201      	movs	r2, #1
 800160e:	701a      	strb	r2, [r3, #0]
 8001610:	e008      	b.n	8001624 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001612:	230f      	movs	r3, #15
 8001614:	18fb      	adds	r3, r7, r3
 8001616:	2201      	movs	r2, #1
 8001618:	701a      	strb	r2, [r3, #0]
 800161a:	e003      	b.n	8001624 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800161c:	230f      	movs	r3, #15
 800161e:	18fb      	adds	r3, r7, r3
 8001620:	2201      	movs	r2, #1
 8001622:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001624:	230f      	movs	r3, #15
 8001626:	18fb      	adds	r3, r7, r3
 8001628:	781b      	ldrb	r3, [r3, #0]
}
 800162a:	0018      	movs	r0, r3
 800162c:	46bd      	mov	sp, r7
 800162e:	b005      	add	sp, #20
 8001630:	bd90      	pop	{r4, r7, pc}
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	2000000c 	.word	0x2000000c
 8001638:	20000004 	.word	0x20000004
 800163c:	20000008 	.word	0x20000008

08001640 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <HAL_IncTick+0x1c>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	001a      	movs	r2, r3
 800164a:	4b05      	ldr	r3, [pc, #20]	; (8001660 <HAL_IncTick+0x20>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	18d2      	adds	r2, r2, r3
 8001650:	4b03      	ldr	r3, [pc, #12]	; (8001660 <HAL_IncTick+0x20>)
 8001652:	601a      	str	r2, [r3, #0]
}
 8001654:	46c0      	nop			; (mov r8, r8)
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	2000000c 	.word	0x2000000c
 8001660:	200000f0 	.word	0x200000f0

08001664 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  return uwTick;
 8001668:	4b02      	ldr	r3, [pc, #8]	; (8001674 <HAL_GetTick+0x10>)
 800166a:	681b      	ldr	r3, [r3, #0]
}
 800166c:	0018      	movs	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	200000f0 	.word	0x200000f0

08001678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001680:	f7ff fff0 	bl	8001664 <HAL_GetTick>
 8001684:	0003      	movs	r3, r0
 8001686:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	3301      	adds	r3, #1
 8001690:	d005      	beq.n	800169e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001692:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <HAL_Delay+0x44>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	001a      	movs	r2, r3
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	189b      	adds	r3, r3, r2
 800169c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	f7ff ffe0 	bl	8001664 <HAL_GetTick>
 80016a4:	0002      	movs	r2, r0
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d8f7      	bhi.n	80016a0 <HAL_Delay+0x28>
  {
  }
}
 80016b0:	46c0      	nop			; (mov r8, r8)
 80016b2:	46c0      	nop			; (mov r8, r8)
 80016b4:	46bd      	mov	sp, r7
 80016b6:	b004      	add	sp, #16
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	2000000c 	.word	0x2000000c

080016c0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a06      	ldr	r2, [pc, #24]	; (80016e8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80016ce:	4013      	ands	r3, r2
 80016d0:	0019      	movs	r1, r3
 80016d2:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	430a      	orrs	r2, r1
 80016d8:	601a      	str	r2, [r3, #0]
}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	46bd      	mov	sp, r7
 80016de:	b002      	add	sp, #8
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	46c0      	nop			; (mov r8, r8)
 80016e4:	40010000 	.word	0x40010000
 80016e8:	fffff9ff 	.word	0xfffff9ff

080016ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	0002      	movs	r2, r0
 80016f4:	1dfb      	adds	r3, r7, #7
 80016f6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80016f8:	1dfb      	adds	r3, r7, #7
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b7f      	cmp	r3, #127	; 0x7f
 80016fe:	d809      	bhi.n	8001714 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001700:	1dfb      	adds	r3, r7, #7
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	001a      	movs	r2, r3
 8001706:	231f      	movs	r3, #31
 8001708:	401a      	ands	r2, r3
 800170a:	4b04      	ldr	r3, [pc, #16]	; (800171c <__NVIC_EnableIRQ+0x30>)
 800170c:	2101      	movs	r1, #1
 800170e:	4091      	lsls	r1, r2
 8001710:	000a      	movs	r2, r1
 8001712:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001714:	46c0      	nop			; (mov r8, r8)
 8001716:	46bd      	mov	sp, r7
 8001718:	b002      	add	sp, #8
 800171a:	bd80      	pop	{r7, pc}
 800171c:	e000e100 	.word	0xe000e100

08001720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001720:	b590      	push	{r4, r7, lr}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	0002      	movs	r2, r0
 8001728:	6039      	str	r1, [r7, #0]
 800172a:	1dfb      	adds	r3, r7, #7
 800172c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800172e:	1dfb      	adds	r3, r7, #7
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b7f      	cmp	r3, #127	; 0x7f
 8001734:	d828      	bhi.n	8001788 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001736:	4a2f      	ldr	r2, [pc, #188]	; (80017f4 <__NVIC_SetPriority+0xd4>)
 8001738:	1dfb      	adds	r3, r7, #7
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	b25b      	sxtb	r3, r3
 800173e:	089b      	lsrs	r3, r3, #2
 8001740:	33c0      	adds	r3, #192	; 0xc0
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	589b      	ldr	r3, [r3, r2]
 8001746:	1dfa      	adds	r2, r7, #7
 8001748:	7812      	ldrb	r2, [r2, #0]
 800174a:	0011      	movs	r1, r2
 800174c:	2203      	movs	r2, #3
 800174e:	400a      	ands	r2, r1
 8001750:	00d2      	lsls	r2, r2, #3
 8001752:	21ff      	movs	r1, #255	; 0xff
 8001754:	4091      	lsls	r1, r2
 8001756:	000a      	movs	r2, r1
 8001758:	43d2      	mvns	r2, r2
 800175a:	401a      	ands	r2, r3
 800175c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	019b      	lsls	r3, r3, #6
 8001762:	22ff      	movs	r2, #255	; 0xff
 8001764:	401a      	ands	r2, r3
 8001766:	1dfb      	adds	r3, r7, #7
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	0018      	movs	r0, r3
 800176c:	2303      	movs	r3, #3
 800176e:	4003      	ands	r3, r0
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001774:	481f      	ldr	r0, [pc, #124]	; (80017f4 <__NVIC_SetPriority+0xd4>)
 8001776:	1dfb      	adds	r3, r7, #7
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	b25b      	sxtb	r3, r3
 800177c:	089b      	lsrs	r3, r3, #2
 800177e:	430a      	orrs	r2, r1
 8001780:	33c0      	adds	r3, #192	; 0xc0
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001786:	e031      	b.n	80017ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001788:	4a1b      	ldr	r2, [pc, #108]	; (80017f8 <__NVIC_SetPriority+0xd8>)
 800178a:	1dfb      	adds	r3, r7, #7
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	0019      	movs	r1, r3
 8001790:	230f      	movs	r3, #15
 8001792:	400b      	ands	r3, r1
 8001794:	3b08      	subs	r3, #8
 8001796:	089b      	lsrs	r3, r3, #2
 8001798:	3306      	adds	r3, #6
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	18d3      	adds	r3, r2, r3
 800179e:	3304      	adds	r3, #4
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	1dfa      	adds	r2, r7, #7
 80017a4:	7812      	ldrb	r2, [r2, #0]
 80017a6:	0011      	movs	r1, r2
 80017a8:	2203      	movs	r2, #3
 80017aa:	400a      	ands	r2, r1
 80017ac:	00d2      	lsls	r2, r2, #3
 80017ae:	21ff      	movs	r1, #255	; 0xff
 80017b0:	4091      	lsls	r1, r2
 80017b2:	000a      	movs	r2, r1
 80017b4:	43d2      	mvns	r2, r2
 80017b6:	401a      	ands	r2, r3
 80017b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	019b      	lsls	r3, r3, #6
 80017be:	22ff      	movs	r2, #255	; 0xff
 80017c0:	401a      	ands	r2, r3
 80017c2:	1dfb      	adds	r3, r7, #7
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	0018      	movs	r0, r3
 80017c8:	2303      	movs	r3, #3
 80017ca:	4003      	ands	r3, r0
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017d0:	4809      	ldr	r0, [pc, #36]	; (80017f8 <__NVIC_SetPriority+0xd8>)
 80017d2:	1dfb      	adds	r3, r7, #7
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	001c      	movs	r4, r3
 80017d8:	230f      	movs	r3, #15
 80017da:	4023      	ands	r3, r4
 80017dc:	3b08      	subs	r3, #8
 80017de:	089b      	lsrs	r3, r3, #2
 80017e0:	430a      	orrs	r2, r1
 80017e2:	3306      	adds	r3, #6
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	18c3      	adds	r3, r0, r3
 80017e8:	3304      	adds	r3, #4
 80017ea:	601a      	str	r2, [r3, #0]
}
 80017ec:	46c0      	nop			; (mov r8, r8)
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b003      	add	sp, #12
 80017f2:	bd90      	pop	{r4, r7, pc}
 80017f4:	e000e100 	.word	0xe000e100
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	1e5a      	subs	r2, r3, #1
 8001808:	2380      	movs	r3, #128	; 0x80
 800180a:	045b      	lsls	r3, r3, #17
 800180c:	429a      	cmp	r2, r3
 800180e:	d301      	bcc.n	8001814 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001810:	2301      	movs	r3, #1
 8001812:	e010      	b.n	8001836 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001814:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <SysTick_Config+0x44>)
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	3a01      	subs	r2, #1
 800181a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800181c:	2301      	movs	r3, #1
 800181e:	425b      	negs	r3, r3
 8001820:	2103      	movs	r1, #3
 8001822:	0018      	movs	r0, r3
 8001824:	f7ff ff7c 	bl	8001720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001828:	4b05      	ldr	r3, [pc, #20]	; (8001840 <SysTick_Config+0x44>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182e:	4b04      	ldr	r3, [pc, #16]	; (8001840 <SysTick_Config+0x44>)
 8001830:	2207      	movs	r2, #7
 8001832:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001834:	2300      	movs	r3, #0
}
 8001836:	0018      	movs	r0, r3
 8001838:	46bd      	mov	sp, r7
 800183a:	b002      	add	sp, #8
 800183c:	bd80      	pop	{r7, pc}
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	e000e010 	.word	0xe000e010

08001844 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
 800184e:	210f      	movs	r1, #15
 8001850:	187b      	adds	r3, r7, r1
 8001852:	1c02      	adds	r2, r0, #0
 8001854:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	187b      	adds	r3, r7, r1
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	b25b      	sxtb	r3, r3
 800185e:	0011      	movs	r1, r2
 8001860:	0018      	movs	r0, r3
 8001862:	f7ff ff5d 	bl	8001720 <__NVIC_SetPriority>
}
 8001866:	46c0      	nop			; (mov r8, r8)
 8001868:	46bd      	mov	sp, r7
 800186a:	b004      	add	sp, #16
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	0002      	movs	r2, r0
 8001876:	1dfb      	adds	r3, r7, #7
 8001878:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800187a:	1dfb      	adds	r3, r7, #7
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	b25b      	sxtb	r3, r3
 8001880:	0018      	movs	r0, r3
 8001882:	f7ff ff33 	bl	80016ec <__NVIC_EnableIRQ>
}
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	46bd      	mov	sp, r7
 800188a:	b002      	add	sp, #8
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	0018      	movs	r0, r3
 800189a:	f7ff ffaf 	bl	80017fc <SysTick_Config>
 800189e:	0003      	movs	r3, r0
}
 80018a0:	0018      	movs	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	b002      	add	sp, #8
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018b6:	e147      	b.n	8001b48 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2101      	movs	r1, #1
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	4091      	lsls	r1, r2
 80018c2:	000a      	movs	r2, r1
 80018c4:	4013      	ands	r3, r2
 80018c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d100      	bne.n	80018d0 <HAL_GPIO_Init+0x28>
 80018ce:	e138      	b.n	8001b42 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2203      	movs	r2, #3
 80018d6:	4013      	ands	r3, r2
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d005      	beq.n	80018e8 <HAL_GPIO_Init+0x40>
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2203      	movs	r2, #3
 80018e2:	4013      	ands	r3, r2
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d130      	bne.n	800194a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	2203      	movs	r2, #3
 80018f4:	409a      	lsls	r2, r3
 80018f6:	0013      	movs	r3, r2
 80018f8:	43da      	mvns	r2, r3
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	4013      	ands	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	68da      	ldr	r2, [r3, #12]
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	409a      	lsls	r2, r3
 800190a:	0013      	movs	r3, r2
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	4313      	orrs	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800191e:	2201      	movs	r2, #1
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	409a      	lsls	r2, r3
 8001924:	0013      	movs	r3, r2
 8001926:	43da      	mvns	r2, r3
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	4013      	ands	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	091b      	lsrs	r3, r3, #4
 8001934:	2201      	movs	r2, #1
 8001936:	401a      	ands	r2, r3
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	409a      	lsls	r2, r3
 800193c:	0013      	movs	r3, r2
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4313      	orrs	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2203      	movs	r2, #3
 8001950:	4013      	ands	r3, r2
 8001952:	2b03      	cmp	r3, #3
 8001954:	d017      	beq.n	8001986 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	2203      	movs	r2, #3
 8001962:	409a      	lsls	r2, r3
 8001964:	0013      	movs	r3, r2
 8001966:	43da      	mvns	r2, r3
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	4013      	ands	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	409a      	lsls	r2, r3
 8001978:	0013      	movs	r3, r2
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4313      	orrs	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2203      	movs	r2, #3
 800198c:	4013      	ands	r3, r2
 800198e:	2b02      	cmp	r3, #2
 8001990:	d123      	bne.n	80019da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	08da      	lsrs	r2, r3, #3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	3208      	adds	r2, #8
 800199a:	0092      	lsls	r2, r2, #2
 800199c:	58d3      	ldr	r3, [r2, r3]
 800199e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	2207      	movs	r2, #7
 80019a4:	4013      	ands	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	220f      	movs	r2, #15
 80019aa:	409a      	lsls	r2, r3
 80019ac:	0013      	movs	r3, r2
 80019ae:	43da      	mvns	r2, r3
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	4013      	ands	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	691a      	ldr	r2, [r3, #16]
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	2107      	movs	r1, #7
 80019be:	400b      	ands	r3, r1
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	409a      	lsls	r2, r3
 80019c4:	0013      	movs	r3, r2
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	08da      	lsrs	r2, r3, #3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3208      	adds	r2, #8
 80019d4:	0092      	lsls	r2, r2, #2
 80019d6:	6939      	ldr	r1, [r7, #16]
 80019d8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	2203      	movs	r2, #3
 80019e6:	409a      	lsls	r2, r3
 80019e8:	0013      	movs	r3, r2
 80019ea:	43da      	mvns	r2, r3
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	4013      	ands	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2203      	movs	r2, #3
 80019f8:	401a      	ands	r2, r3
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	409a      	lsls	r2, r3
 8001a00:	0013      	movs	r3, r2
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	23c0      	movs	r3, #192	; 0xc0
 8001a14:	029b      	lsls	r3, r3, #10
 8001a16:	4013      	ands	r3, r2
 8001a18:	d100      	bne.n	8001a1c <HAL_GPIO_Init+0x174>
 8001a1a:	e092      	b.n	8001b42 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001a1c:	4a50      	ldr	r2, [pc, #320]	; (8001b60 <HAL_GPIO_Init+0x2b8>)
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	089b      	lsrs	r3, r3, #2
 8001a22:	3318      	adds	r3, #24
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	589b      	ldr	r3, [r3, r2]
 8001a28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	4013      	ands	r3, r2
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	220f      	movs	r2, #15
 8001a34:	409a      	lsls	r2, r3
 8001a36:	0013      	movs	r3, r2
 8001a38:	43da      	mvns	r2, r3
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	23a0      	movs	r3, #160	; 0xa0
 8001a44:	05db      	lsls	r3, r3, #23
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d013      	beq.n	8001a72 <HAL_GPIO_Init+0x1ca>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a45      	ldr	r2, [pc, #276]	; (8001b64 <HAL_GPIO_Init+0x2bc>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d00d      	beq.n	8001a6e <HAL_GPIO_Init+0x1c6>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a44      	ldr	r2, [pc, #272]	; (8001b68 <HAL_GPIO_Init+0x2c0>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d007      	beq.n	8001a6a <HAL_GPIO_Init+0x1c2>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a43      	ldr	r2, [pc, #268]	; (8001b6c <HAL_GPIO_Init+0x2c4>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d101      	bne.n	8001a66 <HAL_GPIO_Init+0x1be>
 8001a62:	2303      	movs	r3, #3
 8001a64:	e006      	b.n	8001a74 <HAL_GPIO_Init+0x1cc>
 8001a66:	2305      	movs	r3, #5
 8001a68:	e004      	b.n	8001a74 <HAL_GPIO_Init+0x1cc>
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	e002      	b.n	8001a74 <HAL_GPIO_Init+0x1cc>
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e000      	b.n	8001a74 <HAL_GPIO_Init+0x1cc>
 8001a72:	2300      	movs	r3, #0
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	2103      	movs	r1, #3
 8001a78:	400a      	ands	r2, r1
 8001a7a:	00d2      	lsls	r2, r2, #3
 8001a7c:	4093      	lsls	r3, r2
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001a84:	4936      	ldr	r1, [pc, #216]	; (8001b60 <HAL_GPIO_Init+0x2b8>)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	089b      	lsrs	r3, r3, #2
 8001a8a:	3318      	adds	r3, #24
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a92:	4a33      	ldr	r2, [pc, #204]	; (8001b60 <HAL_GPIO_Init+0x2b8>)
 8001a94:	2380      	movs	r3, #128	; 0x80
 8001a96:	58d3      	ldr	r3, [r2, r3]
 8001a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	43da      	mvns	r2, r3
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	2380      	movs	r3, #128	; 0x80
 8001aaa:	025b      	lsls	r3, r3, #9
 8001aac:	4013      	ands	r3, r2
 8001aae:	d003      	beq.n	8001ab8 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ab8:	4929      	ldr	r1, [pc, #164]	; (8001b60 <HAL_GPIO_Init+0x2b8>)
 8001aba:	2280      	movs	r2, #128	; 0x80
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001ac0:	4a27      	ldr	r2, [pc, #156]	; (8001b60 <HAL_GPIO_Init+0x2b8>)
 8001ac2:	2384      	movs	r3, #132	; 0x84
 8001ac4:	58d3      	ldr	r3, [r2, r3]
 8001ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	43da      	mvns	r2, r3
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	2380      	movs	r3, #128	; 0x80
 8001ad8:	029b      	lsls	r3, r3, #10
 8001ada:	4013      	ands	r3, r2
 8001adc:	d003      	beq.n	8001ae6 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ae6:	491e      	ldr	r1, [pc, #120]	; (8001b60 <HAL_GPIO_Init+0x2b8>)
 8001ae8:	2284      	movs	r2, #132	; 0x84
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001aee:	4b1c      	ldr	r3, [pc, #112]	; (8001b60 <HAL_GPIO_Init+0x2b8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	43da      	mvns	r2, r3
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	4013      	ands	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	2380      	movs	r3, #128	; 0x80
 8001b04:	035b      	lsls	r3, r3, #13
 8001b06:	4013      	ands	r3, r2
 8001b08:	d003      	beq.n	8001b12 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b12:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <HAL_GPIO_Init+0x2b8>)
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001b18:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <HAL_GPIO_Init+0x2b8>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	43da      	mvns	r2, r3
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	4013      	ands	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685a      	ldr	r2, [r3, #4]
 8001b2c:	2380      	movs	r3, #128	; 0x80
 8001b2e:	039b      	lsls	r3, r3, #14
 8001b30:	4013      	ands	r3, r2
 8001b32:	d003      	beq.n	8001b3c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <HAL_GPIO_Init+0x2b8>)
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	3301      	adds	r3, #1
 8001b46:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	40da      	lsrs	r2, r3
 8001b50:	1e13      	subs	r3, r2, #0
 8001b52:	d000      	beq.n	8001b56 <HAL_GPIO_Init+0x2ae>
 8001b54:	e6b0      	b.n	80018b8 <HAL_GPIO_Init+0x10>
  }
}
 8001b56:	46c0      	nop			; (mov r8, r8)
 8001b58:	46c0      	nop			; (mov r8, r8)
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	b006      	add	sp, #24
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40021800 	.word	0x40021800
 8001b64:	50000400 	.word	0x50000400
 8001b68:	50000800 	.word	0x50000800
 8001b6c:	50000c00 	.word	0x50000c00

08001b70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	000a      	movs	r2, r1
 8001b7a:	1cbb      	adds	r3, r7, #2
 8001b7c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	1cba      	adds	r2, r7, #2
 8001b84:	8812      	ldrh	r2, [r2, #0]
 8001b86:	4013      	ands	r3, r2
 8001b88:	d004      	beq.n	8001b94 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001b8a:	230f      	movs	r3, #15
 8001b8c:	18fb      	adds	r3, r7, r3
 8001b8e:	2201      	movs	r2, #1
 8001b90:	701a      	strb	r2, [r3, #0]
 8001b92:	e003      	b.n	8001b9c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b94:	230f      	movs	r3, #15
 8001b96:	18fb      	adds	r3, r7, r3
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001b9c:	230f      	movs	r3, #15
 8001b9e:	18fb      	adds	r3, r7, r3
 8001ba0:	781b      	ldrb	r3, [r3, #0]
}
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	b004      	add	sp, #16
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	0008      	movs	r0, r1
 8001bb4:	0011      	movs	r1, r2
 8001bb6:	1cbb      	adds	r3, r7, #2
 8001bb8:	1c02      	adds	r2, r0, #0
 8001bba:	801a      	strh	r2, [r3, #0]
 8001bbc:	1c7b      	adds	r3, r7, #1
 8001bbe:	1c0a      	adds	r2, r1, #0
 8001bc0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bc2:	1c7b      	adds	r3, r7, #1
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d004      	beq.n	8001bd4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bca:	1cbb      	adds	r3, r7, #2
 8001bcc:	881a      	ldrh	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bd2:	e003      	b.n	8001bdc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bd4:	1cbb      	adds	r3, r7, #2
 8001bd6:	881a      	ldrh	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bdc:	46c0      	nop			; (mov r8, r8)
 8001bde:	46bd      	mov	sp, r7
 8001be0:	b002      	add	sp, #8
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	0002      	movs	r2, r0
 8001bec:	1dbb      	adds	r3, r7, #6
 8001bee:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8001bf0:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	1dba      	adds	r2, r7, #6
 8001bf6:	8812      	ldrh	r2, [r2, #0]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d008      	beq.n	8001c0e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001bfc:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001bfe:	1dba      	adds	r2, r7, #6
 8001c00:	8812      	ldrh	r2, [r2, #0]
 8001c02:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001c04:	1dbb      	adds	r3, r7, #6
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	0018      	movs	r0, r3
 8001c0a:	f7ff fb9d 	bl	8001348 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	1dba      	adds	r2, r7, #6
 8001c14:	8812      	ldrh	r2, [r2, #0]
 8001c16:	4013      	ands	r3, r2
 8001c18:	d008      	beq.n	8001c2c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001c1c:	1dba      	adds	r2, r7, #6
 8001c1e:	8812      	ldrh	r2, [r2, #0]
 8001c20:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001c22:	1dbb      	adds	r3, r7, #6
 8001c24:	881b      	ldrh	r3, [r3, #0]
 8001c26:	0018      	movs	r0, r3
 8001c28:	f000 f806 	bl	8001c38 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001c2c:	46c0      	nop			; (mov r8, r8)
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	b002      	add	sp, #8
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40021800 	.word	0x40021800

08001c38 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	0002      	movs	r2, r0
 8001c40:	1dbb      	adds	r3, r7, #6
 8001c42:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001c44:	46c0      	nop			; (mov r8, r8)
 8001c46:	46bd      	mov	sp, r7
 8001c48:	b002      	add	sp, #8
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001c54:	4b19      	ldr	r3, [pc, #100]	; (8001cbc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a19      	ldr	r2, [pc, #100]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	0019      	movs	r1, r3
 8001c5e:	4b17      	ldr	r3, [pc, #92]	; (8001cbc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	430a      	orrs	r2, r1
 8001c64:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	2380      	movs	r3, #128	; 0x80
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d11f      	bne.n	8001cb0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001c70:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	0013      	movs	r3, r2
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	189b      	adds	r3, r3, r2
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	4912      	ldr	r1, [pc, #72]	; (8001cc8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001c7e:	0018      	movs	r0, r3
 8001c80:	f7fe fa3e 	bl	8000100 <__udivsi3>
 8001c84:	0003      	movs	r3, r0
 8001c86:	3301      	adds	r3, #1
 8001c88:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c8a:	e008      	b.n	8001c9e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	3b01      	subs	r3, #1
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	e001      	b.n	8001c9e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e009      	b.n	8001cb2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c9e:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ca0:	695a      	ldr	r2, [r3, #20]
 8001ca2:	2380      	movs	r3, #128	; 0x80
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	2380      	movs	r3, #128	; 0x80
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d0ed      	beq.n	8001c8c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	b004      	add	sp, #16
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	46c0      	nop			; (mov r8, r8)
 8001cbc:	40007000 	.word	0x40007000
 8001cc0:	fffff9ff 	.word	0xfffff9ff
 8001cc4:	20000004 	.word	0x20000004
 8001cc8:	000f4240 	.word	0x000f4240

08001ccc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e2f9      	b.n	80022d2 <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d100      	bne.n	8001cea <HAL_RCC_OscConfig+0x1e>
 8001ce8:	e07c      	b.n	8001de4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cea:	4bc3      	ldr	r3, [pc, #780]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	2238      	movs	r2, #56	; 0x38
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cf4:	4bc0      	ldr	r3, [pc, #768]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	2b10      	cmp	r3, #16
 8001d02:	d102      	bne.n	8001d0a <HAL_RCC_OscConfig+0x3e>
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	2b03      	cmp	r3, #3
 8001d08:	d002      	beq.n	8001d10 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d10b      	bne.n	8001d28 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d10:	4bb9      	ldr	r3, [pc, #740]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	2380      	movs	r3, #128	; 0x80
 8001d16:	029b      	lsls	r3, r3, #10
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d062      	beq.n	8001de2 <HAL_RCC_OscConfig+0x116>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d15e      	bne.n	8001de2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e2d4      	b.n	80022d2 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	025b      	lsls	r3, r3, #9
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d107      	bne.n	8001d44 <HAL_RCC_OscConfig+0x78>
 8001d34:	4bb0      	ldr	r3, [pc, #704]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4baf      	ldr	r3, [pc, #700]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001d3a:	2180      	movs	r1, #128	; 0x80
 8001d3c:	0249      	lsls	r1, r1, #9
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	e020      	b.n	8001d86 <HAL_RCC_OscConfig+0xba>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	23a0      	movs	r3, #160	; 0xa0
 8001d4a:	02db      	lsls	r3, r3, #11
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d10e      	bne.n	8001d6e <HAL_RCC_OscConfig+0xa2>
 8001d50:	4ba9      	ldr	r3, [pc, #676]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	4ba8      	ldr	r3, [pc, #672]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001d56:	2180      	movs	r1, #128	; 0x80
 8001d58:	02c9      	lsls	r1, r1, #11
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	4ba6      	ldr	r3, [pc, #664]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	4ba5      	ldr	r3, [pc, #660]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001d64:	2180      	movs	r1, #128	; 0x80
 8001d66:	0249      	lsls	r1, r1, #9
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	e00b      	b.n	8001d86 <HAL_RCC_OscConfig+0xba>
 8001d6e:	4ba2      	ldr	r3, [pc, #648]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	4ba1      	ldr	r3, [pc, #644]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001d74:	49a1      	ldr	r1, [pc, #644]	; (8001ffc <HAL_RCC_OscConfig+0x330>)
 8001d76:	400a      	ands	r2, r1
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	4b9f      	ldr	r3, [pc, #636]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	4b9e      	ldr	r3, [pc, #632]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001d80:	499f      	ldr	r1, [pc, #636]	; (8002000 <HAL_RCC_OscConfig+0x334>)
 8001d82:	400a      	ands	r2, r1
 8001d84:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d014      	beq.n	8001db8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8e:	f7ff fc69 	bl	8001664 <HAL_GetTick>
 8001d92:	0003      	movs	r3, r0
 8001d94:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d98:	f7ff fc64 	bl	8001664 <HAL_GetTick>
 8001d9c:	0002      	movs	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b64      	cmp	r3, #100	; 0x64
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e293      	b.n	80022d2 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001daa:	4b93      	ldr	r3, [pc, #588]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	2380      	movs	r3, #128	; 0x80
 8001db0:	029b      	lsls	r3, r3, #10
 8001db2:	4013      	ands	r3, r2
 8001db4:	d0f0      	beq.n	8001d98 <HAL_RCC_OscConfig+0xcc>
 8001db6:	e015      	b.n	8001de4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db8:	f7ff fc54 	bl	8001664 <HAL_GetTick>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc2:	f7ff fc4f 	bl	8001664 <HAL_GetTick>
 8001dc6:	0002      	movs	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b64      	cmp	r3, #100	; 0x64
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e27e      	b.n	80022d2 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dd4:	4b88      	ldr	r3, [pc, #544]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	2380      	movs	r3, #128	; 0x80
 8001dda:	029b      	lsls	r3, r3, #10
 8001ddc:	4013      	ands	r3, r2
 8001dde:	d1f0      	bne.n	8001dc2 <HAL_RCC_OscConfig+0xf6>
 8001de0:	e000      	b.n	8001de4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2202      	movs	r2, #2
 8001dea:	4013      	ands	r3, r2
 8001dec:	d100      	bne.n	8001df0 <HAL_RCC_OscConfig+0x124>
 8001dee:	e099      	b.n	8001f24 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001df0:	4b81      	ldr	r3, [pc, #516]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	2238      	movs	r2, #56	; 0x38
 8001df6:	4013      	ands	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dfa:	4b7f      	ldr	r3, [pc, #508]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	2203      	movs	r2, #3
 8001e00:	4013      	ands	r3, r2
 8001e02:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	2b10      	cmp	r3, #16
 8001e08:	d102      	bne.n	8001e10 <HAL_RCC_OscConfig+0x144>
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d002      	beq.n	8001e16 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d135      	bne.n	8001e82 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e16:	4b78      	ldr	r3, [pc, #480]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	2380      	movs	r3, #128	; 0x80
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d005      	beq.n	8001e2e <HAL_RCC_OscConfig+0x162>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e251      	b.n	80022d2 <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2e:	4b72      	ldr	r3, [pc, #456]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	4a74      	ldr	r2, [pc, #464]	; (8002004 <HAL_RCC_OscConfig+0x338>)
 8001e34:	4013      	ands	r3, r2
 8001e36:	0019      	movs	r1, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	695b      	ldr	r3, [r3, #20]
 8001e3c:	021a      	lsls	r2, r3, #8
 8001e3e:	4b6e      	ldr	r3, [pc, #440]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001e40:	430a      	orrs	r2, r1
 8001e42:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d112      	bne.n	8001e70 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001e4a:	4b6b      	ldr	r3, [pc, #428]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a6e      	ldr	r2, [pc, #440]	; (8002008 <HAL_RCC_OscConfig+0x33c>)
 8001e50:	4013      	ands	r3, r2
 8001e52:	0019      	movs	r1, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	691a      	ldr	r2, [r3, #16]
 8001e58:	4b67      	ldr	r3, [pc, #412]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001e5e:	4b66      	ldr	r3, [pc, #408]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	0adb      	lsrs	r3, r3, #11
 8001e64:	2207      	movs	r2, #7
 8001e66:	4013      	ands	r3, r2
 8001e68:	4a68      	ldr	r2, [pc, #416]	; (800200c <HAL_RCC_OscConfig+0x340>)
 8001e6a:	40da      	lsrs	r2, r3
 8001e6c:	4b68      	ldr	r3, [pc, #416]	; (8002010 <HAL_RCC_OscConfig+0x344>)
 8001e6e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e70:	4b68      	ldr	r3, [pc, #416]	; (8002014 <HAL_RCC_OscConfig+0x348>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	0018      	movs	r0, r3
 8001e76:	f7ff fb99 	bl	80015ac <HAL_InitTick>
 8001e7a:	1e03      	subs	r3, r0, #0
 8001e7c:	d051      	beq.n	8001f22 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e227      	b.n	80022d2 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d030      	beq.n	8001eec <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001e8a:	4b5b      	ldr	r3, [pc, #364]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a5e      	ldr	r2, [pc, #376]	; (8002008 <HAL_RCC_OscConfig+0x33c>)
 8001e90:	4013      	ands	r3, r2
 8001e92:	0019      	movs	r1, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	691a      	ldr	r2, [r3, #16]
 8001e98:	4b57      	ldr	r3, [pc, #348]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001e9e:	4b56      	ldr	r3, [pc, #344]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	4b55      	ldr	r3, [pc, #340]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001ea4:	2180      	movs	r1, #128	; 0x80
 8001ea6:	0049      	lsls	r1, r1, #1
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eac:	f7ff fbda 	bl	8001664 <HAL_GetTick>
 8001eb0:	0003      	movs	r3, r0
 8001eb2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eb6:	f7ff fbd5 	bl	8001664 <HAL_GetTick>
 8001eba:	0002      	movs	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e204      	b.n	80022d2 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ec8:	4b4b      	ldr	r3, [pc, #300]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	2380      	movs	r3, #128	; 0x80
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d0f0      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed4:	4b48      	ldr	r3, [pc, #288]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	4a4a      	ldr	r2, [pc, #296]	; (8002004 <HAL_RCC_OscConfig+0x338>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	0019      	movs	r1, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	021a      	lsls	r2, r3, #8
 8001ee4:	4b44      	ldr	r3, [pc, #272]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	e01b      	b.n	8001f24 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001eec:	4b42      	ldr	r3, [pc, #264]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	4b41      	ldr	r3, [pc, #260]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001ef2:	4949      	ldr	r1, [pc, #292]	; (8002018 <HAL_RCC_OscConfig+0x34c>)
 8001ef4:	400a      	ands	r2, r1
 8001ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef8:	f7ff fbb4 	bl	8001664 <HAL_GetTick>
 8001efc:	0003      	movs	r3, r0
 8001efe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f02:	f7ff fbaf 	bl	8001664 <HAL_GetTick>
 8001f06:	0002      	movs	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e1de      	b.n	80022d2 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f14:	4b38      	ldr	r3, [pc, #224]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	2380      	movs	r3, #128	; 0x80
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d1f0      	bne.n	8001f02 <HAL_RCC_OscConfig+0x236>
 8001f20:	e000      	b.n	8001f24 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f22:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2208      	movs	r2, #8
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d047      	beq.n	8001fbe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001f2e:	4b32      	ldr	r3, [pc, #200]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2238      	movs	r2, #56	; 0x38
 8001f34:	4013      	ands	r3, r2
 8001f36:	2b18      	cmp	r3, #24
 8001f38:	d10a      	bne.n	8001f50 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001f3a:	4b2f      	ldr	r3, [pc, #188]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f3e:	2202      	movs	r2, #2
 8001f40:	4013      	ands	r3, r2
 8001f42:	d03c      	beq.n	8001fbe <HAL_RCC_OscConfig+0x2f2>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d138      	bne.n	8001fbe <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e1c0      	b.n	80022d2 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d019      	beq.n	8001f8c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001f58:	4b27      	ldr	r3, [pc, #156]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001f5a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f5c:	4b26      	ldr	r3, [pc, #152]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001f5e:	2101      	movs	r1, #1
 8001f60:	430a      	orrs	r2, r1
 8001f62:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f64:	f7ff fb7e 	bl	8001664 <HAL_GetTick>
 8001f68:	0003      	movs	r3, r0
 8001f6a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f6e:	f7ff fb79 	bl	8001664 <HAL_GetTick>
 8001f72:	0002      	movs	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e1a8      	b.n	80022d2 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f80:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f84:	2202      	movs	r2, #2
 8001f86:	4013      	ands	r3, r2
 8001f88:	d0f1      	beq.n	8001f6e <HAL_RCC_OscConfig+0x2a2>
 8001f8a:	e018      	b.n	8001fbe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001f8c:	4b1a      	ldr	r3, [pc, #104]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001f8e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f90:	4b19      	ldr	r3, [pc, #100]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001f92:	2101      	movs	r1, #1
 8001f94:	438a      	bics	r2, r1
 8001f96:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f98:	f7ff fb64 	bl	8001664 <HAL_GetTick>
 8001f9c:	0003      	movs	r3, r0
 8001f9e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fa2:	f7ff fb5f 	bl	8001664 <HAL_GetTick>
 8001fa6:	0002      	movs	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e18e      	b.n	80022d2 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fb4:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fb8:	2202      	movs	r2, #2
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d1f1      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2204      	movs	r2, #4
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d100      	bne.n	8001fca <HAL_RCC_OscConfig+0x2fe>
 8001fc8:	e0c6      	b.n	8002158 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fca:	231f      	movs	r3, #31
 8001fcc:	18fb      	adds	r3, r7, r3
 8001fce:	2200      	movs	r2, #0
 8001fd0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001fd2:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	2238      	movs	r2, #56	; 0x38
 8001fd8:	4013      	ands	r3, r2
 8001fda:	2b20      	cmp	r3, #32
 8001fdc:	d11e      	bne.n	800201c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001fde:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <HAL_RCC_OscConfig+0x32c>)
 8001fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d100      	bne.n	8001fea <HAL_RCC_OscConfig+0x31e>
 8001fe8:	e0b6      	b.n	8002158 <HAL_RCC_OscConfig+0x48c>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d000      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x328>
 8001ff2:	e0b1      	b.n	8002158 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e16c      	b.n	80022d2 <HAL_RCC_OscConfig+0x606>
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	fffeffff 	.word	0xfffeffff
 8002000:	fffbffff 	.word	0xfffbffff
 8002004:	ffff80ff 	.word	0xffff80ff
 8002008:	ffffc7ff 	.word	0xffffc7ff
 800200c:	00f42400 	.word	0x00f42400
 8002010:	20000004 	.word	0x20000004
 8002014:	20000008 	.word	0x20000008
 8002018:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800201c:	4baf      	ldr	r3, [pc, #700]	; (80022dc <HAL_RCC_OscConfig+0x610>)
 800201e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002020:	2380      	movs	r3, #128	; 0x80
 8002022:	055b      	lsls	r3, r3, #21
 8002024:	4013      	ands	r3, r2
 8002026:	d101      	bne.n	800202c <HAL_RCC_OscConfig+0x360>
 8002028:	2301      	movs	r3, #1
 800202a:	e000      	b.n	800202e <HAL_RCC_OscConfig+0x362>
 800202c:	2300      	movs	r3, #0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d011      	beq.n	8002056 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002032:	4baa      	ldr	r3, [pc, #680]	; (80022dc <HAL_RCC_OscConfig+0x610>)
 8002034:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002036:	4ba9      	ldr	r3, [pc, #676]	; (80022dc <HAL_RCC_OscConfig+0x610>)
 8002038:	2180      	movs	r1, #128	; 0x80
 800203a:	0549      	lsls	r1, r1, #21
 800203c:	430a      	orrs	r2, r1
 800203e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002040:	4ba6      	ldr	r3, [pc, #664]	; (80022dc <HAL_RCC_OscConfig+0x610>)
 8002042:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002044:	2380      	movs	r3, #128	; 0x80
 8002046:	055b      	lsls	r3, r3, #21
 8002048:	4013      	ands	r3, r2
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800204e:	231f      	movs	r3, #31
 8002050:	18fb      	adds	r3, r7, r3
 8002052:	2201      	movs	r2, #1
 8002054:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002056:	4ba2      	ldr	r3, [pc, #648]	; (80022e0 <HAL_RCC_OscConfig+0x614>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	2380      	movs	r3, #128	; 0x80
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	4013      	ands	r3, r2
 8002060:	d11a      	bne.n	8002098 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002062:	4b9f      	ldr	r3, [pc, #636]	; (80022e0 <HAL_RCC_OscConfig+0x614>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	4b9e      	ldr	r3, [pc, #632]	; (80022e0 <HAL_RCC_OscConfig+0x614>)
 8002068:	2180      	movs	r1, #128	; 0x80
 800206a:	0049      	lsls	r1, r1, #1
 800206c:	430a      	orrs	r2, r1
 800206e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002070:	f7ff faf8 	bl	8001664 <HAL_GetTick>
 8002074:	0003      	movs	r3, r0
 8002076:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800207a:	f7ff faf3 	bl	8001664 <HAL_GetTick>
 800207e:	0002      	movs	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e122      	b.n	80022d2 <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800208c:	4b94      	ldr	r3, [pc, #592]	; (80022e0 <HAL_RCC_OscConfig+0x614>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	2380      	movs	r3, #128	; 0x80
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	4013      	ands	r3, r2
 8002096:	d0f0      	beq.n	800207a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d106      	bne.n	80020ae <HAL_RCC_OscConfig+0x3e2>
 80020a0:	4b8e      	ldr	r3, [pc, #568]	; (80022dc <HAL_RCC_OscConfig+0x610>)
 80020a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020a4:	4b8d      	ldr	r3, [pc, #564]	; (80022dc <HAL_RCC_OscConfig+0x610>)
 80020a6:	2101      	movs	r1, #1
 80020a8:	430a      	orrs	r2, r1
 80020aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80020ac:	e01c      	b.n	80020e8 <HAL_RCC_OscConfig+0x41c>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	2b05      	cmp	r3, #5
 80020b4:	d10c      	bne.n	80020d0 <HAL_RCC_OscConfig+0x404>
 80020b6:	4b89      	ldr	r3, [pc, #548]	; (80022dc <HAL_RCC_OscConfig+0x610>)
 80020b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020ba:	4b88      	ldr	r3, [pc, #544]	; (80022dc <HAL_RCC_OscConfig+0x610>)
 80020bc:	2104      	movs	r1, #4
 80020be:	430a      	orrs	r2, r1
 80020c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80020c2:	4b86      	ldr	r3, [pc, #536]	; (80022dc <HAL_RCC_OscConfig+0x610>)
 80020c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020c6:	4b85      	ldr	r3, [pc, #532]	; (80022dc <HAL_RCC_OscConfig+0x610>)
 80020c8:	2101      	movs	r1, #1
 80020ca:	430a      	orrs	r2, r1
 80020cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80020ce:	e00b      	b.n	80020e8 <HAL_RCC_OscConfig+0x41c>
 80020d0:	4b82      	ldr	r3, [pc, #520]	; (80022dc <HAL_RCC_OscConfig+0x610>)
 80020d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020d4:	4b81      	ldr	r3, [pc, #516]	; (80022dc <HAL_RCC_OscConfig+0x610>)
 80020d6:	2101      	movs	r1, #1
 80020d8:	438a      	bics	r2, r1
 80020da:	65da      	str	r2, [r3, #92]	; 0x5c
 80020dc:	4b7f      	ldr	r3, [pc, #508]	; (80022dc <HAL_RCC_OscConfig+0x610>)
 80020de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020e0:	4b7e      	ldr	r3, [pc, #504]	; (80022dc <HAL_RCC_OscConfig+0x610>)
 80020e2:	2104      	movs	r1, #4
 80020e4:	438a      	bics	r2, r1
 80020e6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d014      	beq.n	800211a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f0:	f7ff fab8 	bl	8001664 <HAL_GetTick>
 80020f4:	0003      	movs	r3, r0
 80020f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020f8:	e009      	b.n	800210e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fa:	f7ff fab3 	bl	8001664 <HAL_GetTick>
 80020fe:	0002      	movs	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	4a77      	ldr	r2, [pc, #476]	; (80022e4 <HAL_RCC_OscConfig+0x618>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e0e1      	b.n	80022d2 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800210e:	4b73      	ldr	r3, [pc, #460]	; (80022dc <HAL_RCC_OscConfig+0x610>)
 8002110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002112:	2202      	movs	r2, #2
 8002114:	4013      	ands	r3, r2
 8002116:	d0f0      	beq.n	80020fa <HAL_RCC_OscConfig+0x42e>
 8002118:	e013      	b.n	8002142 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211a:	f7ff faa3 	bl	8001664 <HAL_GetTick>
 800211e:	0003      	movs	r3, r0
 8002120:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002122:	e009      	b.n	8002138 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002124:	f7ff fa9e 	bl	8001664 <HAL_GetTick>
 8002128:	0002      	movs	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	4a6d      	ldr	r2, [pc, #436]	; (80022e4 <HAL_RCC_OscConfig+0x618>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e0cc      	b.n	80022d2 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002138:	4b68      	ldr	r3, [pc, #416]	; (80022dc <HAL_RCC_OscConfig+0x610>)
 800213a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213c:	2202      	movs	r2, #2
 800213e:	4013      	ands	r3, r2
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002142:	231f      	movs	r3, #31
 8002144:	18fb      	adds	r3, r7, r3
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d105      	bne.n	8002158 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800214c:	4b63      	ldr	r3, [pc, #396]	; (80022dc <HAL_RCC_OscConfig+0x610>)
 800214e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002150:	4b62      	ldr	r3, [pc, #392]	; (80022dc <HAL_RCC_OscConfig+0x610>)
 8002152:	4965      	ldr	r1, [pc, #404]	; (80022e8 <HAL_RCC_OscConfig+0x61c>)
 8002154:	400a      	ands	r2, r1
 8002156:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	69db      	ldr	r3, [r3, #28]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d100      	bne.n	8002162 <HAL_RCC_OscConfig+0x496>
 8002160:	e0b6      	b.n	80022d0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002162:	4b5e      	ldr	r3, [pc, #376]	; (80022dc <HAL_RCC_OscConfig+0x610>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	2238      	movs	r2, #56	; 0x38
 8002168:	4013      	ands	r3, r2
 800216a:	2b10      	cmp	r3, #16
 800216c:	d100      	bne.n	8002170 <HAL_RCC_OscConfig+0x4a4>
 800216e:	e07e      	b.n	800226e <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	2b02      	cmp	r3, #2
 8002176:	d153      	bne.n	8002220 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002178:	4b58      	ldr	r3, [pc, #352]	; (80022dc <HAL_RCC_OscConfig+0x610>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4b57      	ldr	r3, [pc, #348]	; (80022dc <HAL_RCC_OscConfig+0x610>)
 800217e:	495b      	ldr	r1, [pc, #364]	; (80022ec <HAL_RCC_OscConfig+0x620>)
 8002180:	400a      	ands	r2, r1
 8002182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002184:	f7ff fa6e 	bl	8001664 <HAL_GetTick>
 8002188:	0003      	movs	r3, r0
 800218a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800218e:	f7ff fa69 	bl	8001664 <HAL_GetTick>
 8002192:	0002      	movs	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e098      	b.n	80022d2 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021a0:	4b4e      	ldr	r3, [pc, #312]	; (80022dc <HAL_RCC_OscConfig+0x610>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	2380      	movs	r3, #128	; 0x80
 80021a6:	049b      	lsls	r3, r3, #18
 80021a8:	4013      	ands	r3, r2
 80021aa:	d1f0      	bne.n	800218e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ac:	4b4b      	ldr	r3, [pc, #300]	; (80022dc <HAL_RCC_OscConfig+0x610>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	4a4f      	ldr	r2, [pc, #316]	; (80022f0 <HAL_RCC_OscConfig+0x624>)
 80021b2:	4013      	ands	r3, r2
 80021b4:	0019      	movs	r1, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a1a      	ldr	r2, [r3, #32]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	431a      	orrs	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c4:	021b      	lsls	r3, r3, #8
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	431a      	orrs	r2, r3
 80021d4:	4b41      	ldr	r3, [pc, #260]	; (80022dc <HAL_RCC_OscConfig+0x610>)
 80021d6:	430a      	orrs	r2, r1
 80021d8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021da:	4b40      	ldr	r3, [pc, #256]	; (80022dc <HAL_RCC_OscConfig+0x610>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	4b3f      	ldr	r3, [pc, #252]	; (80022dc <HAL_RCC_OscConfig+0x610>)
 80021e0:	2180      	movs	r1, #128	; 0x80
 80021e2:	0449      	lsls	r1, r1, #17
 80021e4:	430a      	orrs	r2, r1
 80021e6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80021e8:	4b3c      	ldr	r3, [pc, #240]	; (80022dc <HAL_RCC_OscConfig+0x610>)
 80021ea:	68da      	ldr	r2, [r3, #12]
 80021ec:	4b3b      	ldr	r3, [pc, #236]	; (80022dc <HAL_RCC_OscConfig+0x610>)
 80021ee:	2180      	movs	r1, #128	; 0x80
 80021f0:	0549      	lsls	r1, r1, #21
 80021f2:	430a      	orrs	r2, r1
 80021f4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f6:	f7ff fa35 	bl	8001664 <HAL_GetTick>
 80021fa:	0003      	movs	r3, r0
 80021fc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002200:	f7ff fa30 	bl	8001664 <HAL_GetTick>
 8002204:	0002      	movs	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e05f      	b.n	80022d2 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002212:	4b32      	ldr	r3, [pc, #200]	; (80022dc <HAL_RCC_OscConfig+0x610>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	2380      	movs	r3, #128	; 0x80
 8002218:	049b      	lsls	r3, r3, #18
 800221a:	4013      	ands	r3, r2
 800221c:	d0f0      	beq.n	8002200 <HAL_RCC_OscConfig+0x534>
 800221e:	e057      	b.n	80022d0 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002220:	4b2e      	ldr	r3, [pc, #184]	; (80022dc <HAL_RCC_OscConfig+0x610>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4b2d      	ldr	r3, [pc, #180]	; (80022dc <HAL_RCC_OscConfig+0x610>)
 8002226:	4931      	ldr	r1, [pc, #196]	; (80022ec <HAL_RCC_OscConfig+0x620>)
 8002228:	400a      	ands	r2, r1
 800222a:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800222c:	4b2b      	ldr	r3, [pc, #172]	; (80022dc <HAL_RCC_OscConfig+0x610>)
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	4b2a      	ldr	r3, [pc, #168]	; (80022dc <HAL_RCC_OscConfig+0x610>)
 8002232:	2103      	movs	r1, #3
 8002234:	438a      	bics	r2, r1
 8002236:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002238:	4b28      	ldr	r3, [pc, #160]	; (80022dc <HAL_RCC_OscConfig+0x610>)
 800223a:	68da      	ldr	r2, [r3, #12]
 800223c:	4b27      	ldr	r3, [pc, #156]	; (80022dc <HAL_RCC_OscConfig+0x610>)
 800223e:	492d      	ldr	r1, [pc, #180]	; (80022f4 <HAL_RCC_OscConfig+0x628>)
 8002240:	400a      	ands	r2, r1
 8002242:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002244:	f7ff fa0e 	bl	8001664 <HAL_GetTick>
 8002248:	0003      	movs	r3, r0
 800224a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800224c:	e008      	b.n	8002260 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800224e:	f7ff fa09 	bl	8001664 <HAL_GetTick>
 8002252:	0002      	movs	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e038      	b.n	80022d2 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002260:	4b1e      	ldr	r3, [pc, #120]	; (80022dc <HAL_RCC_OscConfig+0x610>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	2380      	movs	r3, #128	; 0x80
 8002266:	049b      	lsls	r3, r3, #18
 8002268:	4013      	ands	r3, r2
 800226a:	d1f0      	bne.n	800224e <HAL_RCC_OscConfig+0x582>
 800226c:	e030      	b.n	80022d0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d101      	bne.n	800227a <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e02b      	b.n	80022d2 <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800227a:	4b18      	ldr	r3, [pc, #96]	; (80022dc <HAL_RCC_OscConfig+0x610>)
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	2203      	movs	r2, #3
 8002284:	401a      	ands	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	429a      	cmp	r2, r3
 800228c:	d11e      	bne.n	80022cc <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	2270      	movs	r2, #112	; 0x70
 8002292:	401a      	ands	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002298:	429a      	cmp	r2, r3
 800229a:	d117      	bne.n	80022cc <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	23fe      	movs	r3, #254	; 0xfe
 80022a0:	01db      	lsls	r3, r3, #7
 80022a2:	401a      	ands	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a8:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d10e      	bne.n	80022cc <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	23f8      	movs	r3, #248	; 0xf8
 80022b2:	039b      	lsls	r3, r3, #14
 80022b4:	401a      	ands	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d106      	bne.n	80022cc <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	0f5b      	lsrs	r3, r3, #29
 80022c2:	075a      	lsls	r2, r3, #29
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d001      	beq.n	80022d0 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e000      	b.n	80022d2 <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	0018      	movs	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	b008      	add	sp, #32
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	40021000 	.word	0x40021000
 80022e0:	40007000 	.word	0x40007000
 80022e4:	00001388 	.word	0x00001388
 80022e8:	efffffff 	.word	0xefffffff
 80022ec:	feffffff 	.word	0xfeffffff
 80022f0:	1fc1808c 	.word	0x1fc1808c
 80022f4:	effeffff 	.word	0xeffeffff

080022f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e0e9      	b.n	80024e0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800230c:	4b76      	ldr	r3, [pc, #472]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2207      	movs	r2, #7
 8002312:	4013      	ands	r3, r2
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	429a      	cmp	r2, r3
 8002318:	d91e      	bls.n	8002358 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231a:	4b73      	ldr	r3, [pc, #460]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2207      	movs	r2, #7
 8002320:	4393      	bics	r3, r2
 8002322:	0019      	movs	r1, r3
 8002324:	4b70      	ldr	r3, [pc, #448]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	430a      	orrs	r2, r1
 800232a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800232c:	f7ff f99a 	bl	8001664 <HAL_GetTick>
 8002330:	0003      	movs	r3, r0
 8002332:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002334:	e009      	b.n	800234a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002336:	f7ff f995 	bl	8001664 <HAL_GetTick>
 800233a:	0002      	movs	r2, r0
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	4a6a      	ldr	r2, [pc, #424]	; (80024ec <HAL_RCC_ClockConfig+0x1f4>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d901      	bls.n	800234a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e0ca      	b.n	80024e0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800234a:	4b67      	ldr	r3, [pc, #412]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2207      	movs	r2, #7
 8002350:	4013      	ands	r3, r2
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	429a      	cmp	r2, r3
 8002356:	d1ee      	bne.n	8002336 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2202      	movs	r2, #2
 800235e:	4013      	ands	r3, r2
 8002360:	d015      	beq.n	800238e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2204      	movs	r2, #4
 8002368:	4013      	ands	r3, r2
 800236a:	d006      	beq.n	800237a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800236c:	4b60      	ldr	r3, [pc, #384]	; (80024f0 <HAL_RCC_ClockConfig+0x1f8>)
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	4b5f      	ldr	r3, [pc, #380]	; (80024f0 <HAL_RCC_ClockConfig+0x1f8>)
 8002372:	21e0      	movs	r1, #224	; 0xe0
 8002374:	01c9      	lsls	r1, r1, #7
 8002376:	430a      	orrs	r2, r1
 8002378:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800237a:	4b5d      	ldr	r3, [pc, #372]	; (80024f0 <HAL_RCC_ClockConfig+0x1f8>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	4a5d      	ldr	r2, [pc, #372]	; (80024f4 <HAL_RCC_ClockConfig+0x1fc>)
 8002380:	4013      	ands	r3, r2
 8002382:	0019      	movs	r1, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	4b59      	ldr	r3, [pc, #356]	; (80024f0 <HAL_RCC_ClockConfig+0x1f8>)
 800238a:	430a      	orrs	r2, r1
 800238c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2201      	movs	r2, #1
 8002394:	4013      	ands	r3, r2
 8002396:	d057      	beq.n	8002448 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d107      	bne.n	80023b0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023a0:	4b53      	ldr	r3, [pc, #332]	; (80024f0 <HAL_RCC_ClockConfig+0x1f8>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	2380      	movs	r3, #128	; 0x80
 80023a6:	029b      	lsls	r3, r3, #10
 80023a8:	4013      	ands	r3, r2
 80023aa:	d12b      	bne.n	8002404 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e097      	b.n	80024e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d107      	bne.n	80023c8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023b8:	4b4d      	ldr	r3, [pc, #308]	; (80024f0 <HAL_RCC_ClockConfig+0x1f8>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	2380      	movs	r3, #128	; 0x80
 80023be:	049b      	lsls	r3, r3, #18
 80023c0:	4013      	ands	r3, r2
 80023c2:	d11f      	bne.n	8002404 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e08b      	b.n	80024e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d107      	bne.n	80023e0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023d0:	4b47      	ldr	r3, [pc, #284]	; (80024f0 <HAL_RCC_ClockConfig+0x1f8>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	2380      	movs	r3, #128	; 0x80
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4013      	ands	r3, r2
 80023da:	d113      	bne.n	8002404 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e07f      	b.n	80024e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	2b03      	cmp	r3, #3
 80023e6:	d106      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023e8:	4b41      	ldr	r3, [pc, #260]	; (80024f0 <HAL_RCC_ClockConfig+0x1f8>)
 80023ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ec:	2202      	movs	r2, #2
 80023ee:	4013      	ands	r3, r2
 80023f0:	d108      	bne.n	8002404 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e074      	b.n	80024e0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023f6:	4b3e      	ldr	r3, [pc, #248]	; (80024f0 <HAL_RCC_ClockConfig+0x1f8>)
 80023f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fa:	2202      	movs	r2, #2
 80023fc:	4013      	ands	r3, r2
 80023fe:	d101      	bne.n	8002404 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e06d      	b.n	80024e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002404:	4b3a      	ldr	r3, [pc, #232]	; (80024f0 <HAL_RCC_ClockConfig+0x1f8>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	2207      	movs	r2, #7
 800240a:	4393      	bics	r3, r2
 800240c:	0019      	movs	r1, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	4b37      	ldr	r3, [pc, #220]	; (80024f0 <HAL_RCC_ClockConfig+0x1f8>)
 8002414:	430a      	orrs	r2, r1
 8002416:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002418:	f7ff f924 	bl	8001664 <HAL_GetTick>
 800241c:	0003      	movs	r3, r0
 800241e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002420:	e009      	b.n	8002436 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002422:	f7ff f91f 	bl	8001664 <HAL_GetTick>
 8002426:	0002      	movs	r2, r0
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	4a2f      	ldr	r2, [pc, #188]	; (80024ec <HAL_RCC_ClockConfig+0x1f4>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e054      	b.n	80024e0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002436:	4b2e      	ldr	r3, [pc, #184]	; (80024f0 <HAL_RCC_ClockConfig+0x1f8>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2238      	movs	r2, #56	; 0x38
 800243c:	401a      	ands	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	429a      	cmp	r2, r3
 8002446:	d1ec      	bne.n	8002422 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002448:	4b27      	ldr	r3, [pc, #156]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2207      	movs	r2, #7
 800244e:	4013      	ands	r3, r2
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d21e      	bcs.n	8002494 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002456:	4b24      	ldr	r3, [pc, #144]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2207      	movs	r2, #7
 800245c:	4393      	bics	r3, r2
 800245e:	0019      	movs	r1, r3
 8002460:	4b21      	ldr	r3, [pc, #132]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	430a      	orrs	r2, r1
 8002466:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002468:	f7ff f8fc 	bl	8001664 <HAL_GetTick>
 800246c:	0003      	movs	r3, r0
 800246e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002470:	e009      	b.n	8002486 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002472:	f7ff f8f7 	bl	8001664 <HAL_GetTick>
 8002476:	0002      	movs	r2, r0
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	4a1b      	ldr	r2, [pc, #108]	; (80024ec <HAL_RCC_ClockConfig+0x1f4>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e02c      	b.n	80024e0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002486:	4b18      	ldr	r3, [pc, #96]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2207      	movs	r2, #7
 800248c:	4013      	ands	r3, r2
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	429a      	cmp	r2, r3
 8002492:	d1ee      	bne.n	8002472 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2204      	movs	r2, #4
 800249a:	4013      	ands	r3, r2
 800249c:	d009      	beq.n	80024b2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800249e:	4b14      	ldr	r3, [pc, #80]	; (80024f0 <HAL_RCC_ClockConfig+0x1f8>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	4a15      	ldr	r2, [pc, #84]	; (80024f8 <HAL_RCC_ClockConfig+0x200>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	0019      	movs	r1, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68da      	ldr	r2, [r3, #12]
 80024ac:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <HAL_RCC_ClockConfig+0x1f8>)
 80024ae:	430a      	orrs	r2, r1
 80024b0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80024b2:	f000 f829 	bl	8002508 <HAL_RCC_GetSysClockFreq>
 80024b6:	0001      	movs	r1, r0
 80024b8:	4b0d      	ldr	r3, [pc, #52]	; (80024f0 <HAL_RCC_ClockConfig+0x1f8>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	0a1b      	lsrs	r3, r3, #8
 80024be:	220f      	movs	r2, #15
 80024c0:	401a      	ands	r2, r3
 80024c2:	4b0e      	ldr	r3, [pc, #56]	; (80024fc <HAL_RCC_ClockConfig+0x204>)
 80024c4:	0092      	lsls	r2, r2, #2
 80024c6:	58d3      	ldr	r3, [r2, r3]
 80024c8:	221f      	movs	r2, #31
 80024ca:	4013      	ands	r3, r2
 80024cc:	000a      	movs	r2, r1
 80024ce:	40da      	lsrs	r2, r3
 80024d0:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <HAL_RCC_ClockConfig+0x208>)
 80024d2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80024d4:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <HAL_RCC_ClockConfig+0x20c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	0018      	movs	r0, r3
 80024da:	f7ff f867 	bl	80015ac <HAL_InitTick>
 80024de:	0003      	movs	r3, r0
}
 80024e0:	0018      	movs	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	b004      	add	sp, #16
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40022000 	.word	0x40022000
 80024ec:	00001388 	.word	0x00001388
 80024f0:	40021000 	.word	0x40021000
 80024f4:	fffff0ff 	.word	0xfffff0ff
 80024f8:	ffff8fff 	.word	0xffff8fff
 80024fc:	08003138 	.word	0x08003138
 8002500:	20000004 	.word	0x20000004
 8002504:	20000008 	.word	0x20000008

08002508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800250e:	4b3c      	ldr	r3, [pc, #240]	; (8002600 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	2238      	movs	r2, #56	; 0x38
 8002514:	4013      	ands	r3, r2
 8002516:	d10f      	bne.n	8002538 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002518:	4b39      	ldr	r3, [pc, #228]	; (8002600 <HAL_RCC_GetSysClockFreq+0xf8>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	0adb      	lsrs	r3, r3, #11
 800251e:	2207      	movs	r2, #7
 8002520:	4013      	ands	r3, r2
 8002522:	2201      	movs	r2, #1
 8002524:	409a      	lsls	r2, r3
 8002526:	0013      	movs	r3, r2
 8002528:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800252a:	6839      	ldr	r1, [r7, #0]
 800252c:	4835      	ldr	r0, [pc, #212]	; (8002604 <HAL_RCC_GetSysClockFreq+0xfc>)
 800252e:	f7fd fde7 	bl	8000100 <__udivsi3>
 8002532:	0003      	movs	r3, r0
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	e05d      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002538:	4b31      	ldr	r3, [pc, #196]	; (8002600 <HAL_RCC_GetSysClockFreq+0xf8>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	2238      	movs	r2, #56	; 0x38
 800253e:	4013      	ands	r3, r2
 8002540:	2b08      	cmp	r3, #8
 8002542:	d102      	bne.n	800254a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002544:	4b30      	ldr	r3, [pc, #192]	; (8002608 <HAL_RCC_GetSysClockFreq+0x100>)
 8002546:	613b      	str	r3, [r7, #16]
 8002548:	e054      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800254a:	4b2d      	ldr	r3, [pc, #180]	; (8002600 <HAL_RCC_GetSysClockFreq+0xf8>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	2238      	movs	r2, #56	; 0x38
 8002550:	4013      	ands	r3, r2
 8002552:	2b10      	cmp	r3, #16
 8002554:	d138      	bne.n	80025c8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002556:	4b2a      	ldr	r3, [pc, #168]	; (8002600 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	2203      	movs	r2, #3
 800255c:	4013      	ands	r3, r2
 800255e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002560:	4b27      	ldr	r3, [pc, #156]	; (8002600 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	091b      	lsrs	r3, r3, #4
 8002566:	2207      	movs	r2, #7
 8002568:	4013      	ands	r3, r2
 800256a:	3301      	adds	r3, #1
 800256c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2b03      	cmp	r3, #3
 8002572:	d10d      	bne.n	8002590 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002574:	68b9      	ldr	r1, [r7, #8]
 8002576:	4824      	ldr	r0, [pc, #144]	; (8002608 <HAL_RCC_GetSysClockFreq+0x100>)
 8002578:	f7fd fdc2 	bl	8000100 <__udivsi3>
 800257c:	0003      	movs	r3, r0
 800257e:	0019      	movs	r1, r3
 8002580:	4b1f      	ldr	r3, [pc, #124]	; (8002600 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	0a1b      	lsrs	r3, r3, #8
 8002586:	227f      	movs	r2, #127	; 0x7f
 8002588:	4013      	ands	r3, r2
 800258a:	434b      	muls	r3, r1
 800258c:	617b      	str	r3, [r7, #20]
        break;
 800258e:	e00d      	b.n	80025ac <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002590:	68b9      	ldr	r1, [r7, #8]
 8002592:	481c      	ldr	r0, [pc, #112]	; (8002604 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002594:	f7fd fdb4 	bl	8000100 <__udivsi3>
 8002598:	0003      	movs	r3, r0
 800259a:	0019      	movs	r1, r3
 800259c:	4b18      	ldr	r3, [pc, #96]	; (8002600 <HAL_RCC_GetSysClockFreq+0xf8>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	0a1b      	lsrs	r3, r3, #8
 80025a2:	227f      	movs	r2, #127	; 0x7f
 80025a4:	4013      	ands	r3, r2
 80025a6:	434b      	muls	r3, r1
 80025a8:	617b      	str	r3, [r7, #20]
        break;
 80025aa:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80025ac:	4b14      	ldr	r3, [pc, #80]	; (8002600 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	0f5b      	lsrs	r3, r3, #29
 80025b2:	2207      	movs	r2, #7
 80025b4:	4013      	ands	r3, r2
 80025b6:	3301      	adds	r3, #1
 80025b8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	6978      	ldr	r0, [r7, #20]
 80025be:	f7fd fd9f 	bl	8000100 <__udivsi3>
 80025c2:	0003      	movs	r3, r0
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	e015      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80025c8:	4b0d      	ldr	r3, [pc, #52]	; (8002600 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	2238      	movs	r2, #56	; 0x38
 80025ce:	4013      	ands	r3, r2
 80025d0:	2b20      	cmp	r3, #32
 80025d2:	d103      	bne.n	80025dc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80025d4:	2380      	movs	r3, #128	; 0x80
 80025d6:	021b      	lsls	r3, r3, #8
 80025d8:	613b      	str	r3, [r7, #16]
 80025da:	e00b      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80025dc:	4b08      	ldr	r3, [pc, #32]	; (8002600 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	2238      	movs	r2, #56	; 0x38
 80025e2:	4013      	ands	r3, r2
 80025e4:	2b18      	cmp	r3, #24
 80025e6:	d103      	bne.n	80025f0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80025e8:	23fa      	movs	r3, #250	; 0xfa
 80025ea:	01db      	lsls	r3, r3, #7
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	e001      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80025f4:	693b      	ldr	r3, [r7, #16]
}
 80025f6:	0018      	movs	r0, r3
 80025f8:	46bd      	mov	sp, r7
 80025fa:	b006      	add	sp, #24
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	40021000 	.word	0x40021000
 8002604:	00f42400 	.word	0x00f42400
 8002608:	007a1200 	.word	0x007a1200

0800260c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e04a      	b.n	80026b4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	223d      	movs	r2, #61	; 0x3d
 8002622:	5c9b      	ldrb	r3, [r3, r2]
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d107      	bne.n	800263a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	223c      	movs	r2, #60	; 0x3c
 800262e:	2100      	movs	r1, #0
 8002630:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	0018      	movs	r0, r3
 8002636:	f7fe feff 	bl	8001438 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	223d      	movs	r2, #61	; 0x3d
 800263e:	2102      	movs	r1, #2
 8002640:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3304      	adds	r3, #4
 800264a:	0019      	movs	r1, r3
 800264c:	0010      	movs	r0, r2
 800264e:	f000 faa9 	bl	8002ba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2248      	movs	r2, #72	; 0x48
 8002656:	2101      	movs	r1, #1
 8002658:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	223e      	movs	r2, #62	; 0x3e
 800265e:	2101      	movs	r1, #1
 8002660:	5499      	strb	r1, [r3, r2]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	223f      	movs	r2, #63	; 0x3f
 8002666:	2101      	movs	r1, #1
 8002668:	5499      	strb	r1, [r3, r2]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2240      	movs	r2, #64	; 0x40
 800266e:	2101      	movs	r1, #1
 8002670:	5499      	strb	r1, [r3, r2]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2241      	movs	r2, #65	; 0x41
 8002676:	2101      	movs	r1, #1
 8002678:	5499      	strb	r1, [r3, r2]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2242      	movs	r2, #66	; 0x42
 800267e:	2101      	movs	r1, #1
 8002680:	5499      	strb	r1, [r3, r2]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2243      	movs	r2, #67	; 0x43
 8002686:	2101      	movs	r1, #1
 8002688:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2244      	movs	r2, #68	; 0x44
 800268e:	2101      	movs	r1, #1
 8002690:	5499      	strb	r1, [r3, r2]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2245      	movs	r2, #69	; 0x45
 8002696:	2101      	movs	r1, #1
 8002698:	5499      	strb	r1, [r3, r2]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2246      	movs	r2, #70	; 0x46
 800269e:	2101      	movs	r1, #1
 80026a0:	5499      	strb	r1, [r3, r2]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2247      	movs	r2, #71	; 0x47
 80026a6:	2101      	movs	r1, #1
 80026a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	223d      	movs	r2, #61	; 0x3d
 80026ae:	2101      	movs	r1, #1
 80026b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	0018      	movs	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	b002      	add	sp, #8
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	223d      	movs	r2, #61	; 0x3d
 80026c8:	5c9b      	ldrb	r3, [r3, r2]
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d001      	beq.n	80026d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e03c      	b.n	800274e <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	223d      	movs	r2, #61	; 0x3d
 80026d8:	2102      	movs	r1, #2
 80026da:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68da      	ldr	r2, [r3, #12]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2101      	movs	r1, #1
 80026e8:	430a      	orrs	r2, r1
 80026ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a19      	ldr	r2, [pc, #100]	; (8002758 <HAL_TIM_Base_Start_IT+0x9c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d009      	beq.n	800270a <HAL_TIM_Base_Start_IT+0x4e>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a18      	ldr	r2, [pc, #96]	; (800275c <HAL_TIM_Base_Start_IT+0xa0>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d004      	beq.n	800270a <HAL_TIM_Base_Start_IT+0x4e>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a16      	ldr	r2, [pc, #88]	; (8002760 <HAL_TIM_Base_Start_IT+0xa4>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d116      	bne.n	8002738 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	4a14      	ldr	r2, [pc, #80]	; (8002764 <HAL_TIM_Base_Start_IT+0xa8>)
 8002712:	4013      	ands	r3, r2
 8002714:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2b06      	cmp	r3, #6
 800271a:	d016      	beq.n	800274a <HAL_TIM_Base_Start_IT+0x8e>
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	2380      	movs	r3, #128	; 0x80
 8002720:	025b      	lsls	r3, r3, #9
 8002722:	429a      	cmp	r2, r3
 8002724:	d011      	beq.n	800274a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2101      	movs	r1, #1
 8002732:	430a      	orrs	r2, r1
 8002734:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002736:	e008      	b.n	800274a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2101      	movs	r1, #1
 8002744:	430a      	orrs	r2, r1
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	e000      	b.n	800274c <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800274a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	0018      	movs	r0, r3
 8002750:	46bd      	mov	sp, r7
 8002752:	b004      	add	sp, #16
 8002754:	bd80      	pop	{r7, pc}
 8002756:	46c0      	nop			; (mov r8, r8)
 8002758:	40012c00 	.word	0x40012c00
 800275c:	40000400 	.word	0x40000400
 8002760:	40014000 	.word	0x40014000
 8002764:	00010007 	.word	0x00010007

08002768 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	2202      	movs	r2, #2
 8002778:	4013      	ands	r3, r2
 800277a:	2b02      	cmp	r3, #2
 800277c:	d124      	bne.n	80027c8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	2202      	movs	r2, #2
 8002786:	4013      	ands	r3, r2
 8002788:	2b02      	cmp	r3, #2
 800278a:	d11d      	bne.n	80027c8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2203      	movs	r2, #3
 8002792:	4252      	negs	r2, r2
 8002794:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	2203      	movs	r2, #3
 80027a4:	4013      	ands	r3, r2
 80027a6:	d004      	beq.n	80027b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	0018      	movs	r0, r3
 80027ac:	f000 f9e2 	bl	8002b74 <HAL_TIM_IC_CaptureCallback>
 80027b0:	e007      	b.n	80027c2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	0018      	movs	r0, r3
 80027b6:	f000 f9d5 	bl	8002b64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	0018      	movs	r0, r3
 80027be:	f000 f9e1 	bl	8002b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	2204      	movs	r2, #4
 80027d0:	4013      	ands	r3, r2
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d125      	bne.n	8002822 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	2204      	movs	r2, #4
 80027de:	4013      	ands	r3, r2
 80027e0:	2b04      	cmp	r3, #4
 80027e2:	d11e      	bne.n	8002822 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2205      	movs	r2, #5
 80027ea:	4252      	negs	r2, r2
 80027ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2202      	movs	r2, #2
 80027f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699a      	ldr	r2, [r3, #24]
 80027fa:	23c0      	movs	r3, #192	; 0xc0
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4013      	ands	r3, r2
 8002800:	d004      	beq.n	800280c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	0018      	movs	r0, r3
 8002806:	f000 f9b5 	bl	8002b74 <HAL_TIM_IC_CaptureCallback>
 800280a:	e007      	b.n	800281c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	0018      	movs	r0, r3
 8002810:	f000 f9a8 	bl	8002b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	0018      	movs	r0, r3
 8002818:	f000 f9b4 	bl	8002b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	2208      	movs	r2, #8
 800282a:	4013      	ands	r3, r2
 800282c:	2b08      	cmp	r3, #8
 800282e:	d124      	bne.n	800287a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	2208      	movs	r2, #8
 8002838:	4013      	ands	r3, r2
 800283a:	2b08      	cmp	r3, #8
 800283c:	d11d      	bne.n	800287a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2209      	movs	r2, #9
 8002844:	4252      	negs	r2, r2
 8002846:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2204      	movs	r2, #4
 800284c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	2203      	movs	r2, #3
 8002856:	4013      	ands	r3, r2
 8002858:	d004      	beq.n	8002864 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	0018      	movs	r0, r3
 800285e:	f000 f989 	bl	8002b74 <HAL_TIM_IC_CaptureCallback>
 8002862:	e007      	b.n	8002874 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	0018      	movs	r0, r3
 8002868:	f000 f97c 	bl	8002b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	0018      	movs	r0, r3
 8002870:	f000 f988 	bl	8002b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	2210      	movs	r2, #16
 8002882:	4013      	ands	r3, r2
 8002884:	2b10      	cmp	r3, #16
 8002886:	d125      	bne.n	80028d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	2210      	movs	r2, #16
 8002890:	4013      	ands	r3, r2
 8002892:	2b10      	cmp	r3, #16
 8002894:	d11e      	bne.n	80028d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2211      	movs	r2, #17
 800289c:	4252      	negs	r2, r2
 800289e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2208      	movs	r2, #8
 80028a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	69da      	ldr	r2, [r3, #28]
 80028ac:	23c0      	movs	r3, #192	; 0xc0
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4013      	ands	r3, r2
 80028b2:	d004      	beq.n	80028be <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	0018      	movs	r0, r3
 80028b8:	f000 f95c 	bl	8002b74 <HAL_TIM_IC_CaptureCallback>
 80028bc:	e007      	b.n	80028ce <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	0018      	movs	r0, r3
 80028c2:	f000 f94f 	bl	8002b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	0018      	movs	r0, r3
 80028ca:	f000 f95b 	bl	8002b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	2201      	movs	r2, #1
 80028dc:	4013      	ands	r3, r2
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d10f      	bne.n	8002902 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	2201      	movs	r2, #1
 80028ea:	4013      	ands	r3, r2
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d108      	bne.n	8002902 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2202      	movs	r2, #2
 80028f6:	4252      	negs	r2, r2
 80028f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	0018      	movs	r0, r3
 80028fe:	f7fe fd0d 	bl	800131c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	2280      	movs	r2, #128	; 0x80
 800290a:	4013      	ands	r3, r2
 800290c:	2b80      	cmp	r3, #128	; 0x80
 800290e:	d10f      	bne.n	8002930 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	2280      	movs	r2, #128	; 0x80
 8002918:	4013      	ands	r3, r2
 800291a:	2b80      	cmp	r3, #128	; 0x80
 800291c:	d108      	bne.n	8002930 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2281      	movs	r2, #129	; 0x81
 8002924:	4252      	negs	r2, r2
 8002926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	0018      	movs	r0, r3
 800292c:	f000 fabc 	bl	8002ea8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	691a      	ldr	r2, [r3, #16]
 8002936:	2380      	movs	r3, #128	; 0x80
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	401a      	ands	r2, r3
 800293c:	2380      	movs	r3, #128	; 0x80
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	429a      	cmp	r2, r3
 8002942:	d10e      	bne.n	8002962 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	2280      	movs	r2, #128	; 0x80
 800294c:	4013      	ands	r3, r2
 800294e:	2b80      	cmp	r3, #128	; 0x80
 8002950:	d107      	bne.n	8002962 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a1c      	ldr	r2, [pc, #112]	; (80029c8 <HAL_TIM_IRQHandler+0x260>)
 8002958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	0018      	movs	r0, r3
 800295e:	f000 faab 	bl	8002eb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	2240      	movs	r2, #64	; 0x40
 800296a:	4013      	ands	r3, r2
 800296c:	2b40      	cmp	r3, #64	; 0x40
 800296e:	d10f      	bne.n	8002990 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	2240      	movs	r2, #64	; 0x40
 8002978:	4013      	ands	r3, r2
 800297a:	2b40      	cmp	r3, #64	; 0x40
 800297c:	d108      	bne.n	8002990 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2241      	movs	r2, #65	; 0x41
 8002984:	4252      	negs	r2, r2
 8002986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	0018      	movs	r0, r3
 800298c:	f000 f902 	bl	8002b94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	2220      	movs	r2, #32
 8002998:	4013      	ands	r3, r2
 800299a:	2b20      	cmp	r3, #32
 800299c:	d10f      	bne.n	80029be <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	2220      	movs	r2, #32
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b20      	cmp	r3, #32
 80029aa:	d108      	bne.n	80029be <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2221      	movs	r2, #33	; 0x21
 80029b2:	4252      	negs	r2, r2
 80029b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	0018      	movs	r0, r3
 80029ba:	f000 fa6d 	bl	8002e98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b002      	add	sp, #8
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	fffffeff 	.word	0xfffffeff

080029cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	223c      	movs	r2, #60	; 0x3c
 80029da:	5c9b      	ldrb	r3, [r3, r2]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d101      	bne.n	80029e4 <HAL_TIM_ConfigClockSource+0x18>
 80029e0:	2302      	movs	r3, #2
 80029e2:	e0b7      	b.n	8002b54 <HAL_TIM_ConfigClockSource+0x188>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	223c      	movs	r2, #60	; 0x3c
 80029e8:	2101      	movs	r1, #1
 80029ea:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	223d      	movs	r2, #61	; 0x3d
 80029f0:	2102      	movs	r1, #2
 80029f2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4a57      	ldr	r2, [pc, #348]	; (8002b5c <HAL_TIM_ConfigClockSource+0x190>)
 8002a00:	4013      	ands	r3, r2
 8002a02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4a56      	ldr	r2, [pc, #344]	; (8002b60 <HAL_TIM_ConfigClockSource+0x194>)
 8002a08:	4013      	ands	r3, r2
 8002a0a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2280      	movs	r2, #128	; 0x80
 8002a1a:	0192      	lsls	r2, r2, #6
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d040      	beq.n	8002aa2 <HAL_TIM_ConfigClockSource+0xd6>
 8002a20:	2280      	movs	r2, #128	; 0x80
 8002a22:	0192      	lsls	r2, r2, #6
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d900      	bls.n	8002a2a <HAL_TIM_ConfigClockSource+0x5e>
 8002a28:	e088      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x170>
 8002a2a:	2280      	movs	r2, #128	; 0x80
 8002a2c:	0152      	lsls	r2, r2, #5
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d100      	bne.n	8002a34 <HAL_TIM_ConfigClockSource+0x68>
 8002a32:	e085      	b.n	8002b40 <HAL_TIM_ConfigClockSource+0x174>
 8002a34:	2280      	movs	r2, #128	; 0x80
 8002a36:	0152      	lsls	r2, r2, #5
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d900      	bls.n	8002a3e <HAL_TIM_ConfigClockSource+0x72>
 8002a3c:	e07e      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x170>
 8002a3e:	2b70      	cmp	r3, #112	; 0x70
 8002a40:	d018      	beq.n	8002a74 <HAL_TIM_ConfigClockSource+0xa8>
 8002a42:	d900      	bls.n	8002a46 <HAL_TIM_ConfigClockSource+0x7a>
 8002a44:	e07a      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x170>
 8002a46:	2b60      	cmp	r3, #96	; 0x60
 8002a48:	d04f      	beq.n	8002aea <HAL_TIM_ConfigClockSource+0x11e>
 8002a4a:	d900      	bls.n	8002a4e <HAL_TIM_ConfigClockSource+0x82>
 8002a4c:	e076      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x170>
 8002a4e:	2b50      	cmp	r3, #80	; 0x50
 8002a50:	d03b      	beq.n	8002aca <HAL_TIM_ConfigClockSource+0xfe>
 8002a52:	d900      	bls.n	8002a56 <HAL_TIM_ConfigClockSource+0x8a>
 8002a54:	e072      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x170>
 8002a56:	2b40      	cmp	r3, #64	; 0x40
 8002a58:	d057      	beq.n	8002b0a <HAL_TIM_ConfigClockSource+0x13e>
 8002a5a:	d900      	bls.n	8002a5e <HAL_TIM_ConfigClockSource+0x92>
 8002a5c:	e06e      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x170>
 8002a5e:	2b30      	cmp	r3, #48	; 0x30
 8002a60:	d063      	beq.n	8002b2a <HAL_TIM_ConfigClockSource+0x15e>
 8002a62:	d86b      	bhi.n	8002b3c <HAL_TIM_ConfigClockSource+0x170>
 8002a64:	2b20      	cmp	r3, #32
 8002a66:	d060      	beq.n	8002b2a <HAL_TIM_ConfigClockSource+0x15e>
 8002a68:	d868      	bhi.n	8002b3c <HAL_TIM_ConfigClockSource+0x170>
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d05d      	beq.n	8002b2a <HAL_TIM_ConfigClockSource+0x15e>
 8002a6e:	2b10      	cmp	r3, #16
 8002a70:	d05b      	beq.n	8002b2a <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002a72:	e063      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6818      	ldr	r0, [r3, #0]
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	6899      	ldr	r1, [r3, #8]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	f000 f980 	bl	8002d88 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2277      	movs	r2, #119	; 0x77
 8002a94:	4313      	orrs	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	609a      	str	r2, [r3, #8]
      break;
 8002aa0:	e04f      	b.n	8002b42 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6818      	ldr	r0, [r3, #0]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	6899      	ldr	r1, [r3, #8]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f000 f969 	bl	8002d88 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2180      	movs	r1, #128	; 0x80
 8002ac2:	01c9      	lsls	r1, r1, #7
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	609a      	str	r2, [r3, #8]
      break;
 8002ac8:	e03b      	b.n	8002b42 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6818      	ldr	r0, [r3, #0]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	6859      	ldr	r1, [r3, #4]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	001a      	movs	r2, r3
 8002ad8:	f000 f8da 	bl	8002c90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2150      	movs	r1, #80	; 0x50
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	f000 f934 	bl	8002d50 <TIM_ITRx_SetConfig>
      break;
 8002ae8:	e02b      	b.n	8002b42 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6818      	ldr	r0, [r3, #0]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	6859      	ldr	r1, [r3, #4]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	001a      	movs	r2, r3
 8002af8:	f000 f8f8 	bl	8002cec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2160      	movs	r1, #96	; 0x60
 8002b02:	0018      	movs	r0, r3
 8002b04:	f000 f924 	bl	8002d50 <TIM_ITRx_SetConfig>
      break;
 8002b08:	e01b      	b.n	8002b42 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6818      	ldr	r0, [r3, #0]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	6859      	ldr	r1, [r3, #4]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	001a      	movs	r2, r3
 8002b18:	f000 f8ba 	bl	8002c90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2140      	movs	r1, #64	; 0x40
 8002b22:	0018      	movs	r0, r3
 8002b24:	f000 f914 	bl	8002d50 <TIM_ITRx_SetConfig>
      break;
 8002b28:	e00b      	b.n	8002b42 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	0019      	movs	r1, r3
 8002b34:	0010      	movs	r0, r2
 8002b36:	f000 f90b 	bl	8002d50 <TIM_ITRx_SetConfig>
        break;
 8002b3a:	e002      	b.n	8002b42 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8002b3c:	46c0      	nop			; (mov r8, r8)
 8002b3e:	e000      	b.n	8002b42 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8002b40:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	223d      	movs	r2, #61	; 0x3d
 8002b46:	2101      	movs	r1, #1
 8002b48:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	223c      	movs	r2, #60	; 0x3c
 8002b4e:	2100      	movs	r1, #0
 8002b50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	0018      	movs	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b004      	add	sp, #16
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	ffceff88 	.word	0xffceff88
 8002b60:	ffff00ff 	.word	0xffff00ff

08002b64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b6c:	46c0      	nop			; (mov r8, r8)
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	b002      	add	sp, #8
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b7c:	46c0      	nop			; (mov r8, r8)
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	b002      	add	sp, #8
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b8c:	46c0      	nop			; (mov r8, r8)
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	b002      	add	sp, #8
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b9c:	46c0      	nop			; (mov r8, r8)
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	b002      	add	sp, #8
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a2f      	ldr	r2, [pc, #188]	; (8002c74 <TIM_Base_SetConfig+0xd0>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d003      	beq.n	8002bc4 <TIM_Base_SetConfig+0x20>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a2e      	ldr	r2, [pc, #184]	; (8002c78 <TIM_Base_SetConfig+0xd4>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d108      	bne.n	8002bd6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2270      	movs	r2, #112	; 0x70
 8002bc8:	4393      	bics	r3, r2
 8002bca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a26      	ldr	r2, [pc, #152]	; (8002c74 <TIM_Base_SetConfig+0xd0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d013      	beq.n	8002c06 <TIM_Base_SetConfig+0x62>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a25      	ldr	r2, [pc, #148]	; (8002c78 <TIM_Base_SetConfig+0xd4>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d00f      	beq.n	8002c06 <TIM_Base_SetConfig+0x62>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a24      	ldr	r2, [pc, #144]	; (8002c7c <TIM_Base_SetConfig+0xd8>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d00b      	beq.n	8002c06 <TIM_Base_SetConfig+0x62>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a23      	ldr	r2, [pc, #140]	; (8002c80 <TIM_Base_SetConfig+0xdc>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d007      	beq.n	8002c06 <TIM_Base_SetConfig+0x62>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a22      	ldr	r2, [pc, #136]	; (8002c84 <TIM_Base_SetConfig+0xe0>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d003      	beq.n	8002c06 <TIM_Base_SetConfig+0x62>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a21      	ldr	r2, [pc, #132]	; (8002c88 <TIM_Base_SetConfig+0xe4>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d108      	bne.n	8002c18 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	4a20      	ldr	r2, [pc, #128]	; (8002c8c <TIM_Base_SetConfig+0xe8>)
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2280      	movs	r2, #128	; 0x80
 8002c1c:	4393      	bics	r3, r2
 8002c1e:	001a      	movs	r2, r3
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a0c      	ldr	r2, [pc, #48]	; (8002c74 <TIM_Base_SetConfig+0xd0>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d00b      	beq.n	8002c5e <TIM_Base_SetConfig+0xba>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a0d      	ldr	r2, [pc, #52]	; (8002c80 <TIM_Base_SetConfig+0xdc>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d007      	beq.n	8002c5e <TIM_Base_SetConfig+0xba>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a0c      	ldr	r2, [pc, #48]	; (8002c84 <TIM_Base_SetConfig+0xe0>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d003      	beq.n	8002c5e <TIM_Base_SetConfig+0xba>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a0b      	ldr	r2, [pc, #44]	; (8002c88 <TIM_Base_SetConfig+0xe4>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d103      	bne.n	8002c66 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	691a      	ldr	r2, [r3, #16]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	615a      	str	r2, [r3, #20]
}
 8002c6c:	46c0      	nop			; (mov r8, r8)
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	b004      	add	sp, #16
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	40012c00 	.word	0x40012c00
 8002c78:	40000400 	.word	0x40000400
 8002c7c:	40002000 	.word	0x40002000
 8002c80:	40014000 	.word	0x40014000
 8002c84:	40014400 	.word	0x40014400
 8002c88:	40014800 	.word	0x40014800
 8002c8c:	fffffcff 	.word	0xfffffcff

08002c90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	4393      	bics	r3, r2
 8002caa:	001a      	movs	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	22f0      	movs	r2, #240	; 0xf0
 8002cba:	4393      	bics	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	011b      	lsls	r3, r3, #4
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	220a      	movs	r2, #10
 8002ccc:	4393      	bics	r3, r2
 8002cce:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	621a      	str	r2, [r3, #32]
}
 8002ce4:	46c0      	nop			; (mov r8, r8)
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	b006      	add	sp, #24
 8002cea:	bd80      	pop	{r7, pc}

08002cec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	2210      	movs	r2, #16
 8002cfe:	4393      	bics	r3, r2
 8002d00:	001a      	movs	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	4a0d      	ldr	r2, [pc, #52]	; (8002d4c <TIM_TI2_ConfigInputStage+0x60>)
 8002d16:	4013      	ands	r3, r2
 8002d18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	031b      	lsls	r3, r3, #12
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	22a0      	movs	r2, #160	; 0xa0
 8002d28:	4393      	bics	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	621a      	str	r2, [r3, #32]
}
 8002d42:	46c0      	nop			; (mov r8, r8)
 8002d44:	46bd      	mov	sp, r7
 8002d46:	b006      	add	sp, #24
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	ffff0fff 	.word	0xffff0fff

08002d50 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4a08      	ldr	r2, [pc, #32]	; (8002d84 <TIM_ITRx_SetConfig+0x34>)
 8002d64:	4013      	ands	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	2207      	movs	r2, #7
 8002d70:	4313      	orrs	r3, r2
 8002d72:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	609a      	str	r2, [r3, #8]
}
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	b004      	add	sp, #16
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	ffcfff8f 	.word	0xffcfff8f

08002d88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
 8002d94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	4a09      	ldr	r2, [pc, #36]	; (8002dc4 <TIM_ETR_SetConfig+0x3c>)
 8002da0:	4013      	ands	r3, r2
 8002da2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	021a      	lsls	r2, r3, #8
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	431a      	orrs	r2, r3
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	609a      	str	r2, [r3, #8]
}
 8002dbc:	46c0      	nop			; (mov r8, r8)
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	b006      	add	sp, #24
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	ffff00ff 	.word	0xffff00ff

08002dc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	223c      	movs	r2, #60	; 0x3c
 8002dd6:	5c9b      	ldrb	r3, [r3, r2]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d101      	bne.n	8002de0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	e04f      	b.n	8002e80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	223c      	movs	r2, #60	; 0x3c
 8002de4:	2101      	movs	r1, #1
 8002de6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	223d      	movs	r2, #61	; 0x3d
 8002dec:	2102      	movs	r1, #2
 8002dee:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a20      	ldr	r2, [pc, #128]	; (8002e88 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d108      	bne.n	8002e1c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	4a1f      	ldr	r2, [pc, #124]	; (8002e8c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002e0e:	4013      	ands	r3, r2
 8002e10:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2270      	movs	r2, #112	; 0x70
 8002e20:	4393      	bics	r3, r2
 8002e22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a13      	ldr	r2, [pc, #76]	; (8002e88 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d009      	beq.n	8002e54 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a12      	ldr	r2, [pc, #72]	; (8002e90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d004      	beq.n	8002e54 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a11      	ldr	r2, [pc, #68]	; (8002e94 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d10c      	bne.n	8002e6e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	2280      	movs	r2, #128	; 0x80
 8002e58:	4393      	bics	r3, r2
 8002e5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	223d      	movs	r2, #61	; 0x3d
 8002e72:	2101      	movs	r1, #1
 8002e74:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	223c      	movs	r2, #60	; 0x3c
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	0018      	movs	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	b004      	add	sp, #16
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40012c00 	.word	0x40012c00
 8002e8c:	ff0fffff 	.word	0xff0fffff
 8002e90:	40000400 	.word	0x40000400
 8002e94:	40014000 	.word	0x40014000

08002e98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ea0:	46c0      	nop			; (mov r8, r8)
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b002      	add	sp, #8
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002eb0:	46c0      	nop			; (mov r8, r8)
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	b002      	add	sp, #8
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002ec0:	46c0      	nop			; (mov r8, r8)
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	b002      	add	sp, #8
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <__libc_init_array>:
 8002ec8:	b570      	push	{r4, r5, r6, lr}
 8002eca:	2600      	movs	r6, #0
 8002ecc:	4d0c      	ldr	r5, [pc, #48]	; (8002f00 <__libc_init_array+0x38>)
 8002ece:	4c0d      	ldr	r4, [pc, #52]	; (8002f04 <__libc_init_array+0x3c>)
 8002ed0:	1b64      	subs	r4, r4, r5
 8002ed2:	10a4      	asrs	r4, r4, #2
 8002ed4:	42a6      	cmp	r6, r4
 8002ed6:	d109      	bne.n	8002eec <__libc_init_array+0x24>
 8002ed8:	2600      	movs	r6, #0
 8002eda:	f000 f87d 	bl	8002fd8 <_init>
 8002ede:	4d0a      	ldr	r5, [pc, #40]	; (8002f08 <__libc_init_array+0x40>)
 8002ee0:	4c0a      	ldr	r4, [pc, #40]	; (8002f0c <__libc_init_array+0x44>)
 8002ee2:	1b64      	subs	r4, r4, r5
 8002ee4:	10a4      	asrs	r4, r4, #2
 8002ee6:	42a6      	cmp	r6, r4
 8002ee8:	d105      	bne.n	8002ef6 <__libc_init_array+0x2e>
 8002eea:	bd70      	pop	{r4, r5, r6, pc}
 8002eec:	00b3      	lsls	r3, r6, #2
 8002eee:	58eb      	ldr	r3, [r5, r3]
 8002ef0:	4798      	blx	r3
 8002ef2:	3601      	adds	r6, #1
 8002ef4:	e7ee      	b.n	8002ed4 <__libc_init_array+0xc>
 8002ef6:	00b3      	lsls	r3, r6, #2
 8002ef8:	58eb      	ldr	r3, [r5, r3]
 8002efa:	4798      	blx	r3
 8002efc:	3601      	adds	r6, #1
 8002efe:	e7f2      	b.n	8002ee6 <__libc_init_array+0x1e>
 8002f00:	080031a0 	.word	0x080031a0
 8002f04:	080031a0 	.word	0x080031a0
 8002f08:	080031a0 	.word	0x080031a0
 8002f0c:	080031a4 	.word	0x080031a4

08002f10 <__itoa>:
 8002f10:	1e93      	subs	r3, r2, #2
 8002f12:	b510      	push	{r4, lr}
 8002f14:	000c      	movs	r4, r1
 8002f16:	2b22      	cmp	r3, #34	; 0x22
 8002f18:	d904      	bls.n	8002f24 <__itoa+0x14>
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	001c      	movs	r4, r3
 8002f1e:	700b      	strb	r3, [r1, #0]
 8002f20:	0020      	movs	r0, r4
 8002f22:	bd10      	pop	{r4, pc}
 8002f24:	2a0a      	cmp	r2, #10
 8002f26:	d109      	bne.n	8002f3c <__itoa+0x2c>
 8002f28:	2800      	cmp	r0, #0
 8002f2a:	da07      	bge.n	8002f3c <__itoa+0x2c>
 8002f2c:	232d      	movs	r3, #45	; 0x2d
 8002f2e:	700b      	strb	r3, [r1, #0]
 8002f30:	2101      	movs	r1, #1
 8002f32:	4240      	negs	r0, r0
 8002f34:	1861      	adds	r1, r4, r1
 8002f36:	f000 f819 	bl	8002f6c <__utoa>
 8002f3a:	e7f1      	b.n	8002f20 <__itoa+0x10>
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	e7f9      	b.n	8002f34 <__itoa+0x24>

08002f40 <itoa>:
 8002f40:	b510      	push	{r4, lr}
 8002f42:	f7ff ffe5 	bl	8002f10 <__itoa>
 8002f46:	bd10      	pop	{r4, pc}

08002f48 <memcpy>:
 8002f48:	2300      	movs	r3, #0
 8002f4a:	b510      	push	{r4, lr}
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d100      	bne.n	8002f52 <memcpy+0xa>
 8002f50:	bd10      	pop	{r4, pc}
 8002f52:	5ccc      	ldrb	r4, [r1, r3]
 8002f54:	54c4      	strb	r4, [r0, r3]
 8002f56:	3301      	adds	r3, #1
 8002f58:	e7f8      	b.n	8002f4c <memcpy+0x4>

08002f5a <memset>:
 8002f5a:	0003      	movs	r3, r0
 8002f5c:	1882      	adds	r2, r0, r2
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d100      	bne.n	8002f64 <memset+0xa>
 8002f62:	4770      	bx	lr
 8002f64:	7019      	strb	r1, [r3, #0]
 8002f66:	3301      	adds	r3, #1
 8002f68:	e7f9      	b.n	8002f5e <memset+0x4>
	...

08002f6c <__utoa>:
 8002f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f6e:	0016      	movs	r6, r2
 8002f70:	b08d      	sub	sp, #52	; 0x34
 8002f72:	0007      	movs	r7, r0
 8002f74:	000c      	movs	r4, r1
 8002f76:	2225      	movs	r2, #37	; 0x25
 8002f78:	4916      	ldr	r1, [pc, #88]	; (8002fd4 <__utoa+0x68>)
 8002f7a:	a802      	add	r0, sp, #8
 8002f7c:	f7ff ffe4 	bl	8002f48 <memcpy>
 8002f80:	1eb3      	subs	r3, r6, #2
 8002f82:	2500      	movs	r5, #0
 8002f84:	2b22      	cmp	r3, #34	; 0x22
 8002f86:	d820      	bhi.n	8002fca <__utoa+0x5e>
 8002f88:	1e63      	subs	r3, r4, #1
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	ab02      	add	r3, sp, #8
 8002f8e:	9301      	str	r3, [sp, #4]
 8002f90:	0038      	movs	r0, r7
 8002f92:	0031      	movs	r1, r6
 8002f94:	f7fd f93a 	bl	800020c <__aeabi_uidivmod>
 8002f98:	000b      	movs	r3, r1
 8002f9a:	9a01      	ldr	r2, [sp, #4]
 8002f9c:	0029      	movs	r1, r5
 8002f9e:	5cd3      	ldrb	r3, [r2, r3]
 8002fa0:	9a00      	ldr	r2, [sp, #0]
 8002fa2:	3501      	adds	r5, #1
 8002fa4:	5553      	strb	r3, [r2, r5]
 8002fa6:	003b      	movs	r3, r7
 8002fa8:	0007      	movs	r7, r0
 8002faa:	429e      	cmp	r6, r3
 8002fac:	d9f0      	bls.n	8002f90 <__utoa+0x24>
 8002fae:	2300      	movs	r3, #0
 8002fb0:	0022      	movs	r2, r4
 8002fb2:	5563      	strb	r3, [r4, r5]
 8002fb4:	000b      	movs	r3, r1
 8002fb6:	1ac8      	subs	r0, r1, r3
 8002fb8:	4283      	cmp	r3, r0
 8002fba:	dd08      	ble.n	8002fce <__utoa+0x62>
 8002fbc:	7810      	ldrb	r0, [r2, #0]
 8002fbe:	5ce5      	ldrb	r5, [r4, r3]
 8002fc0:	7015      	strb	r5, [r2, #0]
 8002fc2:	54e0      	strb	r0, [r4, r3]
 8002fc4:	3201      	adds	r2, #1
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	e7f5      	b.n	8002fb6 <__utoa+0x4a>
 8002fca:	7025      	strb	r5, [r4, #0]
 8002fcc:	002c      	movs	r4, r5
 8002fce:	0020      	movs	r0, r4
 8002fd0:	b00d      	add	sp, #52	; 0x34
 8002fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fd4:	08003178 	.word	0x08003178

08002fd8 <_init>:
 8002fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fde:	bc08      	pop	{r3}
 8002fe0:	469e      	mov	lr, r3
 8002fe2:	4770      	bx	lr

08002fe4 <_fini>:
 8002fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fe6:	46c0      	nop			; (mov r8, r8)
 8002fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fea:	bc08      	pop	{r3}
 8002fec:	469e      	mov	lr, r3
 8002fee:	4770      	bx	lr
